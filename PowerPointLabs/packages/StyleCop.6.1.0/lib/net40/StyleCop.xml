<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StyleCop</name>
    </assembly>
    <members>
        <member name="T:StyleCop.AlertDialog">
            <summary>
            Wraps the MessageBox class.
            </summary>
            <remarks>Always use the AlertDialog class rather than MessageBox. When StyleCop is running in non-UI mode, this class
            will redirect the MessageBox output to the running log file.</remarks>
        </member>
        <member name="M:StyleCop.AlertDialog.Show(StyleCop.StyleCopCore,System.Windows.Forms.Control,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            Shows the alert dialog.
            </summary>
            <param name="core">
            The StyleCop core instance.
            </param>
            <param name="parent">
            The parent control.
            </param>
            <param name="message">
            The message to display on the dialog.
            </param>
            <param name="title">
            The title of the dialog.
            </param>
            <param name="buttons">
            The dialog buttons.
            </param>
            <param name="icon">
            The dialog icon.
            </param>
            <returns>
            Returns the dialog result.
            </returns>
        </member>
        <member name="M:StyleCop.AlertDialog.DisplayMessageBox(System.Windows.Forms.Control,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            Shows a MessageBox.
            </summary>
            <param name="parent">
            The parent control.
            </param>
            <param name="message">
            The message to display on the dialog.
            </param>
            <param name="title">
            The title of the dialog.
            </param>
            <param name="buttons">
            The dialog buttons.
            </param>
            <param name="icon">
            The dialog icon.
            </param>
            <returns>
            Returns the dialog result.
            </returns>
        </member>
        <member name="M:StyleCop.AlertDialog.SendToOutput(StyleCop.StyleCopCore,System.String,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            Writes a message to do the output log.
            </summary>
            <param name="core">
            The StyleCop core instance.
            </param>
            <param name="message">
            The message to display on the dialog.
            </param>
            <param name="icon">
            The dialog icon.
            </param>
        </member>
        <member name="T:StyleCop.AddSettingsPagesEventArgs">
            <summary>
            Event arguments for the <see cref="E:StyleCop.StyleCopCore.AddSettingsPages" /> event.
            </summary>
        </member>
        <member name="F:StyleCop.AddSettingsPagesEventArgs.pages">
            <summary>
            The pages that have been added.
            </summary>
        </member>
        <member name="F:StyleCop.AddSettingsPagesEventArgs.settingsPath">
            <summary>
            The path to the settings file.
            </summary>
        </member>
        <member name="M:StyleCop.AddSettingsPagesEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StyleCop.AddSettingsPagesEventArgs"/> class.
            </summary>
            <param name="settingsPath">
            The path to the settings file.
            </param>
        </member>
        <member name="P:StyleCop.AddSettingsPagesEventArgs.Pages">
            <summary>
            Gets the pages that were added to the StyleCop settings dialog.
            </summary>
        </member>
        <member name="P:StyleCop.AddSettingsPagesEventArgs.SettingsPath">
            <summary>
            Gets the path to the StyleCop settings file.
            </summary>
        </member>
        <member name="M:StyleCop.AddSettingsPagesEventArgs.Add(StyleCop.IPropertyControlPage)">
            <summary>
            Adds a page to be displayed on the StyleCop project settings dialog.
            </summary>
            <param name="page">
            The page to add.
            </param>
        </member>
        <member name="T:StyleCop.CodeLocation">
            <summary>
            Describes a location within a code document.
            </summary>
            <subcategory>other</subcategory>
        </member>
        <member name="F:StyleCop.CodeLocation.Empty">
            <summary>
            An empty code location.
            </summary>
        </member>
        <member name="F:StyleCop.CodeLocation.endPoint">
            <summary>
            The ending position within the code.
            </summary>
        </member>
        <member name="F:StyleCop.CodeLocation.startPoint">
            <summary>
            The starting position within the code.
            </summary>
        </member>
        <member name="M:StyleCop.CodeLocation.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the CodeLocation struct.
            </summary>
            <param name="index">
            The index of the first character of the item within the file.
            </param>
            <param name="endIndex">
            The index of the last character of the item within the file.
            </param>
            <param name="indexOnLine">
            The index of the first character of the item within the line
            that it appears on.
            </param>
            <param name="endIndexOnLine">
            The index of the last character of the item within the line
            that it appears on.
            </param>
            <param name="lineNumber">
            The line number that this item begins on.
            </param>
            <param name="endLineNumber">
            The line number that this item ends on.
            </param>
        </member>
        <member name="P:StyleCop.CodeLocation.EndPoint">
            <summary>
            Gets the ending point within the code.
            </summary>
        </member>
        <member name="P:StyleCop.CodeLocation.LineNumber">
            <summary>
            Gets the starting line number of this code location.
            </summary>
        </member>
        <member name="P:StyleCop.CodeLocation.LineSpan">
            <summary>
            Gets the number of lines spanned by the start and end points.
            </summary>
            <remarks>The line span will always be at least one.</remarks>
        </member>
        <member name="P:StyleCop.CodeLocation.StartPoint">
            <summary>
            Gets the starting point within the code.
            </summary>
        </member>
        <member name="M:StyleCop.CodeLocation.Join(System.Nullable{StyleCop.CodeLocation},System.Nullable{StyleCop.CodeLocation})">
            <summary>
            Joins the two given locations.
            </summary>
            <param name="location1">
            The first location to join.
            </param>
            <param name="location2">
            The second location to join.
            </param>
            <returns>
            Returns the joined <see cref="T:StyleCop.CodeLocation"/>.
            </returns>
        </member>
        <member name="M:StyleCop.CodeLocation.Join(StyleCop.CodeLocation,System.Nullable{StyleCop.CodeLocation})">
            <summary>
            Joins the two given locations.
            </summary>
            <param name="location1">
            The first location to join.
            </param>
            <param name="location2">
            The second location to join.
            </param>
            <returns>
            Returns the joined <see cref="T:StyleCop.CodeLocation"/>.
            </returns>
        </member>
        <member name="M:StyleCop.CodeLocation.Join(StyleCop.CodeLocation,StyleCop.CodeLocation)">
            <summary>
            Joins the two given locations.
            </summary>
            <param name="location1">
            The first location to join.
            </param>
            <param name="location2">
            The second location to join.
            </param>
            <returns>
            Returns the joined <see cref="T:StyleCop.CodeLocation"/>.
            </returns>
        </member>
        <member name="T:StyleCop.CodePoint">
            <summary>
            Describes a point within a code file.
            </summary>
            <subcategory>other</subcategory>
        </member>
        <member name="F:StyleCop.CodePoint.index">
            <summary>
            The index of the first character of the item within the document.
            </summary>
        </member>
        <member name="F:StyleCop.CodePoint.indexOnLine">
            <summary>
            The index of the first character of the item within the line
            that it appears on.
            </summary>
        </member>
        <member name="F:StyleCop.CodePoint.lineNumber">
            <summary>
            The line number that this item appears on.
            </summary>
        </member>
        <member name="M:StyleCop.CodePoint.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the CodePoint struct.
            </summary>
            <param name="index">The index of the first character of the item within the document.</param>
            <param name="indexOnLine">The index of the last character of the item within the line
            that it appears on.</param>
            <param name="lineNumber">The line number that the item appears on. Must be greater than zero.</param>
        </member>
        <member name="P:StyleCop.CodePoint.Index">
            <summary>
            Gets the index of the first character of the item within the document.
            </summary>
        </member>
        <member name="P:StyleCop.CodePoint.IndexOnLine">
            <summary>
            Gets the index of the first character of the item within the line
            that it appears on.
            </summary>
        </member>
        <member name="P:StyleCop.CodePoint.LineNumber">
            <summary>
            Gets the line number that this item appears on. Minimum is 1.
            </summary>
        </member>
        <member name="M:StyleCop.CodePoint.Join(StyleCop.CodePoint,StyleCop.CodePoint)">
            <summary>
            Joins the two given points.
            </summary>
            <param name="point1">The first point to join.</param>
            <param name="point2">The second point to join.</param>
            <returns>Returns the joined <see cref="T:StyleCop.CodePoint"/>.</returns>
        </member>
        <member name="T:StyleCop.CodeReader">
            <summary>
            Reads code from a text reader.
            </summary>
        </member>
        <member name="F:StyleCop.CodeReader.CharacterBlockSize">
            <summary>
            The number of characters to read at a time from the text reader.
            </summary>
        </member>
        <member name="F:StyleCop.CodeReader.code">
            <summary>
            Contains the code to read.
            </summary>
        </member>
        <member name="F:StyleCop.CodeReader.bufferLength">
            <summary>
            The number of characters in the buffer.
            </summary>
        </member>
        <member name="F:StyleCop.CodeReader.charBuffer">
            <summary>
            Cached characters read from the text reader.
            </summary>
        </member>
        <member name="F:StyleCop.CodeReader.position">
            <summary>
            The position of the next unread character in the character buffer.
            </summary>
        </member>
        <member name="M:StyleCop.CodeReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the CodeReader class.
            </summary>
            <param name="code">
            Contains the code to read.
            </param>
        </member>
        <member name="M:StyleCop.CodeReader.Peek">
            <summary>
            Gets the next character from the code without advancing the internal pointer.
            </summary>
            <returns>Returns the next character from the code or char.MinValue if there are no more characters to read.</returns>
        </member>
        <member name="M:StyleCop.CodeReader.Peek(System.Int32)">
            <summary>
            Gets the next character from the code without advancing the internal pointer.
            </summary>
            <param name="index">
            The index of the character to retrieve, advanced from the current index.
            </param>
            <returns>
            Returns the next character from the code or char.MinValue if there are no more characters to read.
            </returns>
        </member>
        <member name="M:StyleCop.CodeReader.PeekNonWhitespace(System.Int32)">
            <summary>
            Gets the next non-whitespace character from the code without advancing the internal pointer.
            </summary>
            <param name="index">
            The index of the character to retrieve, advanced from the current index.
            </param>
            <returns>
            Returns the next non-whitespace character from the code or <see cref="F:System.Char.MinValue"/> if there are no more 
            non-whitespace characters to read.
            </returns>
        </member>
        <member name="M:StyleCop.CodeReader.ReadNext">
            <summary>
            Reads the next character from the code and advances the internal index.
            </summary>
            <returns>Returns the next character from the code or char.MinValue if there are no more characters to read.</returns>
        </member>
        <member name="M:StyleCop.CodeReader.ReadNext(System.Int32)">
            <summary>
            Reads the given number of characters from the code and advances the internal index.
            </summary>
            <param name="count">
            The number of characters to read.
            </param>
            <returns>
            Returns the characters or null if all of the characters could not be read.
            </returns>
        </member>
        <member name="M:StyleCop.CodeReader.ReadString(System.Int32)">
            <summary>
            Reads the given number of characters from the code as a string and advances the internal index.
            </summary>
            <param name="count">
            The number of characters to read.
            </param>
            <returns>
            Returns the string or null if all of the characters could not be read.
            </returns>
        </member>
        <member name="M:StyleCop.CodeReader.LoadBuffer(System.Int32)">
            <summary>
            Loads the internal character buffer with the requested number of characters.
            </summary>
            <param name="count">
            The number of characters to load.
            </param>
            <returns>
            Returns true if the characters were loaded, or false if the end 
            of the character source was reached before all the characters were loaded.
            </returns>
        </member>
        <member name="T:StyleCop.INodeList`1">
            <summary>
            Implemented by lists of <see cref="T:StyleCop.Node`1"/> items.
            </summary>
            <typeparam name="T">
            The type of item stored in the list.
            </typeparam>
        </member>
        <member name="P:StyleCop.INodeList`1.First">
            <summary>
            Gets the first item in the list.
            </summary>
        </member>
        <member name="P:StyleCop.INodeList`1.Last">
            <summary>
            Gets the last item in the list.
            </summary>
        </member>
        <member name="M:StyleCop.INodeList`1.ForwardIterator">
            <summary>
            Gets an iterator for enumerating forward through the items in the list.
            </summary>
            <returns>Returns the enumerable object.</returns>
        </member>
        <member name="M:StyleCop.INodeList`1.ForwardIterator(StyleCop.Node{`0})">
            <summary>
            Gets an iterator for enumerating forward through the items in the list.
            </summary>
            <param name="start">
            The start position of the iterator.
            </param>
            <returns>
            Returns the enumerable object.
            </returns>
        </member>
        <member name="M:StyleCop.INodeList`1.ForwardNodeIterator">
            <summary>
            Gets an iterator for enumerating forward through the nodes in the list.
            </summary>
            <returns>Returns the enumerable object.</returns>
        </member>
        <member name="M:StyleCop.INodeList`1.ForwardNodeIterator(StyleCop.Node{`0})">
            <summary>
            Gets an iterator for enumerating forward through the nodes in the list.
            </summary>
            <param name="start">
            The start position of the iterator.
            </param>
            <returns>
            Returns the enumerable object.
            </returns>
        </member>
        <member name="M:StyleCop.INodeList`1.OutOfBounds(StyleCop.Node{`0})">
            <summary>
            Determines whether the given node is beyond the bounds of the list.
            </summary>
            <param name="node">
            The node to check.
            </param>
            <returns>
            Returns true if the node is beyond the bounds of the list.
            </returns>
        </member>
        <member name="M:StyleCop.INodeList`1.ReverseIterator">
            <summary>
            Gets an iterator for enumerating backwards through the items in the list.
            </summary>
            <returns>Returns the enumerable object.</returns>
        </member>
        <member name="M:StyleCop.INodeList`1.ReverseIterator(StyleCop.Node{`0})">
            <summary>
            Gets an iterator for enumerating backwards through the items in the list.
            </summary>
            <param name="start">
            The start position of the iterator.
            </param>
            <returns>
            Returns the enumerable object.
            </returns>
        </member>
        <member name="M:StyleCop.INodeList`1.ReverseNodeIterator">
            <summary>
            Gets an iterator for enumerating backwards through the nodes in the list.
            </summary>
            <returns>Returns the enumerable object.</returns>
        </member>
        <member name="M:StyleCop.INodeList`1.ReverseNodeIterator(StyleCop.Node{`0})">
            <summary>
            Gets an iterator for enumerating backwards through the nodes in the list.
            </summary>
            <param name="start">
            The start position of the iterator.
            </param>
            <returns>
            Returns the enumerable object.
            </returns>
        </member>
        <member name="T:StyleCop.ItemList`1">
            <summary>
            A list of items that points into a <see cref="P:StyleCop.ItemList`1.MasterList"/>.
            </summary>
            <typeparam name="T">
            The type of item stored in the list.
            </typeparam>
        </member>
        <member name="F:StyleCop.ItemList`1.masterList">
            <summary>
            The master list that this list points into.
            </summary>
        </member>
        <member name="F:StyleCop.ItemList`1.firstItem">
            <summary>
            The first item in the master list.
            </summary>
        </member>
        <member name="F:StyleCop.ItemList`1.lastItem">
            <summary>
            The last item in the master list.
            </summary>
        </member>
        <member name="M:StyleCop.ItemList`1.#ctor(StyleCop.MasterList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:StyleCop.ItemList`1"/> class. 
            Initializes a new instance of the ItemList class.
            </summary>
            <param name="masterList">
            The master list that this list points into.
            </param>
        </member>
        <member name="M:StyleCop.ItemList`1.#ctor(StyleCop.MasterList{`0},StyleCop.Node{`0},StyleCop.Node{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:StyleCop.ItemList`1"/> class. 
            Initializes a new instance of the ItemList class.
            </summary>
            <param name="masterList">
            The master list that this list points into.
            </param>
            <param name="firstItem">
            The first item in the master list.
            </param>
            <param name="lastItem">
            The last item in the master list.
            </param>
        </member>
        <member name="P:StyleCop.ItemList`1.First">
            <summary>
            Gets or sets the first item in the list.
            </summary>
        </member>
        <member name="P:StyleCop.ItemList`1.Last">
            <summary>
            Gets or sets the last item in the list.
            </summary>
        </member>
        <member name="P:StyleCop.ItemList`1.MasterList">
            <summary>
            Gets the master list that contains this list.
            </summary>
        </member>
        <member name="M:StyleCop.ItemList`1.Clone">
            <summary>
            Creates a copy of this list.
            </summary>
            <returns>Returns the copy.</returns>
        </member>
        <member name="M:StyleCop.ItemList`1.ForwardIterator">
            <summary>
            Gets an iterator for enumerating forward through the items in the list.
            </summary>
            <returns>Returns the enumerable object.</returns>
        </member>
        <member name="M:StyleCop.ItemList`1.ForwardIterator(StyleCop.Node{`0})">
            <summary>
            Gets an iterator for enumerating forward through the items in the list.
            </summary>
            <param name="start">
            The start position of the iterator.
            </param>
            <returns>
            Returns the enumerable object.
            </returns>
        </member>
        <member name="M:StyleCop.ItemList`1.ForwardNodeIterator">
            <summary>
            Gets an iterator for enumerating forward through the nodes in the list.
            </summary>
            <returns>Returns the enumerable object.</returns>
        </member>
        <member name="M:StyleCop.ItemList`1.ForwardNodeIterator(StyleCop.Node{`0})">
            <summary>
            Gets an iterator for enumerating forward through the nodes in the list.
            </summary>
            <param name="start">
            The start position of the iterator.
            </param>
            <returns>
            Returns the enumerable object.
            </returns>
        </member>
        <member name="M:StyleCop.ItemList`1.GetEnumerator">
            <summary>
            Gets an enumerator for walking through the items in the list.
            </summary>
            <returns>Returns the enumerator.</returns>
        </member>
        <member name="M:StyleCop.ItemList`1.OutOfBounds(StyleCop.Node{`0})">
            <summary>
            Determines whether the given node is beyond the bounds of the list.
            </summary>
            <param name="node">
            The node to check.
            </param>
            <returns>
            Returns true if the node is beyond the bounds of the list.
            </returns>
            <remarks>
            This method only checks the nodes one step beyond the bounds of the list.
            If the node is more than one step beyond the bounds of the list, this method
            will still return true.
            </remarks>
        </member>
        <member name="M:StyleCop.ItemList`1.ReverseIterator">
            <summary>
            Gets an iterator for enumerating backwards through the items in the list.
            </summary>
            <returns>Returns the enumerable object.</returns>
        </member>
        <member name="M:StyleCop.ItemList`1.ReverseIterator(StyleCop.Node{`0})">
            <summary>
            Gets an iterator for enumerating backwards through the items in the list.
            </summary>
            <param name="start">
            The start position of the iterator.
            </param>
            <returns>
            Returns the enumerable object.
            </returns>
        </member>
        <member name="M:StyleCop.ItemList`1.ReverseNodeIterator">
            <summary>
            Gets an iterator for enumerating backwards through the nodes in the list.
            </summary>
            <returns>Returns the enumerable object.</returns>
        </member>
        <member name="M:StyleCop.ItemList`1.ReverseNodeIterator(StyleCop.Node{`0})">
            <summary>
            Gets an iterator for enumerating backwards through the nodes in the list.
            </summary>
            <param name="start">
            The start position of the iterator.
            </param>
            <returns>
            Returns the enumerable object.
            </returns>
        </member>
        <member name="M:StyleCop.ItemList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for walking through the items in the list.
            </summary>
            <returns>Returns the enumerator.</returns>
        </member>
        <member name="M:StyleCop.ItemList`1.IsAfterLast(StyleCop.Node{`0})">
            <summary>
            Determines whether the given node comes after the last node in this list.
            </summary>
            <param name="node">
            The node to check.
            </param>
            <returns>
            Returns true if the given node comes after the last node in this list.
            </returns>
        </member>
        <member name="M:StyleCop.ItemList`1.IsBeforeFirst(StyleCop.Node{`0})">
            <summary>
            Determines whether the given node comes before the first node in this list.
            </summary>
            <param name="node">
            The node to check.
            </param>
            <returns>
            Returns true if the given node comes before the first node in this list.
            </returns>
        </member>
        <member name="T:StyleCop.LinkedItemList`1">
            <summary>
            A doubly-linked list.
            </summary>
            <typeparam name="T">
            The type of item stored in the list.
            </typeparam>
        </member>
        <member name="F:StyleCop.LinkedItemList`1.count">
            <summary>
            The number of items in the list.
            </summary>
        </member>
        <member name="F:StyleCop.LinkedItemList`1.head">
            <summary>
            The first node in the list.
            </summary>
        </member>
        <member name="F:StyleCop.LinkedItemList`1.tail">
            <summary>
            The last node in the list.
            </summary>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StyleCop.LinkedItemList`1"/> class. 
            Initializes a new instance of the LinkedItemList class.
            </summary>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:StyleCop.LinkedItemList`1"/> class. 
            Initializes a new instance of the LinkedItemList class.
            </summary>
            <param name="items">
            The initial items for the list.
            </param>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.#ctor(System.Collections.Generic.ICollection{StyleCop.Node{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:StyleCop.LinkedItemList`1"/> class. 
            Initializes a new instance of the LinkedItemList class.
            </summary>
            <param name="nodes">
            The initial nodes for the list.
            </param>
        </member>
        <member name="E:StyleCop.LinkedItemList`1.NodeIndexesReset">
            <summary>
            Event that is fired when the node indexes are reset.
            </summary>
        </member>
        <member name="P:StyleCop.LinkedItemList`1.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:StyleCop.LinkedItemList`1.First">
            <summary>
            Gets the first item in the list.
            </summary>
        </member>
        <member name="P:StyleCop.LinkedItemList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:StyleCop.LinkedItemList`1.Last">
            <summary>
            Gets the last item in the list.
            </summary>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.Add(`0)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">
            The item to add to the collection.
            </param>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.Add(StyleCop.Node{`0})">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="node">
            The node to add to the collection.
            </param>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the range of items to the collection.
            </summary>
            <param name="items">
            The range of items to add.
            </param>
            <returns>
            Returns the added nodes.
            </returns>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.AddRange(System.Collections.Generic.IEnumerable{StyleCop.Node{`0}})">
            <summary>
            Adds the range of items to the collection.
            </summary>
            <param name="nodes">
            The range of nodes to add.
            </param>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.Clear">
            <summary>
            Clears the contents of the list.
            </summary>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.Contains(`0)">
            <summary>
            Determines whether the given item is contained within the list.
            </summary>
            <param name="item">
            The item to search for.
            </param>
            <returns>
            Returns true if the item is contained within the list.
            </returns>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.Contains(StyleCop.Node{`0})">
            <summary>
            Determines whether the given item is contained within the list.
            </summary>
            <param name="node">
            The node to search for.
            </param>
            <returns>
            Returns true if the node is contained within the list.
            </returns>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire collection to the given array, starting at the specified index of the target array.
            </summary>
            <param name="array">
            The array that is the destination of the nodes copied from the collection.
            </param>
            <param name="arrayIndex">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.ForwardIterator">
            <summary>
            Gets an iterator for enumerating forward through the items in the list.
            </summary>
            <returns>Returns the enumerable object.</returns>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.ForwardIterator(StyleCop.Node{`0})">
            <summary>
            Gets an iterator for enumerating forward through the items in the list.
            </summary>
            <param name="start">
            The start position of the iterator.
            </param>
            <returns>
            Returns the enumerable object.
            </returns>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.ForwardNodeIterator">
            <summary>
            Gets an iterator for enumerating forward through the nodes in the list.
            </summary>
            <returns>Returns the enumerable object.</returns>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.ForwardNodeIterator(StyleCop.Node{`0})">
            <summary>
            Gets an iterator for enumerating forward through the nodes in the list.
            </summary>
            <param name="start">
            The start position of the iterator.
            </param>
            <returns>
            Returns the enumerable object.
            </returns>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the nodes in the collection.
            </summary>
            <returns>Returns an enumerator that iterates through the nodes in the collection.</returns>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.InsertAfter(`0,StyleCop.Node{`0})">
            <summary>
            Inserts a item into the list after the given item.
            </summary>
            <param name="item">
            The item to insert.
            </param>
            <param name="nodeToInsertAfter">
            The node to insert the item after.
            </param>
            <returns>
            Returns the new node.
            </returns>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.InsertBefore(`0,StyleCop.Node{`0})">
            <summary>
            Inserts a node into the list before the given item.
            </summary>
            <param name="item">
            The item to insert.
            </param>
            <param name="nodeToInsertBefore">
            The node to insert the item before.
            </param>
            <returns>
            Returns the new node.
            </returns>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.InsertFirst(`0)">
            <summary>
            Inserts the specified item at the beginning of the list.
            </summary>
            <param name="item">
            The item to insert.
            </param>
            <returns>
            Returns the new node.
            </returns>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.InsertLast(`0)">
            <summary>
            Inserts the specified item at the end of the list.
            </summary>
            <param name="item">
            The item to insert.
            </param>
            <returns>
            Returns the new node.
            </returns>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.Remove(`0)">
            <summary>
            Removes the given item from the list.
            </summary>
            <param name="item">
            The item to remove from the list.
            </param>
            <returns>
            Return true if the item was removed from the list.
            </returns>
            <remarks>
            This method is inefficient as it must iterate the list to find the node to remove.
            </remarks>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.Remove(StyleCop.Node{`0})">
            <summary>
            Removes the given node from the list.
            </summary>
            <param name="node">
            The node to remove from the list.
            </param>
            <returns>
            Return true if the node was removed from the list.
            </returns>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.RemoveRange(StyleCop.Node{`0},StyleCop.Node{`0})">
            <summary>
            Removes the given range of nodes from the list.
            </summary>
            <param name="start">
            The first node to remove.
            </param>
            <param name="end">
            The last node to remove.
            </param>
            <remarks>
            This method assumes that both the start node and the end node are nodes in this list,
            and that the start node appears before the end node in the list. These assumptions are not
            verified, so use this method with care.
            </remarks>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.Replace(StyleCop.Node{`0},`0)">
            <summary>
            Removes the given node from the list and replaces it with a different node.
            </summary>
            <param name="node">
            The node to remove.
            </param>
            <param name="newItem">
            The replacement item.
            </param>
            <returns>
            Returns the new node for the replacement item.
            </returns>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.Replace(StyleCop.Node{`0},StyleCop.Node{`0})">
            <summary>
            Removes the given node from the list and replaces it with a different node.
            </summary>
            <param name="node">
            The node to remove.
            </param>
            <param name="newNode">
            The replacement node.
            </param>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.ReverseIterator">
            <summary>
            Gets an iterator for enumerating backwards through the items in the list.
            </summary>
            <returns>Returns the enumerable object.</returns>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.ReverseIterator(StyleCop.Node{`0})">
            <summary>
            Gets an iterator for enumerating backwards through the items in the list.
            </summary>
            <param name="start">
            The start position of the iterator.
            </param>
            <returns>
            Returns the enumerable object.
            </returns>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.ReverseNodeIterator">
            <summary>
            Gets an iterator for enumerating backwards through the nodes in the list.
            </summary>
            <returns>Returns the enumerable object.</returns>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.ReverseNodeIterator(StyleCop.Node{`0})">
            <summary>
            Gets an iterator for enumerating backwards through the nodes in the list.
            </summary>
            <param name="start">
            The start position of the iterator.
            </param>
            <returns>
            Returns the enumerable object.
            </returns>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the nodes in the collection.
            </summary>
            <returns>Returns an enumerator that iterates through the nodes in the collection.</returns>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.OnNodeIndexesReset(System.EventArgs)">
            <summary>
            Called when the node indexes are reset.
            </summary>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.InsertAfter(StyleCop.Node{`0},StyleCop.Node{`0})">
            <summary>
            Inserts a item into the list after the given item.
            </summary>
            <param name="node">
            The node to insert.
            </param>
            <param name="nodeToInsertAfter">
            The node to insert the item after.
            </param>
            <returns>
            Returns the new node.
            </returns>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.InsertBefore(StyleCop.Node{`0},StyleCop.Node{`0})">
            <summary>
            Inserts a node into the list before the given item.
            </summary>
            <param name="node">
            The node to insert.
            </param>
            <param name="nodeToInsertBefore">
            The node to insert the item before.
            </param>
            <returns>
            Returns the new node.
            </returns>
        </member>
        <member name="M:StyleCop.LinkedItemList`1.ResetNodeIndexes">
            <summary>
            Resets the indexes of all nodes in the list.
            </summary>
        </member>
        <member name="T:StyleCop.LinkedItemListEnumerators`1">
            <summary>
            A set of enumerators for iterating through lists based on the <see cref="T:StyleCop.LinkedItemList`1"/> class.
            </summary>
            <typeparam name="T">
            The type of item stored in the list.
            </typeparam>
        </member>
        <member name="T:StyleCop.LinkedItemListEnumerators`1.BackwardNodeEnumerable">
            <summary>
            Provides an enumerator for iterating backwards through the list.
            </summary>
        </member>
        <member name="F:StyleCop.LinkedItemListEnumerators`1.BackwardNodeEnumerable.endItem">
            <summary>
            The last item in the master list.
            </summary>
        </member>
        <member name="F:StyleCop.LinkedItemListEnumerators`1.BackwardNodeEnumerable.startItem">
            <summary>
            The first item in the master list.
            </summary>
        </member>
        <member name="M:StyleCop.LinkedItemListEnumerators`1.BackwardNodeEnumerable.#ctor(StyleCop.Node{`0},StyleCop.Node{`0})">
            <summary>
            Initializes a new instance of the BackwardNodeEnumerable class.
            </summary>
            <param name="startItem">
            The first item in the master list.
            </param>
            <param name="endItem">
            The last item in the master list.
            </param>
        </member>
        <member name="M:StyleCop.LinkedItemListEnumerators`1.BackwardNodeEnumerable.GetEnumerator">
            <summary>
            Gets an enumerator for iterating through the list.
            </summary>
            <returns>Returns the enumerator.</returns>
        </member>
        <member name="M:StyleCop.LinkedItemListEnumerators`1.BackwardNodeEnumerable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for iterating through the list.
            </summary>
            <returns>Returns the enumerator.</returns>
        </member>
        <member name="T:StyleCop.LinkedItemListEnumerators`1.BackwardNodeEnumerator">
            <summary>
            Enumerates backwards through the nodes in the collection.
            </summary>
        </member>
        <member name="F:StyleCop.LinkedItemListEnumerators`1.BackwardNodeEnumerator.endItem">
            <summary>
            The last item in the master list.
            </summary>
        </member>
        <member name="F:StyleCop.LinkedItemListEnumerators`1.BackwardNodeEnumerator.startItem">
            <summary>
            The first item in the master list.
            </summary>
        </member>
        <member name="F:StyleCop.LinkedItemListEnumerators`1.BackwardNodeEnumerator.currentItem">
            <summary>
            The current item in the collection.
            </summary>
        </member>
        <member name="M:StyleCop.LinkedItemListEnumerators`1.BackwardNodeEnumerator.#ctor(StyleCop.Node{`0},StyleCop.Node{`0})">
            <summary>
            Initializes a new instance of the BackwardNodeEnumerator class.
            </summary>
            <param name="startItem">
            The first item in the master list.
            </param>
            <param name="endItem">
            The last item in the master list.
            </param>
        </member>
        <member name="P:StyleCop.LinkedItemListEnumerators`1.BackwardNodeEnumerator.Current">
            <summary>
            Gets the current item.
            </summary>
        </member>
        <member name="P:StyleCop.LinkedItemListEnumerators`1.BackwardNodeEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current item.
            </summary>
        </member>
        <member name="M:StyleCop.LinkedItemListEnumerators`1.BackwardNodeEnumerator.Dispose">
            <summary>
            Disposes the contents of the class.
            </summary>
        </member>
        <member name="M:StyleCop.LinkedItemListEnumerators`1.BackwardNodeEnumerator.MoveNext">
            <summary>
            Moves to the next item in the collection.
            </summary>
            <returns>Returns false if there are no more items in the collection.</returns>
        </member>
        <member name="M:StyleCop.LinkedItemListEnumerators`1.BackwardNodeEnumerator.Reset">
            <summary>
            Resets the enumerator back to the beginning of the collection.
            </summary>
        </member>
        <member name="T:StyleCop.LinkedItemListEnumerators`1.BackwardValueEnumerable">
            <summary>
            Provides an enumerator for iterating backwards through the items in the list.
            </summary>
        </member>
        <member name="F:StyleCop.LinkedItemListEnumerators`1.BackwardValueEnumerable.endItem">
            <summary>
            The last item in the master list.
            </summary>
        </member>
        <member name="F:StyleCop.LinkedItemListEnumerators`1.BackwardValueEnumerable.startItem">
            <summary>
            The first item in the master list.
            </summary>
        </member>
        <member name="M:StyleCop.LinkedItemListEnumerators`1.BackwardValueEnumerable.#ctor(StyleCop.Node{`0},StyleCop.Node{`0})">
            <summary>
            Initializes a new instance of the BackwardValueEnumerable class.
            </summary>
            <param name="startItem">
            The first item in the master list.
            </param>
            <param name="endItem">
            The last item in the master list.
            </param>
        </member>
        <member name="M:StyleCop.LinkedItemListEnumerators`1.BackwardValueEnumerable.GetEnumerator">
            <summary>
            Gets an enumerator for iterating through the list.
            </summary>
            <returns>Returns the enumerator.</returns>
        </member>
        <member name="M:StyleCop.LinkedItemListEnumerators`1.BackwardValueEnumerable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for iterating through the list.
            </summary>
            <returns>Returns the enumerator.</returns>
        </member>
        <member name="T:StyleCop.LinkedItemListEnumerators`1.BackwardValueEnumerator">
            <summary>
            Enumerates backwards through the items in the collection.
            </summary>
        </member>
        <member name="F:StyleCop.LinkedItemListEnumerators`1.BackwardValueEnumerator.endItem">
            <summary>
            The last item in the master list.
            </summary>
        </member>
        <member name="F:StyleCop.LinkedItemListEnumerators`1.BackwardValueEnumerator.startItem">
            <summary>
            The first item in the master list.
            </summary>
        </member>
        <member name="F:StyleCop.LinkedItemListEnumerators`1.BackwardValueEnumerator.currentItem">
            <summary>
            The current item in the collection.
            </summary>
        </member>
        <member name="M:StyleCop.LinkedItemListEnumerators`1.BackwardValueEnumerator.#ctor(StyleCop.Node{`0},StyleCop.Node{`0})">
            <summary>
            Initializes a new instance of the BackwardValueEnumerator class.
            </summary>
            <param name="startItem">
            The first item in the master list.
            </param>
            <param name="endItem">
            The last item in the master list.
            </param>
        </member>
        <member name="P:StyleCop.LinkedItemListEnumerators`1.BackwardValueEnumerator.Current">
            <summary>
            Gets the current item.
            </summary>
        </member>
        <member name="P:StyleCop.LinkedItemListEnumerators`1.BackwardValueEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current item.
            </summary>
        </member>
        <member name="M:StyleCop.LinkedItemListEnumerators`1.BackwardValueEnumerator.Dispose">
            <summary>
            Disposes the contents of the class.
            </summary>
        </member>
        <member name="M:StyleCop.LinkedItemListEnumerators`1.BackwardValueEnumerator.MoveNext">
            <summary>
            Moves to the next item in the collection.
            </summary>
            <returns>Returns false if there are no more items in the collection.</returns>
        </member>
        <member name="M:StyleCop.LinkedItemListEnumerators`1.BackwardValueEnumerator.Reset">
            <summary>
            Resets the enumerator back to the beginning of the collection.
            </summary>
        </member>
        <member name="T:StyleCop.LinkedItemListEnumerators`1.ForwardNodeEnumerable">
            <summary>
            Provides an enumerator for iterating forward through the nodes in the list.
            </summary>
        </member>
        <member name="F:StyleCop.LinkedItemListEnumerators`1.ForwardNodeEnumerable.endItem">
            <summary>
            The last item in the master list.
            </summary>
        </member>
        <member name="F:StyleCop.LinkedItemListEnumerators`1.ForwardNodeEnumerable.startItem">
            <summary>
            The first item in the master list.
            </summary>
        </member>
        <member name="M:StyleCop.LinkedItemListEnumerators`1.ForwardNodeEnumerable.#ctor(StyleCop.Node{`0},StyleCop.Node{`0})">
            <summary>
            Initializes a new instance of the ForwardNodeEnumerable class.
            </summary>
            <param name="startItem">
            The first item in the master list.
            </param>
            <param name="endItem">
            The last item in the master list.
            </param>
        </member>
        <member name="M:StyleCop.LinkedItemListEnumerators`1.ForwardNodeEnumerable.GetEnumerator">
            <summary>
            Gets an enumerator for iterating through the list.
            </summary>
            <returns>Returns the enumerator.</returns>
        </member>
        <member name="M:StyleCop.LinkedItemListEnumerators`1.ForwardNodeEnumerable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for iterating through the list.
            </summary>
            <returns>Returns the enumerator.</returns>
        </member>
        <member name="T:StyleCop.LinkedItemListEnumerators`1.ForwardNodeEnumerator">
            <summary>
            Enumerates forwards through the nodes in the collection.
            </summary>
        </member>
        <member name="F:StyleCop.LinkedItemListEnumerators`1.ForwardNodeEnumerator.endItem">
            <summary>
            The last item in the master list.
            </summary>
        </member>
        <member name="F:StyleCop.LinkedItemListEnumerators`1.ForwardNodeEnumerator.startItem">
            <summary>
            The first item in the master list.
            </summary>
        </member>
        <member name="F:StyleCop.LinkedItemListEnumerators`1.ForwardNodeEnumerator.currentItem">
            <summary>
            The current item in the collection.
            </summary>
        </member>
        <member name="M:StyleCop.LinkedItemListEnumerators`1.ForwardNodeEnumerator.#ctor(StyleCop.Node{`0},StyleCop.Node{`0})">
            <summary>
            Initializes a new instance of the ForwardNodeEnumerator class.
            </summary>
            <param name="startItem">
            The first item in the master list.
            </param>
            <param name="endItem">
            The last item in the master list.
            </param>
        </member>
        <member name="P:StyleCop.LinkedItemListEnumerators`1.ForwardNodeEnumerator.Current">
            <summary>
            Gets the current item.
            </summary>
        </member>
        <member name="P:StyleCop.LinkedItemListEnumerators`1.ForwardNodeEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current item.
            </summary>
        </member>
        <member name="M:StyleCop.LinkedItemListEnumerators`1.ForwardNodeEnumerator.Dispose">
            <summary>
            Disposes the contents of the class.
            </summary>
        </member>
        <member name="M:StyleCop.LinkedItemListEnumerators`1.ForwardNodeEnumerator.MoveNext">
            <summary>
            Moves to the next item in the collection.
            </summary>
            <returns>Returns false if there are no more items in the collection.</returns>
        </member>
        <member name="M:StyleCop.LinkedItemListEnumerators`1.ForwardNodeEnumerator.Reset">
            <summary>
            Resets the enumerator back to the beginning of the collection.
            </summary>
        </member>
        <member name="T:StyleCop.LinkedItemListEnumerators`1.ForwardValueEnumerable">
            <summary>
            Provides an enumerator for iterating forward through the items in the list.
            </summary>
        </member>
        <member name="F:StyleCop.LinkedItemListEnumerators`1.ForwardValueEnumerable.endItem">
            <summary>
            The last item in the master list.
            </summary>
        </member>
        <member name="F:StyleCop.LinkedItemListEnumerators`1.ForwardValueEnumerable.startItem">
            <summary>
            The first item in the master list.
            </summary>
        </member>
        <member name="M:StyleCop.LinkedItemListEnumerators`1.ForwardValueEnumerable.#ctor(StyleCop.Node{`0},StyleCop.Node{`0})">
            <summary>
            Initializes a new instance of the ForwardValueEnumerable class.
            </summary>
            <param name="startItem">
            The first item in the master list.
            </param>
            <param name="endItem">
            The last item in the master list.
            </param>
        </member>
        <member name="M:StyleCop.LinkedItemListEnumerators`1.ForwardValueEnumerable.GetEnumerator">
            <summary>
            Gets an enumerator for iterating through the list.
            </summary>
            <returns>Returns the enumerator.</returns>
        </member>
        <member name="M:StyleCop.LinkedItemListEnumerators`1.ForwardValueEnumerable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for iterating through the list.
            </summary>
            <returns>Returns the enumerator.</returns>
        </member>
        <member name="T:StyleCop.LinkedItemListEnumerators`1.ForwardValueEnumerator">
            <summary>
            Enumerates forwards through the items in the collection.
            </summary>
        </member>
        <member name="F:StyleCop.LinkedItemListEnumerators`1.ForwardValueEnumerator.endItem">
            <summary>
            The last item in the master list.
            </summary>
        </member>
        <member name="F:StyleCop.LinkedItemListEnumerators`1.ForwardValueEnumerator.startItem">
            <summary>
            The first item in the master list.
            </summary>
        </member>
        <member name="F:StyleCop.LinkedItemListEnumerators`1.ForwardValueEnumerator.currentItem">
            <summary>
            The current item in the collection.
            </summary>
        </member>
        <member name="M:StyleCop.LinkedItemListEnumerators`1.ForwardValueEnumerator.#ctor(StyleCop.Node{`0},StyleCop.Node{`0})">
            <summary>
            Initializes a new instance of the ForwardValueEnumerator class.
            </summary>
            <param name="startItem">
            The first item in the master list.
            </param>
            <param name="endItem">
            The last item in the master list.
            </param>
        </member>
        <member name="P:StyleCop.LinkedItemListEnumerators`1.ForwardValueEnumerator.Current">
            <summary>
            Gets the current item.
            </summary>
        </member>
        <member name="P:StyleCop.LinkedItemListEnumerators`1.ForwardValueEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current item.
            </summary>
        </member>
        <member name="M:StyleCop.LinkedItemListEnumerators`1.ForwardValueEnumerator.Dispose">
            <summary>
            Disposes the contents of the class.
            </summary>
        </member>
        <member name="M:StyleCop.LinkedItemListEnumerators`1.ForwardValueEnumerator.MoveNext">
            <summary>
            Moves to the next item in the collection.
            </summary>
            <returns>Returns false if there are no more items in the collection.</returns>
        </member>
        <member name="M:StyleCop.LinkedItemListEnumerators`1.ForwardValueEnumerator.Reset">
            <summary>
            Resets the enumerator back to the beginning of the collection.
            </summary>
        </member>
        <member name="T:StyleCop.Node`1">
            <summary>
            Interface which is implemented by a node class to be used with the LinkedItemList class.
            </summary>
            <typeparam name="T">
            The type of node stored in the linked list.
            </typeparam>
        </member>
        <member name="F:StyleCop.Node`1.item">
            <summary>
            The current item.
            </summary>
        </member>
        <member name="F:StyleCop.Node`1.containingList">
            <summary>
            The master list that contains this node.
            </summary>
        </member>
        <member name="F:StyleCop.Node`1.index">
            <summary>
            The index of the node in the list in which it is contained.
            </summary>
        </member>
        <member name="F:StyleCop.Node`1.next">
            <summary>
            The next node.
            </summary>
        </member>
        <member name="F:StyleCop.Node`1.previous">
            <summary>
            The previous node.
            </summary>
        </member>
        <member name="M:StyleCop.Node`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:StyleCop.Node`1"/> class. 
            Initializes a new instance of the Node class.
            </summary>
            <param name="item">
            The node item.
            </param>
        </member>
        <member name="P:StyleCop.Node`1.Index">
            <summary>
            Gets the index of the node within the master list that contains it.
            </summary>
            <remarks>The index is not guaranteed to be immutable. Subscribe to the <see cref="E:StyleCop.MasterList`1.NodeIndexesReset"/> event
            to receive a notification when the indexes of nodes within the list are reset.</remarks>
        </member>
        <member name="P:StyleCop.Node`1.Next">
            <summary>
            Gets the next node in the list.
            </summary>
        </member>
        <member name="P:StyleCop.Node`1.Previous">
            <summary>
            Gets the previous node in the list.
            </summary>
        </member>
        <member name="P:StyleCop.Node`1.Value">
            <summary>
            Gets the node.
            </summary>
        </member>
        <member name="P:StyleCop.Node`1.ContainingList">
            <summary>
            Gets or sets the master list that contains this node.
            </summary>
        </member>
        <member name="M:StyleCop.Node`1.NodesInSameList(StyleCop.Node{`0})">
            <summary>
            Determines whether the given node is in the same list as this node.
            </summary>
            <param name="node">
            The other node.
            </param>
            <returns>
            true if the nodes are in the same list; false otherwise.
            </returns>
        </member>
        <member name="M:StyleCop.Node`1.CreateIndex">
            <summary>
            Creates the index for the node.
            </summary>
            <returns>Returns true if the index was created successfully, or false if it not possible
            to create a new index for this node.</returns>
            <remarks>This method should be called after the node is added to a list.</remarks>
        </member>
        <member name="T:StyleCop.NodeIndex">
            <summary>
            Describes the index of a node in the list.
            </summary>
        </member>
        <member name="F:StyleCop.NodeIndex.Spacer">
            <summary>
            The amount of space to leave between each node index.
            </summary>
        </member>
        <member name="F:StyleCop.NodeIndex.bigValue">
            <summary>
            The main part of the index.
            </summary>
        </member>
        <member name="F:StyleCop.NodeIndex.smallValue">
            <summary>
            The small part of the index.
            </summary>
        </member>
        <member name="M:StyleCop.NodeIndex.Compare(StyleCop.NodeIndex,StyleCop.NodeIndex)">
            <summary>
            Compares the two indexes and returns a standard comparison result.
            </summary>
            <param name="index1">
            The first index.
            </param>
            <param name="index2">
            The second index.
            </param>
            <returns>
            Returns a negative value if the first index is less than the second index, a positive
            value if the second index is greater than the first index, or zero if the two indexes are equal.
            </returns>
        </member>
        <member name="M:StyleCop.NodeIndex.op_Equality(StyleCop.NodeIndex,StyleCop.NodeIndex)">
            <summary>
            Determines whether the two indexes are equal.
            </summary>
            <param name="index1">The first index.</param>
            <param name="index2">The second index.</param>
            <returns>Returns true if the indexes are equal.</returns>
        </member>
        <member name="M:StyleCop.NodeIndex.op_GreaterThan(StyleCop.NodeIndex,StyleCop.NodeIndex)">
            <summary>
            Determines whether the first index is greater than the second index.
            </summary>
            <param name="index1">The first index.</param>
            <param name="index2">The second index.</param>
            <returns>Returns true if the first index is greater than the second index.</returns>
        </member>
        <member name="M:StyleCop.NodeIndex.op_GreaterThanOrEqual(StyleCop.NodeIndex,StyleCop.NodeIndex)">
            <summary>
            Determines whether the first index is greater than or equal to the second index.
            </summary>
            <param name="index1">The first index.</param>
            <param name="index2">The second index.</param>
            <returns>Returns true if the first index is greater than or equal to the second index.</returns>
        </member>
        <member name="M:StyleCop.NodeIndex.op_Inequality(StyleCop.NodeIndex,StyleCop.NodeIndex)">
            <summary>
            Determines whether the two indexes are not equal.
            </summary>
            <param name="index1">The first index.</param>
            <param name="index2">The second index.</param>
            <returns>Returns true if the indexes are not equal.</returns>
        </member>
        <member name="M:StyleCop.NodeIndex.op_LessThan(StyleCop.NodeIndex,StyleCop.NodeIndex)">
            <summary>
            Determines whether the first index is less than the second index.
            </summary>
            <param name="index1">The first index.</param>
            <param name="index2">The second index.</param>
            <returns>Returns true if the first index is less than the second index.</returns>
        </member>
        <member name="M:StyleCop.NodeIndex.op_LessThanOrEqual(StyleCop.NodeIndex,StyleCop.NodeIndex)">
            <summary>
            Determines whether the first index is less than or equal to the second index.
            </summary>
            <param name="index1">The first index.</param>
            <param name="index2">The second index.</param>
            <returns>Returns true if the first index is less than or equal to the second index.</returns>
        </member>
        <member name="M:StyleCop.NodeIndex.Equals(System.Object)">
            <summary>
            Determines whether the index is equal to the given object.
            </summary>
            <param name="obj">
            The object to compare with.
            </param>
            <returns>
            Returns true if the object is equal to this index.
            </returns>
        </member>
        <member name="M:StyleCop.NodeIndex.GetHashCode">
            <summary>
            Gets the hash code for the index.
            </summary>
            <returns>Returns the hash code for the index.</returns>
        </member>
        <member name="M:StyleCop.NodeIndex.ToString">
            <summary>
            Gets the index as a string.
            </summary>
            <returns>Returns the index as a string.</returns>
        </member>
        <member name="M:StyleCop.NodeIndex.CreateAfter(StyleCop.NodeIndex,StyleCop.NodeIndex@)">
            <summary>
            Creates an index for a new node being inserted at the beginning of the list.
            </summary>
            <param name="before">
            The index of the previous node.
            </param>
            <param name="index">
            Returns the new index.
            </param>
            <returns>
            Returns true if the new index was created, or false if there are no more indexes.
            </returns>
        </member>
        <member name="M:StyleCop.NodeIndex.CreateBefore(StyleCop.NodeIndex,StyleCop.NodeIndex@)">
            <summary>
            Creates an index for a new node being inserted at the beginning of the list.
            </summary>
            <param name="after">
            The index of the next node.
            </param>
            <param name="index">
            Returns the new index.
            </param>
            <returns>
            Returns true if the new index was created, or false if there are no more indexes.
            </returns>
        </member>
        <member name="M:StyleCop.NodeIndex.CreateBetween(StyleCop.NodeIndex,StyleCop.NodeIndex,StyleCop.NodeIndex@)">
            <summary>
            Creates an index for a new node being inserted into the middle of the list.
            </summary>
            <param name="before">
            The index of the previous node.
            </param>
            <param name="after">
            The index of the next node.
            </param>
            <param name="index">
            Returns the new index.
            </param>
            <returns>
            Returns true if the new index was created, or false if there are no more indexes.
            </returns>
        </member>
        <member name="M:StyleCop.NodeIndex.CreateFirst(StyleCop.NodeIndex@)">
            <summary>
            Creates an index for a new node which is the first node in the list.
            </summary>
            <param name="index">
            Returns the new index.
            </param>
            <returns>
            Returns true if the new index was created, or false if there are no more indexes.
            </returns>
        </member>
        <member name="M:StyleCop.NodeIndex.Set(System.Int32)">
            <summary>
            Sets the index to the given big value.
            </summary>
            <param name="newBigValue">
            The new big value.
            </param>
        </member>
        <member name="M:StyleCop.NodeIndex.Create(System.Int32,System.Int16,System.Int32,System.Int16,StyleCop.NodeIndex@)">
            <summary>
            Creates an index for a new node.
            </summary>
            <param name="previousBigValue">
            The big value of the previous node.
            </param>
            <param name="previousSmallValue">
            The small value of the previous node.
            </param>
            <param name="nextBigValue">
            The big value of the next node.
            </param>
            <param name="nextSmallValue">
            The small value of the next node.
            </param>
            <param name="index">
            Returns the new index.
            </param>
            <returns>
            Returns true if the new index was created, or false if there are no more indexes.
            </returns>
        </member>
        <member name="M:StyleCop.NodeIndex.CreateBigValue(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Creates a new big value between the two given values.
            </summary>
            <param name="previous">
            The previous big value.
            </param>
            <param name="next">
            The next big value.
            </param>
            <param name="bigValue">
            Returns the new big value.
            </param>
            <returns>
            Returns false if it was not possible to create a new big value.
            </returns>
        </member>
        <member name="M:StyleCop.NodeIndex.CreateSmallValue(System.Int16,System.Int16,System.Int16@)">
            <summary>
            Creates a new small value between the two given values.
            </summary>
            <param name="previous">
            The previous small value.
            </param>
            <param name="next">
            The next small value.
            </param>
            <param name="smallValue">
            Returns the new small value.
            </param>
            <returns>
            Returns false if it was not possible to create a new small value.
            </returns>
        </member>
        <member name="T:StyleCop.CacheOptions">
            <summary>
            Options dialog to choose which settings files to use.
            </summary>
        </member>
        <member name="F:StyleCop.CacheOptions.components">
            <summary>
            The components.
            </summary>
        </member>
        <member name="F:StyleCop.CacheOptions.cultureComboBox">
            <summary>
            The culture combo box.
            </summary>
        </member>
        <member name="F:StyleCop.CacheOptions.cultureParentProperty">
            <summary>
            The culture parent property.
            </summary>
        </member>
        <member name="F:StyleCop.CacheOptions.culturePropertyDescriptor">
            <summary>
            The culture property descriptor.
            </summary>
        </member>
        <member name="F:StyleCop.CacheOptions.dirty">
            <summary>
            Indicates whether the page is dirty.
            </summary>
        </member>
        <member name="F:StyleCop.CacheOptions.enableCache">
            <summary>
            Indicates whether to enable writing of the cache.
            </summary>
        </member>
        <member name="F:StyleCop.CacheOptions.label1">
            <summary>
            The page description.
            </summary>
        </member>
        <member name="F:StyleCop.CacheOptions.label2">
            <summary>
            The label 2.
            </summary>
        </member>
        <member name="F:StyleCop.CacheOptions.label3">
            <summary>
            The label 3.
            </summary>
        </member>
        <member name="F:StyleCop.CacheOptions.maxViolationCountMaskedTextBox">
            <summary>
            The max violation count masked text box.
            </summary>
        </member>
        <member name="F:StyleCop.CacheOptions.maxViolationCountParentProperty">
            <summary>
            The max violation count parent property.
            </summary>
        </member>
        <member name="F:StyleCop.CacheOptions.maxViolationCountPropertyDescriptor">
            <summary>
            The max violation count property descriptor.
            </summary>
        </member>
        <member name="F:StyleCop.CacheOptions.tabControl">
            <summary>
            The tab control hosting this page.
            </summary>
        </member>
        <member name="F:StyleCop.CacheOptions.toolTip">
            <summary>
            The tool tip.
            </summary>
        </member>
        <member name="F:StyleCop.CacheOptions.writeCacheParentProperty">
            <summary>
            The global value of the property.
            </summary>
        </member>
        <member name="F:StyleCop.CacheOptions.violationsAsErrorsCheckBox">
            <summary>
            The violations as errors check box.
            </summary>
        </member>
        <member name="F:StyleCop.CacheOptions.violationsAsErrorsPropertyDescriptor">
            <summary>
            The violations as errors property descriptor.
            </summary>
        </member>
        <member name="F:StyleCop.CacheOptions.violationsAsErrorsParentProperty">
            <summary>
            The violations as errors parent property.
            </summary>
        </member>
        <member name="F:StyleCop.CacheOptions.tableLayoutPanel1">
            <summary>
            The table layout panel 1.
            </summary>
        </member>
        <member name="F:StyleCop.CacheOptions.tableLayoutPanel2">
            <summary>
            The table layout panel 2.
            </summary>
        </member>
        <member name="F:StyleCop.CacheOptions.neededToMakeLastRowFill">
            <summary>
            The needed to make last row fill.
            </summary>
        </member>
        <member name="F:StyleCop.CacheOptions.writeCachePropertyDescriptor">
            <summary>
            Property writeCachePropertyDescriptor.
            </summary>
        </member>
        <member name="M:StyleCop.CacheOptions.#ctor">
            <summary>
            Initializes a new instance of the CacheOptions class.
            </summary>
        </member>
        <member name="P:StyleCop.CacheOptions.Dirty">
            <summary>
            Gets or sets a value indicating whether the page is dirty.
            </summary>
        </member>
        <member name="P:StyleCop.CacheOptions.TabName">
            <summary>
            Gets the value to place on the page tab.
            </summary>
        </member>
        <member name="M:StyleCop.CacheOptions.Activate(System.Boolean)">
            <summary>
            Called when the page is activated.
            </summary>
            <param name="activated">
            Indicates whether the page is being activated or deactivated.
            </param>
        </member>
        <member name="M:StyleCop.CacheOptions.Apply">
            <summary>
            Saves the data and clears the dirty flag.
            </summary>
            <returns>Returns true if the data was saved, false if not.</returns>
        </member>
        <member name="M:StyleCop.CacheOptions.Initialize(StyleCop.PropertyControl)">
            <summary>
            Initializes the page.
            </summary>
            <param name="propertyControl">
            The tab control object.
            </param>
        </member>
        <member name="M:StyleCop.CacheOptions.PostApply(System.Boolean)">
            <summary>
            Called after all pages have been applied.
            </summary>
            <param name="wasDirty">
            The dirty state of the page before it was applied.
            </param>
        </member>
        <member name="M:StyleCop.CacheOptions.PreApply">
            <summary>
            Called before all pages are applied.
            </summary>
            <returns>Returns false if no pages should be applied.</returns>
        </member>
        <member name="M:StyleCop.CacheOptions.RefreshSettingsOverrideState">
            <summary>
            Refreshes the merged override state of properties on the page.
            </summary>
        </member>
        <member name="M:StyleCop.CacheOptions.ValidatePage">
            <summary>
            The validate page.
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:StyleCop.CacheOptions.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            Dispose parameter.
            </param>
        </member>
        <member name="M:StyleCop.CacheOptions.EnumSatelliteLanguages(System.String)">
            <summary>
            Gets the satellite languages.
            </summary>
            <param name="baseName">
            The base name.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:StyleCop.CacheOptions.GetSatelliteLanguages(System.String)">
            <summary>
            The get satellite languages.
            </summary>
            <param name="baseName">
            The base name.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="baseName"/> argument was null.
            </exception>
        </member>
        <member name="M:StyleCop.CacheOptions.CultureComboBoxSelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            The culture combo box selected index changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:StyleCop.CacheOptions.EnableCacheCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the checkbox is checked or unchecked.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.CacheOptions.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:StyleCop.CacheOptions.MaxViolationCountMaskedTextBoxKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            The max violation count masked text box key down.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:StyleCop.CacheOptions.MaxViolationCountTextBoxTextChanged(System.Object,System.EventArgs)">
            <summary>
            The max violation count text box text changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:StyleCop.CacheOptions.SetBoldState">
            <summary>
            Sets the bold state of the checkboxes.
            </summary>
        </member>
        <member name="M:StyleCop.CacheOptions.ViolationsAsErrorsCheckBoxCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            The violations as errors check box checked changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="F:StyleCop.Countdown.LockObject">
            <summary>
              The object we lock on.
            </summary>
        </member>
        <member name="F:StyleCop.Countdown.countdownValue">
            <summary>
              The countdown value we use.
            </summary>
        </member>
        <member name="M:StyleCop.Countdown.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:StyleCop.Countdown"/> class with the specified count.
            </summary>
            <param name="initialCount">
            The number of signals initially required to set the <see cref="T:StyleCop.Countdown"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="initialCount"/> is less than 0.
            </exception>
        </member>
        <member name="P:StyleCop.Countdown.CurrentCount">
            <summary>
            Gets the number of remaining signals required to release the countdown.
            </summary>
            <returns>
            The number of remaining signals.
            </returns>
        </member>
        <member name="M:StyleCop.Countdown.AddCount(System.Int32)">
            <summary>
            Increments the Countdown's current count by a specified value.
            </summary>
            <param name="signalCount">
            The value by which to increase <see cref="P:StyleCop.Countdown.CurrentCount"/> . 
            </param>
        </member>
        <member name="M:StyleCop.Countdown.Signal">
            <summary>
              Registers a signal with the <see cref="T:StyleCop.Countdown" /> , decrementing the value of <see cref="P:StyleCop.Countdown.CurrentCount" /> .
            </summary>
        </member>
        <member name="M:StyleCop.Countdown.Signal(System.Int32)">
            <summary>
            Registers multiple signals with the <see cref="T:StyleCop.Countdown"/> , decrementing the value of <see cref="P:StyleCop.Countdown.CurrentCount"/> by the specified amount.
            </summary>
            <param name="signalCount">
            The number of signals to register. 
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="signalCount"/> is less than 1.
            </exception>
        </member>
        <member name="M:StyleCop.Countdown.Wait">
            <summary>
              Blocks the current thread until the <see cref="T:StyleCop.Countdown" /> is set.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
        </member>
        <member name="T:StyleCop.Diagnostics.SensitiveDataAttribute">
            <summary>
            Marks an item as either containing or handing sensitive data which should be obscured
            in trace output.
            </summary>
            <remarks>
            <para>
            This attribute may be applied to parameters or return values of methods to indicate that they
            contain sensitive data and should be obscured in the trace output. Alternatively entire properties,
            methods or constructors may be marked with this attribute and any input or output will be obscured
            from the trace. Note that this attribute only has an effect on the <see cref="M:StyleCop.Diagnostics.StyleCopTrace.In(System.Object[])"/> 
            method which takes a parameter array, and the <see cref="M:StyleCop.Diagnostics.StyleCopTrace.Out``1(``0)"/> methods that take
            a parameter array or return value.
            </para>
            <para>
            Note that in <strong>DEBUG</strong> builds when the <see cref="F:StyleCop.Diagnostics.TraceTypes.SensitiveData"/> trace
            flag is used, the sensitive data can be printed out without being obscured which is useful for
            debugging. This flag is ignored in <strong>RELEASE</strong> builds to ensure that sensitive data
            cannot be traced on production systems.
            </para>
            </remarks>
            <example>
            This example shows the attributes being applied to a parameter and return value of a method and
            then traced using the <see cref="T:StyleCop.Diagnostics.StyleCopTrace"/> class.
            <code>
            [return: SensitiveData]
            public string MyMethod([SensitiveData] string sensitiveVal, string publicVal)
            {
                StyleCopTrace.In(sensitiveVal, publicVal)
                // ...
                return StyleCopTrace.Out(otherSensitiveVal);
            }
            </code>
            The trace output from this will be as follows when the data is obscured:
            <code>
            ... In  : MyNamespace.MyClass.MyMethod("&lt;******&gt;", "PublicValueText")
            ... Out : MyNamespace.MyClass.MyMethod()="&lt;******&gt;"
            </code>
            </example>
        </member>
        <member name="T:StyleCop.Diagnostics.StyleCopSwitch">
            <summary>
            A custom <see cref="T:System.Diagnostics.TraceSwitch"/> class allowing more trace levels than the default switch.
            </summary>
            <remarks>
            This is a replacement for the default <see cref="T:System.Diagnostics.TraceSwitch"/> class. This class publishes the <see cref="P:StyleCop.Diagnostics.StyleCopSwitch.Level"/> as 
            an <see cref="T:System.Int32"/> rather than as an <see cref="T:System.Enum"/> as with the default implementation. This allows us to use any 
            value for the tracing level rather than the restricted 5 values of the default class.
            </remarks>
        </member>
        <member name="M:StyleCop.Diagnostics.StyleCopSwitch.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StyleCop.Diagnostics.StyleCopSwitch"/> class with the default trace level.
            </summary>
            <param name="displayName">
            The name of the switch.
            </param>
            <param name="description">
            A description of the switch.
            </param>
        </member>
        <member name="M:StyleCop.Diagnostics.StyleCopSwitch.#ctor(System.String,System.String,StyleCop.Diagnostics.TraceTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:StyleCop.Diagnostics.StyleCopSwitch"/> class with a specified enumerated trace level.
            </summary>
            <param name="displayName">
            The name of the switch.
            </param>
            <param name="description">
            A description of the switch.
            </param>
            <param name="level">
            The trace level as a combination of <see cref="T:StyleCop.Diagnostics.TraceTypes"/> values.
            </param>
        </member>
        <member name="M:StyleCop.Diagnostics.StyleCopSwitch.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:StyleCop.Diagnostics.StyleCopSwitch"/> class with a specified trace level.
            </summary>
            <param name="displayName">
            The name of the switch.
            </param>
            <param name="description">
            A description of the switch.
            </param>
            <param name="level">
            The trace level.
            </param>
        </member>
        <member name="P:StyleCop.Diagnostics.StyleCopSwitch.Level">
            <summary>
            Gets or sets the current trace level.
            </summary>
        </member>
        <member name="P:StyleCop.Diagnostics.StyleCopSwitch.TraceError">
            <summary>
            Gets a value indicating whether tracing of errors is enabled.
            </summary>
        </member>
        <member name="P:StyleCop.Diagnostics.StyleCopSwitch.TraceInOut">
            <summary>
            Gets a value indicating whether tracing in and out of method bodies is enabled.
            </summary>
        </member>
        <member name="P:StyleCop.Diagnostics.StyleCopSwitch.TraceInfo">
            <summary>
            Gets a value indicating whether tracing of informational messages is enabled.
            </summary>
        </member>
        <member name="P:StyleCop.Diagnostics.StyleCopSwitch.TraceSensitiveData">
            <summary>
            Gets a value indicating whether tracing of sensitive data is enabled.
            </summary>
        </member>
        <member name="P:StyleCop.Diagnostics.StyleCopSwitch.TraceThreadId">
            <summary>
            Gets a value indicating whether the managed thread identifier should be included in the trace output.
            </summary>
        </member>
        <member name="P:StyleCop.Diagnostics.StyleCopSwitch.TraceThreadName">
            <summary>
            Gets a value indicating whether the managed thread name should be included in the trace output.
            </summary>
        </member>
        <member name="P:StyleCop.Diagnostics.StyleCopSwitch.TraceVerbose">
            <summary>
            Gets a value indicating whether tracing of verbose information is enabled.
            </summary>
        </member>
        <member name="P:StyleCop.Diagnostics.StyleCopSwitch.TraceWarning">
            <summary>
            Gets a value indicating whether tracing of warnings is enabled.
            </summary>
        </member>
        <member name="M:StyleCop.Diagnostics.StyleCopSwitch.OnSwitchSettingChanged">
            <summary>
            On switch setting changed.
            </summary>
        </member>
        <member name="T:StyleCop.Diagnostics.StyleCopTrace">
            <summary>
            The central manager class for application tracing, through which all application tracing should be done.
            </summary>
            <summary>
            Style cop trace.
            </summary>
            <content>StyleCopTrace.</content>
        </member>
        <member name="M:StyleCop.Diagnostics.StyleCopTrace.#cctor">
            <summary>
            Initializes static members of the <see cref="T:StyleCop.Diagnostics.StyleCopTrace"/> class.
            </summary>
        </member>
        <member name="P:StyleCop.Diagnostics.StyleCopTrace.Switch">
            <summary>
            Gets the <see cref="T:StyleCop.Diagnostics.StyleCopSwitch"/> that this class uses to decide whether to produce tracing messages.
            </summary>
        </member>
        <member name="M:StyleCop.Diagnostics.StyleCopTrace.Error(System.String)">
            <summary>
            Write an error message containing the passed text.
            </summary>
            <param name="message">
            The text of the message.
            </param>
        </member>
        <member name="M:StyleCop.Diagnostics.StyleCopTrace.Error(System.String,System.Object[])">
            <summary>
            Write an error message containing the passed arguments in the given format.
            </summary>
            <param name="format">
            Format to be used when writing the args to a string.
            </param>
            <param name="args">
            The arguments to insert into the format string.
            </param>
        </member>
        <member name="M:StyleCop.Diagnostics.StyleCopTrace.Error(System.Exception)">
            <summary>
            Write an error message consisting of the details of an <see cref="T:System.Exception"/>.
            </summary>
            <param name="exception">
            The <see cref="T:System.Exception"/> to write the message about.
            </param>
        </member>
        <member name="M:StyleCop.Diagnostics.StyleCopTrace.In(System.Object[])">
            <summary>
            To be called on method entry. This overload is recommended for most purposes.
            </summary>
            <param name="parameters">
            The values of the parameters that were passed into the function that is calling this trace function.
            </param>
        </member>
        <member name="M:StyleCop.Diagnostics.StyleCopTrace.Info(System.String)">
            <summary>
            Write an information message containing the passed text.
            </summary>
            <param name="message">
            The text of the message.
            </param>
        </member>
        <member name="M:StyleCop.Diagnostics.StyleCopTrace.Info(System.String,System.Object[])">
            <summary>
            Write an information message containing the passed arguments in the given format.
            </summary>
            <param name="format">
            Format to be used when writing the args to a string.
            </param>
            <param name="args">
            The arguments to insert into the format string.
            </param>
        </member>
        <member name="M:StyleCop.Diagnostics.StyleCopTrace.Out">
            <summary>
            To be called when leaving a method. This overload is recommended for functions that have only input
            parameters and which do not have a return value.
            </summary>
        </member>
        <member name="M:StyleCop.Diagnostics.StyleCopTrace.Out(System.Object)">
            <summary>
            To be called when leaving a method. This overload is recommended for functions that have only input
            parameters and which have a return value.
            </summary>
            <param name="returnValue">
            The return value of the method.
            </param>
            <returns>
            The passed in <paramref name="returnValue"/> parameter.
            </returns>
        </member>
        <member name="M:StyleCop.Diagnostics.StyleCopTrace.Out``1(``0)">
            <summary>
            To be called when leaving a method. This overload is recommended for functions that have only input
            parameters and which have a return value.
            </summary>
            <typeparam name="T">
            The type of return value.
            </typeparam>
            <param name="returnValue">
            The return value of the method.
            </param>
            <returns>
            The passed in <paramref name="returnValue"/> parameter.
            </returns>
        </member>
        <member name="M:StyleCop.Diagnostics.StyleCopTrace.Verbose(System.String)">
            <summary>
            Write a verbose informational message containing the passed text.
            </summary>
            <param name="message">
            The text of the message.
            </param>
        </member>
        <member name="M:StyleCop.Diagnostics.StyleCopTrace.Verbose(System.String,System.Object[])">
            <summary>
            Write a verbose informational message containing the passed arguments in the given format.
            </summary>
            <param name="format">
            Format to be used when writing the args to a string.
            </param>
            <param name="args">
            The arguments to insert into the format string.
            </param>
        </member>
        <member name="M:StyleCop.Diagnostics.StyleCopTrace.Warning(System.String)">
            <summary>
            Write a Warning message containing the passed text.
            </summary>
            <param name="message">
            The text of the message.
            </param>
        </member>
        <member name="M:StyleCop.Diagnostics.StyleCopTrace.Warning(System.Exception)">
            <summary>
            Write an Warning message consisting of the details of an <see cref="T:System.Exception"/>.
            </summary>
            <param name="exception">
            The <see cref="T:System.Exception"/> to write the message about.
            </param>
        </member>
        <member name="M:StyleCop.Diagnostics.StyleCopTrace.Warning(System.String,System.Object[])">
            <summary>
            Write a Warning message containing the passed arguments in the given format.
            </summary>
            <param name="format">
            Format to be used when writing the args to a string.
            </param>
            <param name="args">
            The arguments to insert into the format string.
            </param>
        </member>
        <member name="M:StyleCop.Diagnostics.StyleCopTrace.GetPrivateBytes">
            <summary>
            Returns the current processes private bytes.
            </summary>
            <returns>A long of the processes private bytes.</returns>
        </member>
        <member name="T:StyleCop.Diagnostics.StyleCopTrace.StyleCopTraceFormatter">
            <summary>
            A trace formatter class to perform the work of creating trace output strings on behalf of the <see cref="T:StyleCop.Diagnostics.StyleCopTrace"/> class.
            </summary>
        </member>
        <member name="F:StyleCop.Diagnostics.StyleCopTrace.StyleCopTraceFormatter.DebuggerDisplayFormatRegex">
            <summary>
            A regular expression to extract the names of members used with a <see cref="T:System.Diagnostics.DebuggerDisplayAttribute"/> format string.
            </summary>
        </member>
        <member name="F:StyleCop.Diagnostics.StyleCopTrace.StyleCopTraceFormatter.callingMethod">
            <summary>
            Caches the calling method.
            </summary>
        </member>
        <member name="F:StyleCop.Diagnostics.StyleCopTrace.StyleCopTraceFormatter.sensitiveMethod">
            <summary>
            Caches whether the calling method is marked as sensitive.
            </summary>
        </member>
        <member name="F:StyleCop.Diagnostics.StyleCopTrace.StyleCopTraceFormatter.stackDepth">
            <summary>
            Caches the stack depth of the calling method.
            </summary>
        </member>
        <member name="F:StyleCop.Diagnostics.StyleCopTrace.StyleCopTraceFormatter.buffer">
            <summary>
            The buffer in which trace output is constructed.
            </summary>
        </member>
        <member name="M:StyleCop.Diagnostics.StyleCopTrace.StyleCopTraceFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StyleCop.Diagnostics.StyleCopTrace.StyleCopTraceFormatter"/> class, which captures the calling method.
            </summary>
        </member>
        <member name="M:StyleCop.Diagnostics.StyleCopTrace.StyleCopTraceFormatter.WriteTraceIn(System.Object[])">
            <summary>
            Writes a trace string for method entry.
            </summary>
            <param name="arguments">
            Arguments that were passed into the method, which may be <c>null</c> if the method had no arguments.
            </param>
        </member>
        <member name="M:StyleCop.Diagnostics.StyleCopTrace.StyleCopTraceFormatter.WriteTraceMessage(System.String,System.String)">
            <summary>
            Writes a trace string containing a message.
            </summary>
            <param name="qualifier">
            The qualifier indicating the severity of the message, e.g. <c>Info</c> or <c>Warn</c>.
            </param>
            <param name="message">
            The message to write.
            </param>
        </member>
        <member name="M:StyleCop.Diagnostics.StyleCopTrace.StyleCopTraceFormatter.WriteTraceMessage(System.String,System.String,System.Object[])">
            <summary>
            Writes a trace string containing a message.
            </summary>
            <param name="qualifier">
            The qualifier indicating the severity of the message, e.g. <c>Info</c> or <c>Warn</c>.
            </param>
            <param name="format">
            The format of the message to write.
            </param>
            <param name="args">
            Arguments to insert into <paramref name="format"/>.
            </param>
        </member>
        <member name="M:StyleCop.Diagnostics.StyleCopTrace.StyleCopTraceFormatter.WriteTraceOut(System.Object)">
            <summary>
            Writes a trace string for method exit.
            </summary>
            <param name="returnValue">
            The return value of the method, which may be <c>null</c> if the method has no return type.
            </param>
        </member>
        <member name="M:StyleCop.Diagnostics.StyleCopTrace.StyleCopTraceFormatter.GetCallingMethod(System.Int32@)">
            <summary>
            Gets the method that originally called into the <see cref="T:StyleCop.Diagnostics.StyleCopTrace"/> class.
            </summary>
            <param name="stackDepth">
            When the method returns, contains the stack depth of the calling method.
            </param>
            <returns>
            A <see cref="T:System.Reflection.MethodBase"/> detailing the calling method.
            </returns>
        </member>
        <member name="M:StyleCop.Diagnostics.StyleCopTrace.StyleCopTraceFormatter.AppendParameter(System.Reflection.ParameterInfo,System.Object)">
            <summary>
            Appends a parameter to the buffer.
            </summary>
            <param name="parameter">
            Information about the parameter to append.
            </param>
            <param name="argument">
            The argument that was passed to the parameter.
            </param>
        </member>
        <member name="M:StyleCop.Diagnostics.StyleCopTrace.StyleCopTraceFormatter.AppendTypeName(System.Type)">
            <summary>
            Appends a 'prettily' formatted type name to the buffer.
            </summary>
            <param name="type">
            The type to append the name of.
            </param>
        </member>
        <member name="M:StyleCop.Diagnostics.StyleCopTrace.StyleCopTraceFormatter.InitializeBuffer(System.String)">
            <summary>
            Initializes the buffer with a specified qualifier.
            </summary>
            <param name="qualifier">
            The trace qualifier, e.g. <c>In</c> or <c>Err</c>.
            </param>
        </member>
        <member name="M:StyleCop.Diagnostics.StyleCopTrace.StyleCopTraceFormatter.IsAttributeDefined(System.Type)">
            <summary>
            Gets whether an attribute is defined on a method, or if that method is part of a property
            whether the attribute is defined on the containing property.
            </summary>
            <param name="attributeType">
            The type of attribute to find.
            </param>
            <returns>
            <b>True</b> if the attribute is defined, or <b>False</b> otherwise.
            </returns>
        </member>
        <member name="T:StyleCop.Diagnostics.TraceTypes">
            <summary>
            Represents the binary switch values used to turn on/off the various types of trace message.
            </summary>
        </member>
        <member name="F:StyleCop.Diagnostics.TraceTypes.None">
            <summary>
            No Tracing.
            </summary>
        </member>
        <member name="F:StyleCop.Diagnostics.TraceTypes.InOut">
            <summary>
            Trace in and out of methods and code blocks.
            </summary>
        </member>
        <member name="F:StyleCop.Diagnostics.TraceTypes.Error">
            <summary>
            Trace output of error conditions.
            </summary>
        </member>
        <member name="F:StyleCop.Diagnostics.TraceTypes.Warning">
            <summary>
            Trace output of warning conditions.
            </summary>
        </member>
        <member name="F:StyleCop.Diagnostics.TraceTypes.Info">
            <summary>
            Trace output of general information.
            </summary>
        </member>
        <member name="F:StyleCop.Diagnostics.TraceTypes.SensitiveData">
            <summary>
            Trace the full details of sensitive information. This flag only has an effect in debug
            builds - release builds will always obscure sensitive information.
            </summary>
        </member>
        <member name="F:StyleCop.Diagnostics.TraceTypes.IncludeThreadName">
            <summary>
            Includes the .NET Thread name with the message output.
            </summary>
        </member>
        <member name="F:StyleCop.Diagnostics.TraceTypes.IncludeThreadId">
            <summary>
            Include the .Net Thread Hash with the message output.
            </summary>
        </member>
        <member name="F:StyleCop.Diagnostics.TraceTypes.Verbose">
            <summary>
            Trace output that is considered highly verbose.
            Also modifies the tracing produced from In/Out so that reference types are expanded.  
            </summary>
        </member>
        <member name="T:StyleCop.NativeMethods">
            <summary>
            Contains static methods for access to win32 libraries.
            </summary>
        </member>
        <member name="F:StyleCop.NativeMethods.EXTENDED_NAME_FORMAT.NameCanonical">
            <summary>
            The canonical name.
            </summary>
        </member>
        <member name="F:StyleCop.NativeMethods.EXTENDED_NAME_FORMAT.NameCanonicalEx">
            <summary>
            The canonical extended name.
            </summary>
        </member>
        <member name="F:StyleCop.NativeMethods.EXTENDED_NAME_FORMAT.NameDisplay">
            <summary>
            The display name.
            </summary>
        </member>
        <member name="F:StyleCop.NativeMethods.EXTENDED_NAME_FORMAT.NameDnsDomain">
            <summary>
            The domain name service domain name.
            </summary>
        </member>
        <member name="F:StyleCop.NativeMethods.EXTENDED_NAME_FORMAT.NameFullyQualifiedDN">
            <summary>
            The fully qualified name.
            </summary>
        </member>
        <member name="F:StyleCop.NativeMethods.EXTENDED_NAME_FORMAT.NameSamCompatible">
            <summary>
            The sam compatible name.
            </summary>
        </member>
        <member name="F:StyleCop.NativeMethods.EXTENDED_NAME_FORMAT.NameServicePrincipal">
            <summary>
            The service principal name.
            </summary>
        </member>
        <member name="F:StyleCop.NativeMethods.EXTENDED_NAME_FORMAT.NameUniqueId">
            <summary>
            The unique identifier.
            </summary>
        </member>
        <member name="F:StyleCop.NativeMethods.EXTENDED_NAME_FORMAT.NameUnknown">
            <summary>
            The unknown name.
            </summary>
        </member>
        <member name="F:StyleCop.NativeMethods.EXTENDED_NAME_FORMAT.NameUserPrincipal">
            <summary>
            The user principal name.
            </summary>
        </member>
        <member name="T:StyleCop.Spelling.NamingService">
            <summary>
            The naming service.
            </summary>
        </member>
        <member name="P:StyleCop.Spelling.NamingService.DefaultNamingService">
            <summary>
            Gets the default naming service.
            </summary>
        </member>
        <member name="P:StyleCop.Spelling.NamingService.Culture">
            <summary>
            Gets the culture.
            </summary>
        </member>
        <member name="P:StyleCop.Spelling.NamingService.DictionaryFolders">
            <summary>
            Gets an array of the dictionary folders which have been scanned for dictionaries.
            </summary>
        </member>
        <member name="P:StyleCop.Spelling.NamingService.SupportsSpelling">
            <summary>
            Gets a value indicating whether supports spelling.
            </summary>
        </member>
        <member name="M:StyleCop.Spelling.NamingService.ClearCachedServices">
            <summary>
            Clears the cached services.
            </summary>
        </member>
        <member name="M:StyleCop.Spelling.NamingService.GetNamingService(System.Globalization.CultureInfo)">
            <summary>
            Gets a naming service for the specified culture.
            </summary>
            <param name="culture">
            The culture to use.
            </param>
            <returns>
            The NamingService for the culture.
            </returns>
        </member>
        <member name="M:StyleCop.Spelling.NamingService.AddDeprecatedWords(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Adds the deprecated words dictionary and their preferred alternatives to the list of current deprecated words.
            </summary>
            <param name="deprecatedWords">
            The dictionary of words to add.
            </param>
        </member>
        <member name="M:StyleCop.Spelling.NamingService.AddDictionaryFolder(System.String)">
            <summary>
            Adds a folder to the list of folders scanned for CustomDictionary.xml files.
            </summary>
            <param name="path">
            The path to add.
            </param>
        </member>
        <member name="M:StyleCop.Spelling.NamingService.CheckSpelling(System.String)">
            <summary>
            Check spelling of the word provided.
            </summary>
            <param name="word">
            The word to check.
            </param>
            <returns>
            The StyleCop.Spelling.WordSpelling.
            </returns>
        </member>
        <member name="M:StyleCop.Spelling.NamingService.Dispose">
            <summary>
            The dispose.
            </summary>
        </member>
        <member name="M:StyleCop.Spelling.NamingService.GetCompoundAlternateForDiscreteWord(System.String)">
            <summary>
            The get compound alternate for discrete word.
            </summary>
            <param name="word">
            The word.
            </param>
            <returns>
            The System.String.
            </returns>
        </member>
        <member name="M:StyleCop.Spelling.NamingService.GetDependantFilesHashCode">
            <summary>
            Returns a hash code of the files we use to check spelling.
            </summary>
            <returns>The hash code or 0 if we don't use any other files.</returns>
        </member>
        <member name="M:StyleCop.Spelling.NamingService.GetDiscreteAlternateForCompoundWord(System.String,System.String)">
            <summary>
            The get discrete alternate for compound word.
            </summary>
            <param name="word1">
            The word 1.
            </param>
            <param name="word2">
            The word 2.
            </param>
            <returns>
            The System.String.
            </returns>
        </member>
        <member name="M:StyleCop.Spelling.NamingService.GetPreferredAlternateForDeprecatedWord(System.String)">
            <summary>
            The get preferred alternate for deprecated word.
            </summary>
            <param name="word">
            The word.
            </param>
            <returns>
            The System.String.
            </returns>
        </member>
        <member name="M:StyleCop.Spelling.NamingService.IsCasingException(System.String)">
            <summary>
            The is casing exception.
            </summary>
            <param name="word">
            The word.
            </param>
            <returns>
            The System.Boolean.
            </returns>
        </member>
        <member name="M:StyleCop.Spelling.NamingService.Dispose(System.Boolean)">
            <summary>
            The dispose.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="M:StyleCop.Spelling.NamingService.FileChanged(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Called when the file changes.
            </summary>
            <param name="source">
            The source of the event.
            </param>
            <param name="e">
            The FileSystemEventArgs for the changing file.
            </param>
        </member>
        <member name="M:StyleCop.Spelling.NamingService.OnRenamed(System.Object,System.IO.RenamedEventArgs)">
            <summary>
            Called when the file renames.
            </summary>
            <param name="source">
            The source of the event.
            </param>
            <param name="e">
            The RenamedEventArgs for the changing file.
            </param>
        </member>
        <member name="M:StyleCop.Spelling.NamingService.AddFileWatcher(System.String)">
            <summary>
            Creates a FileWatcher.
            </summary>
            <param name="path">
            The file to watch.
            </param>
        </member>
        <member name="M:StyleCop.Spelling.NullIfNotFoundDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StyleCop.Spelling.NullIfNotFoundDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:StyleCop.Spelling.NullIfNotFoundDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:StyleCop.Spelling.NullIfNotFoundDictionary`2"/> class.
            </summary>
            <param name="capacity">
            The capacity.
            </param>
        </member>
        <member name="M:StyleCop.Spelling.NullIfNotFoundDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:StyleCop.Spelling.NullIfNotFoundDictionary`2"/> class.
            </summary>
            <param name="comparer">
            The comparer.
            </param>
        </member>
        <member name="M:StyleCop.Spelling.NullIfNotFoundDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:StyleCop.Spelling.NullIfNotFoundDictionary`2"/> class.
            </summary>
            <param name="dictionary">
            The dictionary.
            </param>
        </member>
        <member name="M:StyleCop.Spelling.NullIfNotFoundDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:StyleCop.Spelling.NullIfNotFoundDictionary`2"/> class.
            </summary>
            <param name="capacity">
            The capacity.
            </param>
            <param name="comparer">
            The comparer.
            </param>
        </member>
        <member name="M:StyleCop.Spelling.NullIfNotFoundDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:StyleCop.Spelling.NullIfNotFoundDictionary`2"/> class.
            </summary>
            <param name="dictionary">
            The dictionary.
            </param>
            <param name="comparer">
            The comparer.
            </param>
        </member>
        <member name="P:StyleCop.Spelling.NullIfNotFoundDictionary`2.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:StyleCop.Spelling.NullIfNotFoundDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether is read only.
            </summary>
        </member>
        <member name="P:StyleCop.Spelling.NullIfNotFoundDictionary`2.Keys">
            <summary>
            Gets the keys.
            </summary>
        </member>
        <member name="P:StyleCop.Spelling.NullIfNotFoundDictionary`2.Values">
            <summary>
            Gets the values.
            </summary>
        </member>
        <member name="P:StyleCop.Spelling.NullIfNotFoundDictionary`2.Item(`0)">
            <summary>
            The this.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The TValue.
            </returns>
        </member>
        <member name="M:StyleCop.Spelling.NullIfNotFoundDictionary`2.Add(`0,`1)">
            <summary>
            The add.
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:StyleCop.Spelling.NullIfNotFoundDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            The add.
            </summary>
            <param name="item">
            The item.
            </param>
        </member>
        <member name="M:StyleCop.Spelling.NullIfNotFoundDictionary`2.Clear">
            <summary>
            The clear.
            </summary>
        </member>
        <member name="M:StyleCop.Spelling.NullIfNotFoundDictionary`2.Contains(`0)">
            <summary>
            The contains.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The System.Boolean.
            </returns>
        </member>
        <member name="M:StyleCop.Spelling.NullIfNotFoundDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            The contains.
            </summary>
            <param name="item">
            The item.
            </param>
            <returns>
            The System.Boolean.
            </returns>
        </member>
        <member name="M:StyleCop.Spelling.NullIfNotFoundDictionary`2.ContainsKey(`0)">
            <summary>
            The contains key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The System.Boolean.
            </returns>
        </member>
        <member name="M:StyleCop.Spelling.NullIfNotFoundDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            The copy to.
            </summary>
            <param name="array">
            The array.
            </param>
            <param name="arrayIndex">
            The array index.
            </param>
        </member>
        <member name="M:StyleCop.Spelling.NullIfNotFoundDictionary`2.GetEnumerator">
            <summary>
            The get enumerator.
            </summary>
            <returns>
            The System.Collections.Generic.IEnumerator`1[T -&gt; System.Collections.Generic.KeyValuePair`2[TKey -&gt; TKey, TValue -&gt; TValue]].
            </returns>
        </member>
        <member name="M:StyleCop.Spelling.NullIfNotFoundDictionary`2.Remove(`0)">
            <summary>
            The remove.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The System.Boolean.
            </returns>
        </member>
        <member name="M:StyleCop.Spelling.NullIfNotFoundDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            The remove.
            </summary>
            <param name="item">
            The item.
            </param>
            <returns>
            The System.Boolean.
            </returns>
        </member>
        <member name="M:StyleCop.Spelling.NullIfNotFoundDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            The try get value.
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            The System.Boolean.
            </returns>
        </member>
        <member name="P:StyleCop.Spelling.SpellChecker.Language.PathsToOfficeProofingTools">
            <summary>
            Gets a path to the Office 2010, 2013, or 2016 proof directory. Returns string.Empty if the path
            could not be found.
            </summary>
        </member>
        <member name="M:StyleCop.Spelling.WordCollection.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:StyleCop.Spelling.WordCollection"/> class.
            </summary>
            <param name="comparer">
            The comparer.
            </param>
        </member>
        <member name="E:StyleCop.Spelling.WordCollection.CollectionChanged">
            <summary>
            The collection changed.
            </summary>
        </member>
        <member name="P:StyleCop.Spelling.WordCollection.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="M:StyleCop.Spelling.WordCollection.Add(System.String)">
            <summary>
            The add.
            </summary>
            <param name="item">
            The item.
            </param>
        </member>
        <member name="M:StyleCop.Spelling.WordCollection.Clear">
            <summary>
            The clear.
            </summary>
        </member>
        <member name="M:StyleCop.Spelling.WordCollection.Contains(System.String)">
            <summary>
            The contains.
            </summary>
            <param name="item">
            The item.
            </param>
            <returns>
            The System.Boolean.
            </returns>
        </member>
        <member name="M:StyleCop.Spelling.WordCollection.CopyTo(System.String[],System.Int32)">
            <summary>
            The copy to.
            </summary>
            <param name="array">
            The array.
            </param>
            <param name="arrayIndex">
            The array index.
            </param>
        </member>
        <member name="M:StyleCop.Spelling.WordCollection.GetEnumerator">
            <summary>
            The get enumerator.
            </summary>
            <returns>
            The System.Collections.Generic.IEnumerator`1[T -&gt; System.String].
            </returns>
        </member>
        <member name="M:StyleCop.Spelling.WordCollection.Remove(System.String)">
            <summary>
            The remove.
            </summary>
            <param name="item">
            The item.
            </param>
            <returns>
            The System.Boolean.
            </returns>
        </member>
        <member name="M:StyleCop.Spelling.WordCollection.OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
            The on collection changed.
            </summary>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="T:StyleCop.Spelling.WordParser">
            <summary>
            The word parser.
            </summary>
        </member>
        <member name="F:StyleCop.Spelling.WordParser.recognizedWords">
            <summary>
            The recognized words
            </summary>
        </member>
        <member name="M:StyleCop.Spelling.WordParser.#ctor(System.String,StyleCop.Spelling.WordParserOptions,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:StyleCop.Spelling.WordParser"/> class.
            </summary>
            <param name="text">
            The text.
            </param>
            <param name="options">
            The options.
            </param>
            <param name="recognizedWords">
            The recognized words.
            </param>
        </member>
        <member name="M:StyleCop.Spelling.WordParser.#ctor(System.String,StyleCop.Spelling.WordParserOptions,System.Collections.Generic.ICollection{System.String},System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:StyleCop.Spelling.WordParser"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="options">The options.</param>
            <param name="recognizedWords">The recognized words.</param>
            <param name="prefixChar">The prefix char.</param>
            <exception cref="T:System.ArgumentNullException">text is null</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">options is invalid</exception>
        </member>
        <member name="M:StyleCop.Spelling.WordParser.NextWord">
            <summary>
            The next word.
            </summary>
            <returns>
            The System.String.
            </returns>
        </member>
        <member name="M:StyleCop.Spelling.WordParser.PeekWord">
            <summary>
            The peek word.
            </summary>
            <returns>
            The System.String.
            </returns>
        </member>
        <member name="M:StyleCop.Spelling.WordParser.ParseUppercase">
            <summary>
            Parses the next word which starts with an upper case.
            </summary>
        </member>
        <member name="M:StyleCop.Spelling.WordParser.PeekWholeWord">
            <summary>
            Peeks the next whole word.
            </summary>
            <returns>The next whole word</returns>
        </member>
        <member name="M:StyleCop.Spelling.WordParser.ParseWholeWord">
            <summary>
            Parses the next whole word.
            </summary>
        </member>
        <member name="M:StyleCop.Spelling.WordParser.Peek">
            <summary>
            Peeks the next character.
            </summary>
            <returns>The next character</returns>
        </member>
        <member name="M:StyleCop.Spelling.WordParser.Peek(System.Int32)">
            <summary>
            Peeks the next character at the specified position to look ahead.
            </summary>
            <param name="lookAhead">The position of the character to look ahead.</param>
            <returns>The next character at the specified position</returns>
        </member>
        <member name="M:StyleCop.Spelling.WordParser.Read">
            <summary>
            Reads the next character.
            </summary>
        </member>
        <member name="M:StyleCop.Spelling.WordParser.Skip">
            <summary>
            Skips the next ignored characters.
            </summary>
        </member>
        <member name="T:StyleCop.Spelling.WordParserOptions">
            <summary>
            The options for the word parser. 
            </summary>
        </member>
        <member name="F:StyleCop.Spelling.WordParserOptions.None">
            <summary>
            No parser options.
            </summary>
        </member>
        <member name="F:StyleCop.Spelling.WordParserOptions.IgnoreMnemonicsIndicators">
            <summary>
            If set mnemonics will be ignored.
            </summary>
        </member>
        <member name="F:StyleCop.Spelling.WordParserOptions.SplitCompoundWords">
            <summary>
            If set it will split compound words.
            </summary>
        </member>
        <member name="T:StyleCop.Spelling.WordSpelling">
            <summary>
            The result of the spelling check.
            </summary>
        </member>
        <member name="F:StyleCop.Spelling.WordSpelling.SpelledCorrectly">
            <summary>
            The word was spelled correctly.
            </summary>
        </member>
        <member name="F:StyleCop.Spelling.WordSpelling.Unrecognized">
            <summary>
            The word was unrecognized.
            </summary>
        </member>
        <member name="F:StyleCop.Spelling.WordSpelling.CasedIncorrectly">
            <summary>
            The word was cased incorrectly.
            </summary>
        </member>
        <member name="T:StyleCop.UnixNativeMethods">
            <summary>
            Contains static methods for access to unix libraries.
            </summary>
        </member>
        <member name="M:StyleCop.UnixNativeMethods.GetUnixKernelName">
            <summary>
            Gets the unix kernel name by p/invoking uname.
            </summary>
            <returns>The name of the unix kernel. </returns>
        </member>
        <member name="T:StyleCop.IPropertyControlHost">
            <summary>
            Interface which must be implemented by a host of the <see cref="T:StyleCop.PropertyControl"/>.
            </summary>
        </member>
        <member name="M:StyleCop.IPropertyControlHost.Cancel">
            <summary>
            Called to cancel the host.
            </summary>
        </member>
        <member name="M:StyleCop.IPropertyControlHost.Dirty(System.Boolean)">
            <summary>
            Called when the combined dirty status of the pages changes.
            </summary>
            <param name="isDirty">
            True if any of the pages are dirty, false if not.
            </param>
        </member>
        <member name="T:StyleCop.PropertyControlSaveResult">
            <summary>
            The possible results of saving the settings.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyControlSaveResult.Success">
            <summary>
            The save succeeded.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyControlSaveResult.PageAbort">
            <summary>
            One of the pages aborted the save operation.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyControlSaveResult.SaveError">
            <summary>
            An error occurred while saving the file.
            </summary>
        </member>
        <member name="T:StyleCop.PropertyDialog">
            <summary>
            Hosts a <see cref="T:StyleCop.PropertyControl"/> and provides standard property page buttons.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyDialog.context">
            <summary>
            The context for the property control.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyDialog.core">
            <summary>
            The StyleCop core instance.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyDialog.helpCallback">
            <summary>
            The callback method for help.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyDialog.id">
            <summary>
            The page set ID.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyDialog.pages">
            <summary>
            The property pages to display.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyDialog.settingsFile">
            <summary>
            The settings file being edited.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyDialog.settingsChanged">
            <summary>
            Indicates whether settings have been changed on any page.
            </summary>
        </member>
        <member name="M:StyleCop.PropertyDialog.#ctor">
            <summary>
            Initializes a new instance of the PropertyDialog class.
            </summary>
        </member>
        <member name="M:StyleCop.PropertyDialog.#ctor(System.Collections.Generic.IList{StyleCop.IPropertyControlPage},StyleCop.WritableSettings,System.String,StyleCop.StyleCopCore,StyleCop.PropertyDialog.Help,System.Object[])">
            <summary>
            Initializes a new instance of the PropertyDialog class.
            </summary>
            <param name="pages">
            The array of pages to display on the property control.
            </param>
            <param name="settingsFile">
            The file that contains the settings being edited.
            </param>
            <param name="id">
            A unique ID that describes this set of property pages.
            </param>
            <param name="core">
            The StyleCop core instance.
            </param>
            <param name="helpCallback">
            Callback method for help, or null for no help.
            </param>
            <param name="context">
            The context to the send to the property page control.
            </param>
        </member>
        <member name="T:StyleCop.PropertyDialog.Help">
            <summary>
            Delegate that is called when the user hits the Help button.
            </summary>
            <param name="activePage">The currently active page on the control.</param>
        </member>
        <member name="P:StyleCop.PropertyDialog.SettingsChanged">
            <summary>
            Gets a value indicating whether the user saved any changes to settings on the property pages.
            </summary>
        </member>
        <member name="M:StyleCop.PropertyDialog.Cancel">
            <summary>
            Cancels the dialog.
            </summary>
        </member>
        <member name="M:StyleCop.PropertyDialog.Dirty(System.Boolean)">
            <summary>
            IPropertyControlHost.Dirty implementation. Enables or disables the Apply button
            based upon whether any data on the pages is dirty.
            </summary>
            <param name="isDirty">
            True if the dialog is dirty.
            </param>
        </member>
        <member name="M:StyleCop.PropertyDialog.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            The form's OnClosing event. Saves the window position.
            </summary>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.PropertyDialog.OnLoad(System.EventArgs)">
            <summary>
            The form's OnLoad event. Initializes the PropertyControl object.
            </summary>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.PropertyDialog.MoveButton(System.Windows.Forms.Button,System.Windows.Forms.Button)">
            <summary>
            Moves the first button into the same position as the second button.
            </summary>
            <param name="source">
            The button to move.
            </param>
            <param name="dest">
            The button to move the first button on top of.
            </param>
        </member>
        <member name="M:StyleCop.PropertyDialog.ApplyClick(System.Object,System.EventArgs)">
            <summary>
            Called when the user clicks the Apply button.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.PropertyDialog.CancelClick(System.Object,System.EventArgs)">
            <summary>
            Called when the user clicks the Cancel button.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.PropertyDialog.HelpClick(System.Object,System.EventArgs)">
            <summary>
            Called when the user clicks the Help button.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.PropertyDialog.OkClick(System.Object,System.EventArgs)">
            <summary>
            Called when the user clicks the OK button.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="F:StyleCop.PropertyDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:StyleCop.PropertyDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:StyleCop.PropertyDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:StyleCop.V105Settings">
            <summary>
            Loads settings from a version 105 settings document.
            </summary>
        </member>
        <member name="T:StyleCop.V105Settings.PropertyType">
            <summary>
            The types of settings properties.
            </summary>
        </member>
        <member name="F:StyleCop.V105Settings.PropertyType.Boolean">
            <summary>
            A property containing a boolean value.
            </summary>
        </member>
        <member name="F:StyleCop.V105Settings.PropertyType.Integer">
            <summary>
            A property containing an integer value.
            </summary>
        </member>
        <member name="F:StyleCop.V105Settings.PropertyType.String">
            <summary>
            A property containing a string value.
            </summary>
        </member>
        <member name="F:StyleCop.V105Settings.PropertyType.Collection">
            <summary>
            A property containing a collection of properties.
            </summary>
        </member>
        <member name="F:StyleCop.V105Settings.PropertyType.None">
            <summary>
            Not a valid property.
            </summary>
        </member>
        <member name="M:StyleCop.V105Settings.Load(System.Xml.XmlDocument,StyleCop.Settings)">
            <summary>
            Loads the settings from the document.
            </summary>
            <param name="document">
            The settings document.
            </param>
            <param name="settings">
            Stores the settings.
            </param>
        </member>
        <member name="M:StyleCop.V105Settings.Load(System.Xml.XmlNode,StyleCop.Settings)">
            <summary>
            Loads the settings from the document.
            </summary>
            <param name="documentRoot">
            The root node of the settings document.
            </param>
            <param name="settings">
            Stores the settings.
            </param>
        </member>
        <member name="M:StyleCop.V105Settings.ConvertLegacyAddInName(System.String)">
            <summary>
            Converts a legacy "Microsoft.SourceAnalysis" or "Microsoft.StyleCop" AddIn name to the new name.
            </summary>
            <param name="addInName">
            The original name.
            </param>
            <returns>
            Returns the converted name.
            </returns>
        </member>
        <member name="M:StyleCop.V105Settings.DeterminePropertyNodeType(System.String)">
            <summary>
            Determines the type of property represented by the property type name.
            </summary>
            <param name="propertyType">
            The property type name.
            </param>
            <returns>
            Returns the well-known property type.
            </returns>
        </member>
        <member name="M:StyleCop.V105Settings.LoadAnalyzerSettings(System.Xml.XmlNode,StyleCop.Settings)">
            <summary>
            Loads analyzer settings from the document.
            </summary>
            <param name="documentRoot">
            The root node of the settings document.
            </param>
            <param name="settings">
            Stores the settings.
            </param>
        </member>
        <member name="M:StyleCop.V105Settings.LoadBooleanProperty(System.String,System.Xml.XmlNode,StyleCop.PropertyCollection,StyleCop.PropertyDescriptorCollection)">
            <summary>
            Loads and stores a boolean property.
            </summary>
            <param name="propertyName">
            The name of the property to load.
            </param>
            <param name="propertyNode">
            The node containing the property.
            </param>
            <param name="properties">
            The collection in which to store the property.
            </param>
            <param name="propertyDescriptors">
            The collection of property descriptors.
            </param>
        </member>
        <member name="M:StyleCop.V105Settings.LoadCollectionProperty(System.String,System.Xml.XmlNode,StyleCop.PropertyCollection,StyleCop.PropertyDescriptorCollection)">
            <summary>
            Loads and stores a collection property.
            </summary>
            <param name="propertyName">
            The name of the property to load.
            </param>
            <param name="propertyNode">
            The node containing the property.
            </param>
            <param name="properties">
            The collection in which to store the property.
            </param>
            <param name="propertyDescriptors">
            The collection of property descriptors.
            </param>
        </member>
        <member name="M:StyleCop.V105Settings.LoadFileLists(System.Xml.XmlNode,StyleCop.Settings)">
            <summary>
            Loads files specified in file lists.
            </summary>
            <param name="documentRoot">
            The root node of the settings document.
            </param>
            <param name="settings">
            Stores the settings.
            </param>
        </member>
        <member name="M:StyleCop.V105Settings.LoadIntProperty(System.String,System.Xml.XmlNode,StyleCop.PropertyCollection,StyleCop.PropertyDescriptorCollection)">
            <summary>
            Loads and stores an integer property.
            </summary>
            <param name="propertyName">
            The name of the property to load.
            </param>
            <param name="propertyNode">
            The node containing the property.
            </param>
            <param name="properties">
            The collection in which to store the property.
            </param>
            <param name="propertyDescriptors">
            The collection of property descriptors.
            </param>
        </member>
        <member name="M:StyleCop.V105Settings.LoadParserSettings(System.Xml.XmlNode,StyleCop.Settings)">
            <summary>
            Loads parser settings from the document.
            </summary>
            <param name="documentRoot">
            The root node of the settings document.
            </param>
            <param name="settings">
            Stores the settings.
            </param>
        </member>
        <member name="M:StyleCop.V105Settings.LoadPropertyCollection(System.Xml.XmlNode,StyleCop.PropertyCollection,StyleCop.PropertyDescriptorCollection,System.String)">
            <summary>
            Loads a property collection from the settings file.
            </summary>
            <param name="propertyCollectionNode">
            The node containing the property collection.
            </param>
            <param name="properties">
            The property collection storage object.
            </param>
            <param name="propertyDescriptors">
            The collection of property descriptors.
            </param>
            <param name="ruleName">
            An optional rule name to prepend the each property name.
            </param>
        </member>
        <member name="M:StyleCop.V105Settings.LoadRulesSettings(System.Xml.XmlNode,StyleCop.PropertyCollection,StyleCop.PropertyDescriptorCollection)">
            <summary>
            Loads settings for rules.
            </summary>
            <param name="addInNode">
            The add-in containing the rules.
            </param>
            <param name="properties">
            The collection of properties to add the rules settings into.
            </param>
            <param name="propertyDescriptors">
            The collection of property descriptors for the add-in.
            </param>
        </member>
        <member name="M:StyleCop.V105Settings.LoadStringProperty(System.String,System.Xml.XmlNode,StyleCop.PropertyCollection,StyleCop.PropertyDescriptorCollection)">
            <summary>
            Loads and stores a string property.
            </summary>
            <param name="propertyName">
            The name of the property to load.
            </param>
            <param name="propertyNode">
            The node containing the property.
            </param>
            <param name="properties">
            The collection in which to store the property.
            </param>
            <param name="propertyDescriptors">
            The collection of property descriptors.
            </param>
        </member>
        <member name="T:StyleCop.StyleCopRunner">
            <summary>
            Object model for hosting StyleCop in a simplified manner.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopRunner.core">
            <summary>
            The StyleCop core instance.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopRunner.violationCount">
            <summary>
            The violation count.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopRunner.violations">
            <summary>
            The violations document.
            </summary>
        </member>
        <member name="M:StyleCop.StyleCopRunner.#ctor">
            <summary>
            Initializes a new instance of the StyleCopRunner class.
            </summary>
        </member>
        <member name="E:StyleCop.StyleCopRunner.OutputGenerated">
            <summary>
            Event that is fired when output is generated from the console during an analysis.
            </summary>
        </member>
        <member name="E:StyleCop.StyleCopRunner.ViolationEncountered">
            <summary>
            Event that is fired when output is generated from the console during an analysis.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopRunner.Core">
            <summary>
            Gets or sets the StyleCop core instance.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopRunner.CaptureViolations">
            <summary>
            Gets or sets a value indicating whether we should capture the violations.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopRunner.ViolationCount">
            <summary>
            Gets the violation count.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopRunner.Violations">
            <summary>
            Gets the violations document.
            </summary>
        </member>
        <member name="M:StyleCop.StyleCopRunner.OnOutputGenerated(StyleCop.OutputEventArgs)">
            <summary>
            Called when output is generated during an analysis. This can be called simultaneously from several threads and so any code must be thread safe.
            </summary>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.StyleCopRunner.OnViolationEncountered(StyleCop.ViolationEventArgs)">
            <summary>
            Called when a violation is encountered during an analysis. This can be called simultaneously from several threads and so any code must be thread safe.
            </summary>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.StyleCopRunner.Reset">
            <summary>
            Resets the violation count.
            </summary>
        </member>
        <member name="M:StyleCop.StyleCopRunner.CreateSafeSectionName(System.String)">
            <summary>
            Creates a safe version of the element name that can be outputted to Xml.
            </summary>
            <param name="originalName">
            The original name.
            </param>
            <returns>
            Returns the safe name.
            </returns>
        </member>
        <member name="M:StyleCop.StyleCopRunner.CoreOutputGenerated(System.Object,StyleCop.OutputEventArgs)">
            <summary>
            Called when output should be added to the Output pane.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.StyleCopRunner.CoreViolationEncountered(System.Object,StyleCop.ViolationEventArgs)">
            <summary>
            Called when a violation is found.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="T:StyleCop.StyleCopObjectConsole">
            <summary>
            A lightweight StyleCop host which does not depend on the file system for loading source and settings files. Source files and settings
            files can be loaded from any arbitrary source (in memory, database, etc.).
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopObjectConsole.defaultSettings">
            <summary>
            The default settings document.
            </summary>
        </member>
        <member name="M:StyleCop.StyleCopObjectConsole.#ctor(StyleCop.ObjectBasedEnvironment,StyleCop.Settings,System.Collections.Generic.ICollection{System.String},System.Boolean)">
            <summary>
            Initializes a new instance of the StyleCopObjectConsole class.
            </summary>
            <param name="environment">
            The environment.
            </param>
            <param name="defaultSettings">
            The default settings to use, or null to allow each project to specify its own settings.
            </param>
            <param name="addInPaths">
            The list of paths to search under for parser and analyzer addins.
            Can be null if no addin paths are provided.
            </param>
            <param name="loadFromDefaultPath">
            Indicates whether to load addins
            from the default application path.
            </param>
        </member>
        <member name="M:StyleCop.StyleCopObjectConsole.#ctor(StyleCop.ObjectBasedEnvironment,StyleCop.Settings,System.Collections.Generic.ICollection{System.String},System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the StyleCopObjectConsole class.
            </summary>
            <param name="environment">
            The environment.
            </param>
            <param name="defaultSettings">
            The default settings to use, or null to allow each project to specify its own settings.
            </param>
            <param name="addInPaths">
            The list of paths to search under for parser and analyzer addins.
            Can be null if no addin paths are provided.
            </param>
            <param name="loadFromDefaultPath">
            Indicates whether to load addins
            from the default application path.
            </param>
            <param name="hostTag">
            An optional tag which can be set by the host.
            </param>
        </member>
        <member name="M:StyleCop.StyleCopObjectConsole.Start(System.Collections.Generic.IList{StyleCop.CodeProject})">
            <summary>
            Starts analyzing the source code documents contained within the given projects.
            </summary>
            <param name="projects">
            The projects to analyze.
            </param>
            <returns>
            Returns false if an error occurs during analysis.
            </returns>
        </member>
        <member name="M:StyleCop.StyleCopObjectConsole.GetSettingsForProject(StyleCop.CodeProject)">
            <summary>
            Gets the settings for the given project.
            </summary>
            <param name="project">
            The project.
            </param>
            <returns>
            Returns the settings, or null if there 
            </returns>
        </member>
        <member name="M:StyleCop.StyleCopObjectConsole.LoadSettings(System.Collections.Generic.IList{StyleCop.CodeProject})">
            <summary>
            Loads the settings files to use for the analysis.
            </summary>
            <param name="projects">
            The list of projects to use.
            </param>
        </member>
        <member name="T:StyleCop.SourceCodeFactory">
            <summary>
            Delegate which is used to retrieve the <see cref="T:StyleCop.SourceCode" /> object corresponding to the given path.
            </summary>
            <param name="path">The path to the source code object.</param>
            <param name="project">The project which contains the source code object.</param>
            <param name="parser">The parser for the source code type.</param>
            <param name="context">Optional context.</param>
            <returns>Returns the source code object.</returns>
        </member>
        <member name="T:StyleCop.ProjectSettingsFactory">
            <summary>
            Delegate which is used to retrieve the <see cref="T:StyleCop.Settings" /> object corresponding to a given project path.
            </summary>
            <param name="path">The path to the project.</param>
            <param name="readOnly">Indicates whether to return a <see cref="T:StyleCop.Settings" /> object or a <see cref="T:StyleCop.WritableSettings" /> object.</param>
            <returns>Returns the settings object.</returns>
        </member>
        <member name="T:StyleCop.ObjectBasedEnvironment">
            <summary>
            An environment which does not depend on the file system for loading source and settings files. Source files and settings
            files can be loaded from any arbitrary source (in memory, database, etc.).
            </summary>
        </member>
        <member name="F:StyleCop.ObjectBasedEnvironment.fileTypes">
            <summary>
            The list of parsers and their associations.
            </summary>
        </member>
        <member name="F:StyleCop.ObjectBasedEnvironment.settingsFactory">
            <summary>
            Callback which is used to retrieve Settings objects on demand.
            </summary>
        </member>
        <member name="F:StyleCop.ObjectBasedEnvironment.sourceCodeFactory">
            <summary>
            Callback which is used to retrieve SourceCode objects on demand.
            </summary>
        </member>
        <member name="F:StyleCop.ObjectBasedEnvironment.defaultSettingsFilePath">
            <summary>
            The path to the default settings file, if any.
            </summary>
        </member>
        <member name="M:StyleCop.ObjectBasedEnvironment.#ctor(StyleCop.SourceCodeFactory,StyleCop.ProjectSettingsFactory)">
            <summary>
            Initializes a new instance of the ObjectBasedEnvironment class.
            </summary>
            <param name="sourceCodeFactory">
            Callback which is used to create <see cref="T:StyleCop.SourceCode"/> objects on demand.
            </param>
            <param name="settingsFactory">
            Optional callback which is used to create <see cref="T:StyleCop.Settings"/> objects on demand.
            </param>
        </member>
        <member name="P:StyleCop.ObjectBasedEnvironment.SupportsLinkedSettings">
            <summary>
            Gets a value indicating whether the environment supports settings documents
            which link directly to another settings document to merge with.
            </summary>
        </member>
        <member name="P:StyleCop.ObjectBasedEnvironment.SupportsResultsCache">
            <summary>
            Gets a value indicating whether the environment supports the use
            of the results cache.
            </summary>
        </member>
        <member name="M:StyleCop.ObjectBasedEnvironment.AddParser(StyleCop.SourceParser)">
            <summary>
            Invoked when a new parser is loaded.
            </summary>
            <param name="parser">
            The new parser.
            </param>
        </member>
        <member name="M:StyleCop.ObjectBasedEnvironment.AddSourceCode(StyleCop.CodeProject,System.String,System.Object)">
            <summary>
            Adds a source code document to the given project.
            </summary>
            <param name="project">
            The project which should contain the source code instance.
            </param>
            <param name="path">
            The path to the source code document to add.
            </param>
            <param name="context">
            Optional context information.
            </param>
            <returns>
            Returns true if any source code documents were added to the project.
            </returns>
        </member>
        <member name="M:StyleCop.ObjectBasedEnvironment.GetDefaultSettingsPath">
            <summary>
            Gets the path to the default settings file for the currently running StyleCop installation.
            </summary>
            <returns>Returns the path or an empty string if there is none.</returns>
        </member>
        <member name="M:StyleCop.ObjectBasedEnvironment.GetParentSettingsPath(System.String)">
            <summary>
            Given the path to a settings document, determines the path to a parent settings file, if one exists.
            </summary>
            <param name="settingsPath">
            The path to the local settings document.
            </param>
            <returns>
            Returns the path to the parent settings document or null if none exists.
            </returns>
        </member>
        <member name="M:StyleCop.ObjectBasedEnvironment.GetParsersForFileType(System.String)">
            <summary>
            Gets the collection of parsers registered for the given file extension.
            </summary>
            <param name="fileType">
            The file extension.
            </param>
            <returns>
            Returns the parsers for the file extension.
            </returns>
        </member>
        <member name="M:StyleCop.ObjectBasedEnvironment.GetProjectSettings(StyleCop.CodeProject,System.Boolean,System.Exception@)">
            <summary>
            Gets the settings for the given project.
            </summary>
            <param name="project">
            The project containing the settings.
            </param>
            <param name="merge">
            Indicates whether to merge the settings with parent settings before returning them.
            </param>
            <param name="exception">
            Returns an exception if one occurred while loading the settings.
            </param>
            <returns>
            Returns the settings.
            </returns>
        </member>
        <member name="M:StyleCop.ObjectBasedEnvironment.GetSettings(System.String,System.Boolean,System.Exception@)">
            <summary>
            Gets the settings given the path to the local settings.
            </summary>
            <param name="settingsPath">
            The path to the settings to load.
            </param>
            <param name="merge">
            Indicates whether to merge the settings with parent settings before returning them.
            </param>
            <param name="exception">
            Returns an exception if one occurred while loading the settings.
            </param>
            <returns>
            Returns the settings.
            </returns>
        </member>
        <member name="M:StyleCop.ObjectBasedEnvironment.GetWritableSettings(System.String,System.Exception@)">
            <summary>
            Loads or creates the settings at the given path, and returns them in writable mode.
            </summary>
            <param name="settingsPath">
            The path to the settings.
            </param>
            <param name="exception">
            Returns an exception if one occurred loading or creating the settings.
            </param>
            <returns>
            Returns the settings.
            </returns>
        </member>
        <member name="M:StyleCop.ObjectBasedEnvironment.LoadResultsCache(System.String)">
            <summary>
            Loads the results cache at the given location.
            </summary>
            <param name="location">
            The location of the results cache to load.
            </param>
            <returns>
            Returns the results cache or null if there is no results cache at that location.
            </returns>
        </member>
        <member name="M:StyleCop.ObjectBasedEnvironment.RemoveAnalysisResults(System.String)">
            <summary>
            Removes the analysis results at the given location.
            </summary>
            <param name="location">
            The location of the analysis results to remove.
            </param>
        </member>
        <member name="M:StyleCop.ObjectBasedEnvironment.SaveAnalysisResults(System.String,System.Xml.XmlDocument,System.Exception@)">
            <summary>
            Saves the analysis results at the given location.
            </summary>
            <param name="location">
            The path to save the results under.
            </param>
            <param name="analysisResults">
            The results to save.
            </param>
            <param name="exception">
            Returns an exception if one occurs while saving the results.
            </param>
            <returns>
            Returns true if the results were saved successfully.
            </returns>
        </member>
        <member name="M:StyleCop.ObjectBasedEnvironment.SaveResultsCache(System.String,System.Xml.XmlDocument)">
            <summary>
            Saves the given results cache.
            </summary>
            <param name="location">
            The location to save the results cache under.
            </param>
            <param name="resultsCache">
            The results cache to save.
            </param>
        </member>
        <member name="M:StyleCop.ObjectBasedEnvironment.SaveSettings(StyleCop.WritableSettings,System.Exception@)">
            <summary>
            Saves the settings file at the path specified within the settings document.
            </summary>
            <param name="settings">
            The settings to save.
            </param>
            <param name="exception">
            If the document could not be saved, this returns the 
            resulting exception information.
            </param>
            <returns>
            Returns true if the file was successfully saved.
            </returns>
        </member>
        <member name="M:StyleCop.ObjectBasedEnvironment.LoadSettingsDocument(System.String,System.Boolean,System.Exception@)">
            <summary>
            Loads the settings file at the given path.
            </summary>
            <param name="settingsFilePath">
            The path to the settings file.
            </param>
            <param name="readOnly">
            Indicates whether a read-only document should be returned.
            </param>
            <param name="exception">
            If the document could not be loaded, this returns the 
            resulting exception information.
            </param>
            <returns>
            Returns the settings if they could be loaded.
            </returns>
        </member>
        <member name="T:StyleCop.CoreParser">
            <summary>
            A "fake" parser class used by the StyleCop engine to register 
            violations exposed by the core engine.
            </summary>
        </member>
        <member name="M:StyleCop.CoreParser.ParseFile(StyleCop.SourceCode,System.Int32,StyleCop.CodeDocument@)">
            <summary>
            Parses a source code document.
            </summary>
            <param name="sourceCode">
            The source code to parse.
            </param>
            <param name="passNumber">
            The current pass number.
            </param>
            <param name="document">
            The parsed representation of the file.
            </param>
            <returns>
            Returns false if no further parsing should be done on this file.
            </returns>
        </member>
        <member name="T:StyleCop.DocumentAnalysisStatus">
            <summary>
            Keeps track of the analysis status for a single code document.
            </summary>
        </member>
        <member name="F:StyleCop.DocumentAnalysisStatus.complete">
            <summary>
            Indicates whether the analysis is complete.
            </summary>
        </member>
        <member name="F:StyleCop.DocumentAnalysisStatus.document">
            <summary>
            The document being parsed.
            </summary>
        </member>
        <member name="F:StyleCop.DocumentAnalysisStatus.initialized">
            <summary>
            Indicates whether the contents of the class have been initialized.
            </summary>
        </member>
        <member name="P:StyleCop.DocumentAnalysisStatus.Complete">
            <summary>
            Gets or sets a value indicating whether the analysis for this file is complete.
            </summary>
        </member>
        <member name="P:StyleCop.DocumentAnalysisStatus.Document">
            <summary>
            Gets or sets the document being parsed.
            </summary>
        </member>
        <member name="P:StyleCop.DocumentAnalysisStatus.Initialized">
            <summary>
            Gets or sets a value indicating whether the contents of the class have been initialized.
            </summary>
        </member>
        <member name="T:StyleCop.ICodeElement">
            <summary>
            An interface implemented by types that describes an element within a code document.
            </summary>
        </member>
        <member name="P:StyleCop.ICodeElement.ChildCodeElements">
            <summary>
            Gets the collection of child elements beneath this element.
            </summary>
        </member>
        <member name="P:StyleCop.ICodeElement.Document">
            <summary>
            Gets the document that contains the code part.
            </summary>
        </member>
        <member name="P:StyleCop.ICodeElement.FullyQualifiedName">
            <summary>
            Gets the fully qualified name of the element.
            </summary>
        </member>
        <member name="P:StyleCop.ICodeElement.LineNumber">
            <summary>
            Gets the line number that this code part appears on in the document.
            </summary>
        </member>
        <member name="P:StyleCop.ICodeElement.Violations">
            <summary>
            Gets the violations found in this element.
            </summary>
        </member>
        <member name="M:StyleCop.ICodeElement.AddViolation(StyleCop.Violation)">
            <summary>
            Adds one violation to this element.
            </summary>
            <param name="violation">
            The violation to add.
            </param>
            <returns>
            Returns false if there is already an identical violation in the element.
            </returns>
        </member>
        <member name="M:StyleCop.ICodeElement.ClearAnalyzerTags">
            <summary>
            Clears the analyzer tags for this element.
            </summary>
            <remarks>This method should only be called by the StyleCop framework.</remarks>
        </member>
        <member name="T:StyleCop.LegacyEnumeratorAdapter`1">
            <summary>
            Adapts an enumerable collection from one format to another.
            </summary>
            <typeparam name="T">
            The type of the elements enumerated over.
            </typeparam>
        </member>
        <member name="F:StyleCop.LegacyEnumeratorAdapter`1.innerEnumerator">
            <summary>
            The enumerable collection that is wrapped by this class.
            </summary>
        </member>
        <member name="M:StyleCop.LegacyEnumeratorAdapter`1.#ctor(System.Collections.IEnumerator)">
            <summary>
            Initializes a new instance of the <see cref="T:StyleCop.LegacyEnumeratorAdapter`1"/> class. 
            Initializes a new instance of the LegacyEnumeratorAdapter class.
            </summary>
            <param name="enumerator">
            The enumerator to wrap.
            </param>
        </member>
        <member name="P:StyleCop.LegacyEnumeratorAdapter`1.InnerEnumerator">
            <summary>
            Gets the inner enumerator wrapped by this adapter.
            </summary>
        </member>
        <member name="P:StyleCop.LegacyEnumeratorAdapter`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current item.
            </summary>
        </member>
        <member name="P:StyleCop.LegacyEnumeratorAdapter`1.System#Collections#Generic#IEnumerator{T}#Current">
            <summary>
            Gets the current item.
            </summary>
        </member>
        <member name="M:StyleCop.LegacyEnumeratorAdapter`1.Dispose">
            <summary>
            Disposes the contents of the class.
            </summary>
        </member>
        <member name="M:StyleCop.LegacyEnumeratorAdapter`1.System#Collections#IEnumerator#MoveNext">
            <summary>
            Moves to the next item.
            </summary>
            <returns>Returns false if there are no more items.</returns>
        </member>
        <member name="M:StyleCop.LegacyEnumeratorAdapter`1.System#Collections#IEnumerator#Reset">
            <summary>
            Resets the enumerator.
            </summary>
        </member>
        <member name="T:StyleCop.FileBasedEnvironment">
            <summary>
            An environment which interacts with files on disk.
            </summary>
        </member>
        <member name="F:StyleCop.FileBasedEnvironment.fileTypes">
            <summary>
            The list of file types and their associated parsers.
            </summary>
        </member>
        <member name="F:StyleCop.FileBasedEnvironment.defaultSettingsFilePath">
            <summary>
            The path to the default settings file, if any.
            </summary>
        </member>
        <member name="P:StyleCop.FileBasedEnvironment.SupportsLinkedSettings">
            <summary>
            Gets a value indicating whether the environment supports settings documents
            which link directly to another settings document to merge with.
            </summary>
        </member>
        <member name="P:StyleCop.FileBasedEnvironment.SupportsResultsCache">
            <summary>
            Gets a value indicating whether the environment supports the use
            of the results cache.
            </summary>
        </member>
        <member name="M:StyleCop.FileBasedEnvironment.AddParser(StyleCop.SourceParser)">
            <summary>
            Invoked when a new parser is loaded.
            </summary>
            <param name="parser">
            The new parser.
            </param>
        </member>
        <member name="M:StyleCop.FileBasedEnvironment.AddSourceCode(StyleCop.CodeProject,System.String,System.Object)">
            <summary>
            Adds a source code document to the given project.
            </summary>
            <param name="project">
            The project which should contain the source code instance.
            </param>
            <param name="path">
            The path to the source code document to add.
            </param>
            <param name="context">
            Optional context information.
            </param>
            <returns>
            Returns true if any source code documents were added to the project.
            </returns>
        </member>
        <member name="M:StyleCop.FileBasedEnvironment.GetDefaultSettingsPath">
            <summary>
            Gets the path to the default settings file for the currently running StyleCop installation.
            </summary>
            <returns>Returns the path or an empty string if there is none.</returns>
        </member>
        <member name="M:StyleCop.FileBasedEnvironment.GetParentSettingsPath(System.String)">
            <summary>
            Given the path to a settings document, determines the path to a parent settings file, if one exists.
            </summary>
            <param name="settingsPath">
            The path to the local settings document.
            </param>
            <returns>
            Returns the path to the parent settings document or null if none exists.
            </returns>
        </member>
        <member name="M:StyleCop.FileBasedEnvironment.GetParsersForFileType(System.String)">
            <summary>
            Gets the collection of parsers registered for the given file extension.
            </summary>
            <param name="fileType">
            The file extension.
            </param>
            <returns>
            Returns the parsers for the file extension.
            </returns>
        </member>
        <member name="M:StyleCop.FileBasedEnvironment.GetProjectSettings(StyleCop.CodeProject,System.Boolean,System.Exception@)">
            <summary>
            Gets the settings for the given project.
            </summary>
            <param name="project">
            The project containing the settings.
            </param>
            <param name="merge">
            Indicates whether to merge the settings with parent settings before returning them.
            </param>
            <param name="exception">
            Returns an exception if one occurred while loading the settings.
            </param>
            <returns>
            Returns the settings.
            </returns>
        </member>
        <member name="M:StyleCop.FileBasedEnvironment.GetSettings(System.String,System.Boolean,System.Exception@)">
            <summary>
            Gets the settings given the path to the local settings.
            </summary>
            <param name="settingsPath">
            The path to the settings to load.
            </param>
            <param name="merge">
            Indicates whether to merge the settings with parent settings before returning them.
            </param>
            <param name="exception">
            Returns an exception if one occurred while loading the settings.
            </param>
            <returns>
            Returns the settings.
            </returns>
        </member>
        <member name="M:StyleCop.FileBasedEnvironment.GetWritableSettings(System.String,System.Exception@)">
            <summary>
            Loads or creates the settings at the given path, and returns them in writable mode.
            </summary>
            <param name="settingsPath">
            The path to the settings.
            </param>
            <param name="exception">
            Returns an exception if one occurred loading or creating the settings.
            </param>
            <returns>
            Returns the settings.
            </returns>
        </member>
        <member name="M:StyleCop.FileBasedEnvironment.LoadResultsCache(System.String)">
            <summary>
            Loads the results cache at the given location.
            </summary>
            <param name="location">
            The location of the results cache to load.
            </param>
            <returns>
            Returns the results cache or null if there is no results cache at that location.
            </returns>
        </member>
        <member name="M:StyleCop.FileBasedEnvironment.RemoveAnalysisResults(System.String)">
            <summary>
            Removes the analysis results at the given location.
            </summary>
            <param name="location">
            The location of the analysis results to remove.
            </param>
        </member>
        <member name="M:StyleCop.FileBasedEnvironment.SaveAnalysisResults(System.String,System.Xml.XmlDocument,System.Exception@)">
            <summary>
            Saves the analysis results at the given location.
            </summary>
            <param name="location">
            The path to save the results under.
            </param>
            <param name="analysisResults">
            The results to save.
            </param>
            <param name="exception">
            Returns an exception if one occurs while saving the results.
            </param>
            <returns>
            Returns true if the results were saved successfully.
            </returns>
        </member>
        <member name="M:StyleCop.FileBasedEnvironment.SaveResultsCache(System.String,System.Xml.XmlDocument)">
            <summary>
            Saves the given results cache.
            </summary>
            <param name="location">
            The location to save the results cache under.
            </param>
            <param name="resultsCache">
            The results cache to save.
            </param>
        </member>
        <member name="M:StyleCop.FileBasedEnvironment.SaveSettings(StyleCop.WritableSettings,System.Exception@)">
            <summary>
            Saves the settings file at the path specified within the settings document.
            </summary>
            <param name="settings">
            The settings to save.
            </param>
            <param name="exception">
            If the document could not be saved, this returns the 
            resulting exception information.
            </param>
            <returns>
            Returns true if the file was successfully saved.
            </returns>
        </member>
        <member name="M:StyleCop.FileBasedEnvironment.CreateCodeFile(System.String,StyleCop.CodeProject,StyleCop.SourceParser,System.Object)">
            <summary>
            Creates a new <see cref="T:StyleCop.CodeFile"/> instance with the given values.
            </summary>
            <param name="path">
            The path to the code file.
            </param>
            <param name="project">
            The project that contains this file.
            </param>
            <param name="parser">
            The parser that created this file object.
            </param>
            <param name="context">
            Optional context information.
            </param>
            <returns>
            Returns the newly created <see cref="T:StyleCop.CodeFile"/>.
            </returns>
        </member>
        <member name="M:StyleCop.FileBasedEnvironment.GetResultsCachePath(System.String)">
            <summary>
            Gets the expected full path for a cache file
            </summary>
            <param name="location">
            The location on which to base the cache file path
            </param>
            <returns>
            The expected path for the cache file
            </returns>
        </member>
        <member name="M:StyleCop.FileBasedEnvironment.CreateSettingsDocument(System.String,System.Exception@)">
            <summary>
            Creates an empty settings file at the given path.
            </summary>
            <param name="path">
            The path to the document to create.
            </param>
            <param name="exception">
            If the document could not be created, this returns the 
            resulting exception information.
            </param>
            <returns>
            Returns the document if it was successfully saved.
            </returns>
        </member>
        <member name="M:StyleCop.FileBasedEnvironment.LoadSettingsDocument(System.String,System.Boolean,System.Exception@)">
            <summary>
            Loads the settings file at the given path.
            </summary>
            <param name="settingsFilePath">
            The path to the settings file.
            </param>
            <param name="readOnly">
            Indicates whether a read-only document should be returned.
            </param>
            <param name="exception">
            If the document could not be loaded, this returns the 
            resulting exception information.
            </param>
            <returns>
            Returns the settings if they could be loaded.
            </returns>
        </member>
        <member name="T:StyleCop.SourceFileListSettings">
            <summary>
            Represents a collection of named source files which has specific settings applied to them.
            </summary>
        </member>
        <member name="F:StyleCop.SourceFileListSettings.files">
            <summary>
            The collection of files in the file list.
            </summary>
        </member>
        <member name="M:StyleCop.SourceFileListSettings.#ctor(StyleCop.Settings)">
            <summary>
            Initializes a new instance of the SourceFileListSettings class.
            </summary>
            <param name="settings">
            The settings for this file list.
            </param>
        </member>
        <member name="P:StyleCop.SourceFileListSettings.Settings">
            <summary>
            Gets the custom settings for this file list.
            </summary>
        </member>
        <member name="P:StyleCop.SourceFileListSettings.SourceFiles">
            <summary>
            Gets the collection of files in the file list.
            </summary>
        </member>
        <member name="M:StyleCop.SourceFileListSettings.ContainsFile(System.String)">
            <summary>
            Determines whether the given file exists within the file list.
            </summary>
            <param name="fileName">
            The name of the file.
            </param>
            <returns>
            true if the file exists; false otherwise.
            </returns>
        </member>
        <member name="M:StyleCop.SourceFileListSettings.AddFile(System.String)">
            <summary>
            Adds a file to the file list.
            </summary>
            <param name="fileName">
            The name of the file to add.
            </param>
        </member>
        <member name="T:StyleCop.V104Settings">
            <summary>
            Loads settings from a version 4.3 settings document.
            </summary>
        </member>
        <member name="T:StyleCop.V104Settings.PropertyType">
            <summary>
            The types of settings properties.
            </summary>
        </member>
        <member name="F:StyleCop.V104Settings.PropertyType.Boolean">
            <summary>
            A property containing a boolean value.
            </summary>
        </member>
        <member name="F:StyleCop.V104Settings.PropertyType.Integer">
            <summary>
            A property containing an integer value.
            </summary>
        </member>
        <member name="F:StyleCop.V104Settings.PropertyType.String">
            <summary>
            A property containing a string value.
            </summary>
        </member>
        <member name="F:StyleCop.V104Settings.PropertyType.Collection">
            <summary>
            A property containing a collection of properties.
            </summary>
        </member>
        <member name="F:StyleCop.V104Settings.PropertyType.None">
            <summary>
            Not a valid property.
            </summary>
        </member>
        <member name="M:StyleCop.V104Settings.Load(System.Xml.XmlDocument,StyleCop.Settings)">
            <summary>
            Loads the settings from the document.
            </summary>
            <param name="document">
            The settings document.
            </param>
            <param name="settings">
            Stores the settings.
            </param>
        </member>
        <member name="M:StyleCop.V104Settings.Load(System.Xml.XmlNode,StyleCop.Settings)">
            <summary>
            Loads the settings from the document.
            </summary>
            <param name="documentRoot">
            The root node of the settings document.
            </param>
            <param name="settings">
            Stores the settings.
            </param>
        </member>
        <member name="M:StyleCop.V104Settings.ConvertLegacyAddInName(System.String)">
            <summary>
            Converts a legacy "Microsoft.SourceAnalysis" or "Microsoft.StyleCop" AddIn name to the new name.
            </summary>
            <param name="addInName">
            The original name.
            </param>
            <returns>
            Returns the converted name.
            </returns>
        </member>
        <member name="M:StyleCop.V104Settings.DeterminePropertyNodeType(System.String)">
            <summary>
            Determines the type of property represented by the property type name.
            </summary>
            <param name="propertyType">
            The property type name.
            </param>
            <returns>
            Returns the well-known property type.
            </returns>
        </member>
        <member name="M:StyleCop.V104Settings.LoadAnalyzerSettings(System.Xml.XmlNode,StyleCop.Settings)">
            <summary>
            Loads analyzer settings from the document.
            </summary>
            <param name="documentRoot">
            The root node of the settings document.
            </param>
            <param name="settings">
            Stores the settings.
            </param>
        </member>
        <member name="M:StyleCop.V104Settings.LoadBooleanProperty(System.String,System.Xml.XmlNode,StyleCop.PropertyCollection,StyleCop.PropertyDescriptorCollection)">
            <summary>
            Loads and stores a boolean property.
            </summary>
            <param name="propertyName">
            The name of the property to load.
            </param>
            <param name="propertyNode">
            The node containing the property.
            </param>
            <param name="properties">
            The collection in which to store the property.
            </param>
            <param name="propertyDescriptors">
            The collection of property descriptors.
            </param>
        </member>
        <member name="M:StyleCop.V104Settings.LoadCollectionProperty(System.String,System.Xml.XmlNode,StyleCop.PropertyCollection,StyleCop.PropertyDescriptorCollection)">
            <summary>
            Loads and stores a collection property.
            </summary>
            <param name="propertyName">
            The name of the property to load.
            </param>
            <param name="propertyNode">
            The node containing the property.
            </param>
            <param name="properties">
            The collection in which to store the property.
            </param>
            <param name="propertyDescriptors">
            The collection of property descriptors.
            </param>
        </member>
        <member name="M:StyleCop.V104Settings.LoadFileLists(System.Xml.XmlNode,StyleCop.Settings)">
            <summary>
            Loads files specified in file lists.
            </summary>
            <param name="documentRoot">
            The root node of the settings document.
            </param>
            <param name="settings">
            Stores the settings.
            </param>
        </member>
        <member name="M:StyleCop.V104Settings.LoadIntProperty(System.String,System.Xml.XmlNode,StyleCop.PropertyCollection,StyleCop.PropertyDescriptorCollection)">
            <summary>
            Loads and stores an integer property.
            </summary>
            <param name="propertyName">
            The name of the property to load.
            </param>
            <param name="propertyNode">
            The node containing the property.
            </param>
            <param name="properties">
            The collection in which to store the property.
            </param>
            <param name="propertyDescriptors">
            The collection of property descriptors.
            </param>
        </member>
        <member name="M:StyleCop.V104Settings.LoadParserSettings(System.Xml.XmlNode,StyleCop.Settings)">
            <summary>
            Loads parser settings from the document.
            </summary>
            <param name="documentRoot">
            The root node of the settings document.
            </param>
            <param name="settings">
            Stores the settings.
            </param>
        </member>
        <member name="M:StyleCop.V104Settings.LoadPropertyCollection(System.Xml.XmlNode,StyleCop.PropertyCollection,StyleCop.PropertyDescriptorCollection,System.String)">
            <summary>
            Loads a property collection from the settings file.
            </summary>
            <param name="propertyCollectionNode">
            The node containing the property collection.
            </param>
            <param name="properties">
            The property collection storage object.
            </param>
            <param name="propertyDescriptors">
            The collection of property descriptors.
            </param>
            <param name="ruleName">
            An optional rule name to prepend the each property name.
            </param>
        </member>
        <member name="M:StyleCop.V104Settings.LoadRulesSettings(System.Xml.XmlNode,StyleCop.PropertyCollection,StyleCop.PropertyDescriptorCollection)">
            <summary>
            Loads settings for rules.
            </summary>
            <param name="addInNode">
            The add-in containing the rules.
            </param>
            <param name="properties">
            The collection of properties to add the rules settings into.
            </param>
            <param name="propertyDescriptors">
            The collection of property descriptors for the add-in.
            </param>
        </member>
        <member name="M:StyleCop.V104Settings.LoadStringProperty(System.String,System.Xml.XmlNode,StyleCop.PropertyCollection,StyleCop.PropertyDescriptorCollection)">
            <summary>
            Loads and stores a string property.
            </summary>
            <param name="propertyName">
            The name of the property to load.
            </param>
            <param name="propertyNode">
            The node containing the property.
            </param>
            <param name="properties">
            The collection in which to store the property.
            </param>
            <param name="propertyDescriptors">
            The collection of property descriptors.
            </param>
        </member>
        <member name="T:StyleCop.V102Settings">
            <summary>
            Loads settings from a version 4.1 settings document.
            </summary>
        </member>
        <member name="M:StyleCop.V102Settings.ChangeAnalyzerSettingName(System.Xml.XmlDocument,System.String,System.String,System.String)">
            <summary>
            Changes the name of an analyzer setting property, if it exists.
            </summary>
            <param name="document">
            The settings document.
            </param>
            <param name="analyzerName">
            The analyzer name.
            </param>
            <param name="legacyPropertyName">
            The legacy name of the property.
            </param>
            <param name="newPropertyName">
            The new name of the property.
            </param>
        </member>
        <member name="M:StyleCop.V102Settings.Load(System.Xml.XmlDocument,StyleCop.Settings)">
            <summary>
            Loads the settings from the document.
            </summary>
            <param name="document">
            The settings document.
            </param>
            <param name="settings">
            Stores the settings.
            </param>
        </member>
        <member name="M:StyleCop.V102Settings.AddBooleanProperty(System.String,System.Boolean,StyleCop.PropertyCollection,StyleCop.PropertyDescriptorCollection)">
            <summary>
            Adds a boolean property.
            </summary>
            <param name="propertyName">
            The name of the property.
            </param>
            <param name="value">
            The property value.
            </param>
            <param name="properties">
            The collection of properties.
            </param>
            <param name="propertyDescriptors">
            The collection of property descriptors.
            </param>
        </member>
        <member name="M:StyleCop.V102Settings.AddOrUpdateLegacyBooleanProperty(System.String,System.Boolean,StyleCop.PropertyCollection,StyleCop.PropertyDescriptorCollection)">
            <summary>
            Adds or updates a property to enable or disable a rule depending on the value of a 
            legacy property.
            </summary>
            <param name="ruleName">
            The name of the rule to enable or disable.
            </param>
            <param name="value">
            The value of the legacy property.
            </param>
            <param name="properties">
            The collection of properties.
            </param>
            <param name="propertyDescriptors">
            The collection of property descriptors.
            </param>
        </member>
        <member name="M:StyleCop.V102Settings.LoadAnalyzerSettings(System.Xml.XmlDocument,StyleCop.Settings)">
            <summary>
            Loads analyzer settings from the document.
            </summary>
            <param name="document">
            The settings document.
            </param>
            <param name="settings">
            Stores the settings.
            </param>
        </member>
        <member name="M:StyleCop.V102Settings.LoadBooleanProperty(System.String,System.Xml.XmlNode,StyleCop.PropertyCollection,StyleCop.PropertyDescriptorCollection,System.String)">
            <summary>
            Loads and stores a boolean property.
            </summary>
            <param name="propertyName">
            The name of the property to load.
            </param>
            <param name="propertyNode">
            The node containing the property.
            </param>
            <param name="properties">
            The collection in which to store the property.
            </param>
            <param name="propertyDescriptors">
            The collection of property descriptors.
            </param>
            <param name="legacyAnalyzerId">
            If the settings node comes from a legacy, pre-4.2 analyzer,
            this parameter contains the ID of the legacy analyzer.
            </param>
        </member>
        <member name="M:StyleCop.V102Settings.LoadCollectionProperty(System.String,System.Xml.XmlNode,StyleCop.PropertyCollection,StyleCop.PropertyDescriptorCollection)">
            <summary>
            Loads and stores a collection property.
            </summary>
            <param name="propertyName">
            The name of the property to load.
            </param>
            <param name="propertyNode">
            The node containing the property.
            </param>
            <param name="properties">
            The collection in which to store the property.
            </param>
            <param name="propertyDescriptors">
            The collection of property descriptors.
            </param>
        </member>
        <member name="M:StyleCop.V102Settings.LoadIntProperty(System.String,System.Xml.XmlNode,StyleCop.PropertyCollection,StyleCop.PropertyDescriptorCollection)">
            <summary>
            Loads and stores an integer property.
            </summary>
            <param name="propertyName">
            The name of the property to load.
            </param>
            <param name="propertyNode">
            The node containing the property.
            </param>
            <param name="properties">
            The collection in which to store the property.
            </param>
            <param name="propertyDescriptors">
            The collection of property descriptors.
            </param>
        </member>
        <member name="M:StyleCop.V102Settings.LoadParserSettings(System.Xml.XmlDocument,StyleCop.Settings)">
            <summary>
            Loads parser settings from the document.
            </summary>
            <param name="document">
            The settings document.
            </param>
            <param name="settings">
            Stores the settings.
            </param>
        </member>
        <member name="M:StyleCop.V102Settings.LoadPropertyCollection(System.Xml.XmlNode,StyleCop.PropertyCollection,StyleCop.PropertyDescriptorCollection,System.String)">
            <summary>
            Loads a property collection from the settings file.
            </summary>
            <param name="propertyCollectionNode">
            The node containing the property collection.
            </param>
            <param name="properties">
            The property collection storage object.
            </param>
            <param name="propertyDescriptors">
            The collection of property descriptors.
            </param>
            <param name="legacyAnalyzerId">
            If the settings node comes from a legacy, pre-4.2 analyzer,
            this parameter contains the ID of the legacy analyzer.
            </param>
        </member>
        <member name="M:StyleCop.V102Settings.LoadRulesSettings(System.Xml.XmlNode,StyleCop.PropertyCollection,StyleCop.PropertyDescriptorCollection)">
            <summary>
            Loads settings for rules.
            </summary>
            <param name="addInNode">
            The add-in containing the rules.
            </param>
            <param name="properties">
            The collection of properties to add the rules settings into.
            </param>
            <param name="propertyDescriptors">
            The collection of property descriptors for the add-in.
            </param>
        </member>
        <member name="M:StyleCop.V102Settings.LoadStringProperty(System.String,System.Xml.XmlNode,StyleCop.PropertyCollection,StyleCop.PropertyDescriptorCollection)">
            <summary>
            Loads and stores a string property.
            </summary>
            <param name="propertyName">
            The name of the property to load.
            </param>
            <param name="propertyNode">
            The node containing the property.
            </param>
            <param name="properties">
            The collection in which to store the property.
            </param>
            <param name="propertyDescriptors">
            The collection of property descriptors.
            </param>
        </member>
        <member name="M:StyleCop.V102Settings.MapAnalyzerId(System.String)">
            <summary>
            Maps a 4.1 analyzer ID to a 4.3 analyzer ID.
            </summary>
            <param name="analyzerId">
            The ID of the 4.1 analyzer.
            </param>
            <returns>
            Returns the 4.3 analyzer ID.
            </returns>
        </member>
        <member name="M:StyleCop.V102Settings.MapAnalyzerToRules(System.String)">
            <summary>
            Maps the given 4.1 analyzer name to a list of 4.3 rules.
            </summary>
            <param name="analyzerId">
            The ID of the 4.1 analyzer.
            </param>
            <returns>
            Returns the collection of 4.3 rules mapping to the analyzer.
            </returns>
        </member>
        <member name="T:StyleCop.V103Settings">
            <summary>
            Loads settings from a version 4.2 settings document.
            </summary>
        </member>
        <member name="M:StyleCop.V103Settings.Load(System.Xml.XmlDocument,StyleCop.Settings)">
            <summary>
            Loads the settings from the document.
            </summary>
            <param name="document">
            The settings document.
            </param>
            <param name="settings">
            Stores the settings.
            </param>
        </member>
        <member name="M:StyleCop.V103Settings.MoveRuleToNewAnalyzer(System.Xml.XmlDocument,System.String,System.String,System.String)">
            <summary>
            Moves a rule from one analyzer node to a different analyzer node.
            </summary>
            <param name="document">
            The settings document.
            </param>
            <param name="legacyAnalyzerName">
            The legacy analyzer name.
            </param>
            <param name="newAnalyzerName">
            The new analyzer name.
            </param>
            <param name="ruleName">
            The name of the rule to move.
            </param>
        </member>
        <member name="T:StyleCop.IPropertyContainer">
            <summary>
            Contains a collection of properties.
            </summary>
        </member>
        <member name="P:StyleCop.IPropertyContainer.PropertyDescriptors">
            <summary>
            Gets the collection of property descriptors.
            </summary>
        </member>
        <member name="T:StyleCop.ResultsCache">
            <summary>
            Handles saving and loading file data from the cache.
            </summary>
        </member>
        <member name="F:StyleCop.ResultsCache.Version">
            <summary>
            The current file cache version.
            </summary>
        </member>
        <member name="F:StyleCop.ResultsCache.TimestampFormat">
            <summary>
            The DateTime format we use for the results cache.
            </summary>
        </member>
        <member name="F:StyleCop.ResultsCache.core">
            <summary>
            The StyleCop core instance.
            </summary>
        </member>
        <member name="F:StyleCop.ResultsCache.documentHash">
            <summary>
            The dictionary to store the cached documents in.
            </summary>
        </member>
        <member name="M:StyleCop.ResultsCache.#ctor(StyleCop.StyleCopCore)">
            <summary>
            Initializes a new instance of the ResultsCache class.
            </summary>
            <param name="core">
            The StyleCop core instance.
            </param>
        </member>
        <member name="M:StyleCop.ResultsCache.Flush">
            <summary>
            Saves the cached results.
            </summary>
        </member>
        <member name="M:StyleCop.ResultsCache.LoadProject(StyleCop.CodeProject)">
            <summary>
            Loads the given project from the cache.
            </summary>
            <param name="project">
            The project to load.
            </param>
            <returns>
            Returns the project configuration or null if the 
            project does not exist in the cache.
            </returns>
        </member>
        <member name="M:StyleCop.ResultsCache.LoadResults(StyleCop.SourceCode,StyleCop.SourceParser,System.DateTime,System.DateTime)">
            <summary>
            Loads results for the given source code document from the cache.
            </summary>
            <param name="sourceCode">
            The source code to load.
            </param>
            <param name="parser">
            The parser that created this document.
            </param>
            <param name="writeTime">
            The last write time of the document.
            </param>
            <param name="settingsTimestamp">
            The time when the settings were last updated.
            </param>
            <returns>
            Returns true if the results were loaded from the cache.
            </returns>
        </member>
        <member name="M:StyleCop.ResultsCache.SaveDocumentResults(StyleCop.CodeDocument,StyleCop.SourceParser,System.DateTime)">
            <summary>
            Saves the given code document results into a cache document.
            </summary>
            <param name="document">
            The document to save.
            </param>
            <param name="parser">
            The parser that created the document.
            </param>
            <param name="settingsTimeStamp">
            The time when the settings were last updated.
            </param>
            <returns>
            Returns true if the document was saved.
            </returns>
        </member>
        <member name="M:StyleCop.ResultsCache.SaveProject(StyleCop.CodeProject)">
            <summary>
            Saves the given code project configuration into a cache document.
            </summary>
            <param name="project">
            The project to save.
            </param>
            <returns>
            Returns true if the configuration was saved.
            </returns>
        </member>
        <member name="M:StyleCop.ResultsCache.IsNodeUpToDate(System.Xml.XmlNode,System.DateTime)">
            <summary>
            Determines whether the timestamp information contained in the given
            node is equal to the given timestamp.
            </summary>
            <param name="node">
            The node containing the timestamp information.
            </param>
            <param name="timestamp">
            The time to match again.
            </param>
            <returns>
            Returns true if the node matches the given timestamp.
            </returns>
        </member>
        <member name="M:StyleCop.ResultsCache.IsNodeUpToDate(System.Xml.XmlNode,System.Int32)">
            <summary>
            Determines whether the timestamp information contained in the given
            node is equal to the given timestamp.
            </summary>
            <param name="node">
            The node containing the timestamp information.
            </param>
            <param name="hashCode">
            The time to match again.
            </param>
            <returns>
            Returns true if the node matches the given timestamp.
            </returns>
        </member>
        <member name="M:StyleCop.ResultsCache.AddHashCodeToXml(System.Xml.XmlDocument,System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            Adds an xml element to the xmlNode containing the Timestamp provided.
            </summary>
            <param name="xml">
            The XmlDocument to use.
            </param>
            <param name="xmlNode">
            The XmlNode to add the element under.
            </param>
            <param name="nodeName">
            The name to use for the element being created.
            </param>
            <param name="hashCode">
            The hashCode to write into the node.
            </param>
        </member>
        <member name="M:StyleCop.ResultsCache.AddTimestampToXml(System.Xml.XmlDocument,System.Xml.XmlNode,System.String,System.DateTime)">
            <summary>
            Adds an xml element to the xmlNode containing the Timestamp provided.
            </summary>
            <param name="xml">
            The XmlDocument to use.
            </param>
            <param name="xmlNode">
            The XmlNode to add the element under.
            </param>
            <param name="nodeName">
            The name to use for the element being created.
            </param>
            <param name="timestamp">
            The DateTime to write into the node.
            </param>
        </member>
        <member name="M:StyleCop.ResultsCache.OpenCacheProject(StyleCop.CodeProject,System.Xml.XmlNode@)">
            <summary>
            Opens the results cache for the given code project.
            </summary>
            <param name="project">
            The code project.
            </param>
            <param name="projectNode">
            Returns the node from the results cache for this code project.
            </param>
            <returns>
            Returns the results cache.
            </returns>
        </member>
        <member name="M:StyleCop.ResultsCache.OpenResultsCache(StyleCop.SourceCode,StyleCop.SourceParser,System.Xml.XmlNode@)">
            <summary>
            Opens the results cache for the given source code document.
            </summary>
            <param name="sourceCode">
            The source code document.
            </param>
            <param name="parser">
            The parser that created the document.
            </param>
            <param name="item">
            Returns the node from the results cache for this code document.
            </param>
            <returns>
            Returns the results cache.
            </returns>
        </member>
        <member name="T:StyleCop.AddInPropertyCollection">
            <summary>
            A set of properties for a StyleCop add-in.
            </summary>
        </member>
        <member name="F:StyleCop.AddInPropertyCollection.addIn">
            <summary>
            The analyzer or parser add-in.
            </summary>
        </member>
        <member name="M:StyleCop.AddInPropertyCollection.#ctor(StyleCop.StyleCopAddIn)">
            <summary>
            Initializes a new instance of the AddInPropertyCollection class.
            </summary>
            <param name="addIn">
            An analyzer or parser add-in.
            </param>
        </member>
        <member name="P:StyleCop.AddInPropertyCollection.AddIn">
            <summary>
            Gets the StyleCop add-in.
            </summary>
        </member>
        <member name="M:StyleCop.AddInPropertyCollection.Clone">
            <summary>
            Clones the contents of the collection.
            </summary>
            <returns>Returns the cloned collection.</returns>
        </member>
        <member name="T:StyleCop.CollectionPropertyDescriptor">
            <summary>
            A property descriptor for a collection property.
            </summary> 
        </member>
        <member name="F:StyleCop.CollectionPropertyDescriptor.aggregate">
            <summary>
            Indicates whether the collection is an aggregate collection.
            </summary>
        </member>
        <member name="M:StyleCop.CollectionPropertyDescriptor.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CollectionPropertyDescriptor class.
            </summary>
            <param name="propertyName">
            The name of the property.
            </param>
            <param name="friendlyName">
            The friendly name of the property.
            </param>
            <param name="description">
            The property description.
            </param>
            <param name="merge">
            Indicates whether to merge the property with parent properties.
            </param>
            <param name="aggregate">
            Indicates whether the collection is an aggregate collection.
            </param>
        </member>
        <member name="P:StyleCop.CollectionPropertyDescriptor.Aggregate">
            <summary>
            Gets a value indicating whether the collection is an aggregate collection.
            </summary>
        </member>
        <member name="T:StyleCop.PropertyDescriptor">
            <summary>
            A property descriptor.
            </summary> 
        </member>
        <member name="F:StyleCop.PropertyDescriptor.description">
            <summary>
            The description of the property.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyDescriptor.displaySettings">
            <summary>
            Indicates whether to display the property on the settings dialog by default.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyDescriptor.friendlyName">
            <summary>
            The friendly name of the property.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyDescriptor.merge">
            <summary>
            Indicates whether to merge the property with parent properties.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyDescriptor.propertyName">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyDescriptor.propertyType">
            <summary>
            The type of the property.
            </summary>
        </member>
        <member name="M:StyleCop.PropertyDescriptor.#ctor(System.String,StyleCop.PropertyType,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PropertyDescriptor class.
            </summary>
            <param name="propertyName">
            The name of the property.
            </param>
            <param name="propertyType">
            The type of the property.
            </param>
            <param name="friendlyName">
            The friendly name of the property.
            </param>
            <param name="description">
            The property description.
            </param>
            <param name="merge">
            Indicates whether to merge the property with parent properties.
            </param>
            <param name="displaySettings">
            Indicates whether to display the property on the settings dialog.
            </param>
        </member>
        <member name="P:StyleCop.PropertyDescriptor.Description">
            <summary>
            Gets the description of the property.
            </summary>
        </member>
        <member name="P:StyleCop.PropertyDescriptor.DisplaySettings">
            <summary>
            Gets a value indicating whether to display the property on the settings dialog by default.
            </summary>
        </member>
        <member name="P:StyleCop.PropertyDescriptor.FriendlyName">
            <summary>
            Gets the friendly name of the property.
            </summary>
        </member>
        <member name="P:StyleCop.PropertyDescriptor.Merge">
            <summary>
            Gets a value indicating whether to merge the property with parent properties.
            </summary>
        </member>
        <member name="P:StyleCop.PropertyDescriptor.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
        </member>
        <member name="P:StyleCop.PropertyDescriptor.PropertyType">
            <summary>
            Gets the type of the property.
            </summary>
        </member>
        <member name="T:StyleCop.PropertyDescriptorCollection">
            <summary>
            Contains a collection of property descriptors.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyDescriptorCollection.propertyDescriptors">
            <summary>
            The properties.
            </summary>
        </member>
        <member name="M:StyleCop.PropertyDescriptorCollection.#ctor">
            <summary>
            Initializes a new instance of the PropertyDescriptorCollection class.
            </summary>
        </member>
        <member name="P:StyleCop.PropertyDescriptorCollection.Count">
            <summary>
            Gets the number of property descriptors in the collection.
            </summary>
        </member>
        <member name="P:StyleCop.PropertyDescriptorCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:StyleCop.PropertyDescriptorCollection.PropertyDescriptors">
            <summary>
            Gets the collection of property descriptors.
            </summary>
        </member>
        <member name="P:StyleCop.PropertyDescriptorCollection.PropertyNames">
            <summary>
            Gets the collection of property names.
            </summary>
        </member>
        <member name="P:StyleCop.PropertyDescriptorCollection.Item(System.String)">
            <summary>
            Gets the property descriptor for the given property name.
            </summary>
            <param name="propertyName">
            The name of the property.
            </param>
            <returns>
            Returns the property descriptor or null if there is no property with the given name.
            </returns>
        </member>
        <member name="M:StyleCop.PropertyDescriptorCollection.Add(StyleCop.PropertyDescriptor)">
            <summary>
            Adds a property descriptor to the collection.
            </summary>
            <param name="property">
            The property descriptor to add.
            </param>
        </member>
        <member name="M:StyleCop.PropertyDescriptorCollection.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:StyleCop.PropertyDescriptorCollection.Contains(StyleCop.PropertyDescriptor)">
            <summary>
            Determines whether the given property descriptor is contained in the collection.
            </summary>
            <param name="item">
            The property descriptor to search for.
            </param>
            <returns>
            Returns true if the property descriptor is contained within the collection.
            </returns>
        </member>
        <member name="M:StyleCop.PropertyDescriptorCollection.Contains(System.String)">
            <summary>
            Determines whether the given property descriptor is contained in the collection.
            </summary>
            <param name="propertyName">
            The property name to search for.
            </param>
            <returns>
            Returns true if the property descriptor is contained within the collection.
            </returns>
        </member>
        <member name="M:StyleCop.PropertyDescriptorCollection.CopyTo(StyleCop.PropertyDescriptor[],System.Int32)">
            <summary>
            Copies values from the collection to the given array.
            </summary>
            <param name="array">
            The array to copy the items into.
            </param>
            <param name="arrayIndex">
            The index within the array to begin copying.
            </param>
        </member>
        <member name="M:StyleCop.PropertyDescriptorCollection.GetEnumerator">
            <summary>
            Gets an enumerator for iterating through the values in the property descriptor collection.
            </summary>
            <returns>Returns the enumerator.</returns>
        </member>
        <member name="M:StyleCop.PropertyDescriptorCollection.GetPropertyDescriptor(System.String)">
            <summary>
            Gets the property descriptor for the given property.
            </summary>
            <param name="propertyName">
            The name of the property.
            </param>
            <returns>
            Returns the property descriptor for the given property, or null if the property 
            is not contained within the collection.
            </returns>
        </member>
        <member name="M:StyleCop.PropertyDescriptorCollection.Remove(StyleCop.PropertyDescriptor)">
            <summary>
            Removes the given property descriptor from the collection.
            </summary>
            <param name="property">
            The property descriptor to remove.
            </param>
            <returns>
            Returns true if the property descriptor was removed from the collection, or
            false if it did not exist in the collection.
            </returns>
        </member>
        <member name="M:StyleCop.PropertyDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for iterating through the values in the property descriptor collection.
            </summary>
            <returns>Returns the enumerator.</returns>
        </member>
        <member name="M:StyleCop.PropertyDescriptorCollection.AddPropertyDescriptor(StyleCop.PropertyDescriptor)">
            <summary>
            Adds the given descriptor to the collection.
            </summary>
            <param name="descriptor">
            The descriptor to add.
            </param>
        </member>
        <member name="M:StyleCop.PropertyDescriptorCollection.InitializeFromXml(System.Xml.XmlNode)">
            <summary>
            Initializes the contents of the collection from the given Xml.
            </summary>
            <param name="propertiesNode">
            The properties Xml node.
            </param>
        </member>
        <member name="M:StyleCop.PropertyDescriptorCollection.ExtractDescription(System.Xml.XmlNode)">
            <summary>
            Extracts and returns the property description from the given node.
            </summary>
            <param name="propertyNode">
            The property node.
            </param>
            <returns>
            Returns the property description.
            </returns>
        </member>
        <member name="M:StyleCop.PropertyDescriptorCollection.ExtractDisplaySettings(System.Xml.XmlNode)">
            <summary>
            Extracts and returns the display settings value from the given node.
            </summary>
            <param name="propertyNode">
            The property node.
            </param>
            <returns>
            Returns the display settings value.
            </returns>
        </member>
        <member name="M:StyleCop.PropertyDescriptorCollection.ExtractFriendlyName(System.Xml.XmlNode)">
            <summary>
            Extracts and returns the property friendly name from the given node.
            </summary>
            <param name="propertyNode">
            The property node.
            </param>
            <returns>
            Returns the property friendly name.
            </returns>
        </member>
        <member name="M:StyleCop.PropertyDescriptorCollection.ExtractMerge(System.Xml.XmlNode)">
            <summary>
            Extracts and returns the merge value from the given node.
            </summary>
            <param name="propertyNode">
            The property node.
            </param>
            <returns>
            Returns the merge value.
            </returns>
        </member>
        <member name="M:StyleCop.PropertyDescriptorCollection.ExtractPropertyName(System.Xml.XmlNode)">
            <summary>
            Extracts and returns the property name from the given node.
            </summary>
            <param name="propertyNode">
            The property node.
            </param>
            <returns>
            Returns the property name.
            </returns>
        </member>
        <member name="M:StyleCop.PropertyDescriptorCollection.AddBooleanPropertyDescriptor(System.Xml.XmlNode)">
            <summary>
            Adds a boolean property descriptor from the given Xml node.
            </summary>
            <param name="propertyNode">
            The node containing the property descriptor information.
            </param>
        </member>
        <member name="M:StyleCop.PropertyDescriptorCollection.AddCollectionPropertyDescriptor(System.Xml.XmlNode)">
            <summary>
            Adds a collection property descriptor from the given Xml node.
            </summary>
            <param name="propertyNode">
            The node containing the property descriptor information.
            </param>
        </member>
        <member name="M:StyleCop.PropertyDescriptorCollection.AddIntPropertyDescriptor(System.Xml.XmlNode)">
            <summary>
            Adds an integer property descriptor from the given Xml node.
            </summary>
            <param name="propertyNode">
            The node containing the property descriptor information.
            </param>
        </member>
        <member name="M:StyleCop.PropertyDescriptorCollection.AddStringPropertyDescriptor(System.Xml.XmlNode)">
            <summary>
            Adds a string property descriptor from the given Xml node.
            </summary>
            <param name="propertyNode">
            The node containing the property descriptor information.
            </param>
        </member>
        <member name="T:StyleCop.PropertyDescriptor`1">
            <summary>
            A property descriptor for a simple property.
            </summary>
            <typeparam name="T">
            The type of the property value described by the property descriptor.
            </typeparam>
        </member>
        <member name="M:StyleCop.PropertyDescriptor`1.#ctor(System.String,StyleCop.PropertyType,System.String,System.String,System.Boolean,System.Boolean,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:StyleCop.PropertyDescriptor`1"/> class. 
            Initializes a new instance of the PropertyDescriptor class.
            </summary>
            <param name="propertyName">
            The name of the property.
            </param>
            <param name="propertyType">
            The type of the property.
            </param>
            <param name="friendlyName">
            The friendly name of the property.
            </param>
            <param name="description">
            The property description.
            </param>
            <param name="merge">
            Indicates whether to merge the property with parent properties.
            </param>
            <param name="displaySettings">
            Indicates whether to display the property on the settings dialog by default.
            </param>
            <param name="defaultValue">
            The default value of the property.
            </param>
        </member>
        <member name="P:StyleCop.PropertyDescriptor`1.DefaultValue">
            <summary>
            Gets the default value of the property.
            </summary>
        </member>
        <member name="T:StyleCop.PropertyValue`1">
            <summary>
            A simple property.
            </summary>
            <typeparam name="T">
            The type of the property value.
            </typeparam>
        </member>
        <member name="F:StyleCop.PropertyValue`1.value">
            <summary>
            The value of the property.
            </summary>
        </member>
        <member name="M:StyleCop.PropertyValue`1.#ctor(StyleCop.PropertyDescriptor{`0},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:StyleCop.PropertyValue`1"/> class. 
            Initializes a new instance of the PropertyValue class.
            </summary>
            <param name="propertyDescriptor">
            The property descriptor that this value represents.
            </param>
            <param name="value">
            The value of the property.
            </param>
        </member>
        <member name="M:StyleCop.PropertyValue`1.#ctor(StyleCop.IPropertyContainer,System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:StyleCop.PropertyValue`1"/> class. 
            Initializes a new instance of the PropertyValue class.
            </summary>
            <param name="propertyContainer">
            The container of this property.
            </param>
            <param name="propertyName">
            The name of the property.
            </param>
            <param name="value">
            The value of the property.
            </param>
        </member>
        <member name="P:StyleCop.PropertyValue`1.DefaultValue">
            <summary>
            Gets the default value of the property.
            </summary>
        </member>
        <member name="P:StyleCop.PropertyValue`1.HasDefaultValue">
            <summary>
            Gets a value indicating whether the property has a default value.
            </summary>
        </member>
        <member name="P:StyleCop.PropertyValue`1.IsDefault">
            <summary>
            Gets a value indicating whether the property is currently set to the default value for the property.
            </summary>
        </member>
        <member name="P:StyleCop.PropertyValue`1.Value">
            <summary>
            Gets or sets the value of the property.
            </summary>
        </member>
        <member name="M:StyleCop.PropertyValue`1.Clone">
            <summary>
            Clones the contents of the property.
            </summary>
            <returns>Returns the cloned property.</returns>
        </member>
        <member name="M:StyleCop.PropertyValue`1.OverridesProperty(StyleCop.PropertyValue)">
            <summary>
            Determines whether this property overrides the given property.
            </summary>
            <param name="parentProperty">
            The parent property to compare with.
            </param>
            <returns>
            Returns true if this property overrides the given property.
            </returns>
        </member>
        <member name="T:StyleCop.V101Settings">
            <summary>
            Loads settings from a pre-version 4.1 settings document.
            </summary>
        </member>
        <member name="F:StyleCop.V101Settings.DefaultFileName">
            <summary>
            The default settings file name.
            </summary>
        </member>
        <member name="M:StyleCop.V101Settings.Load(System.Xml.XmlDocument,StyleCop.Settings)">
            <summary>
            Loads a pre-version 4.1 settings document.
            </summary>
            <param name="document">
            The settings to load.
            </param>
            <param name="settings">
            The object where the settings will be stored.
            </param>
        </member>
        <member name="M:StyleCop.V101Settings.AddBooleanProperty(System.String,System.Boolean,StyleCop.PropertyCollection,StyleCop.PropertyDescriptorCollection)">
            <summary>
            Adds a boolean property to the settings.
            </summary>
            <param name="propertyName">
            The name of the property.
            </param>
            <param name="value">
            The value of the property.
            </param>
            <param name="properties">
            The collection of properties.
            </param>
            <param name="propertyDescriptors">
            The collection of property descriptors.
            </param>
        </member>
        <member name="M:StyleCop.V101Settings.AddOrUpdateLegacyBooleanProperty(System.String,System.Boolean,StyleCop.PropertyCollection,StyleCop.PropertyDescriptorCollection)">
            <summary>
            Adds or updates a property to enable or disable a rule depending on the value of a 
            legacy property.
            </summary>
            <param name="ruleName">
            The name of the rule to enable or disable.
            </param>
            <param name="value">
            The value of the legacy property.
            </param>
            <param name="properties">
            The collection of properties.
            </param>
            <param name="propertyDescriptors">
            The collection of property descriptors.
            </param>
        </member>
        <member name="M:StyleCop.V101Settings.EnableDisableAnalyzerRules(System.Xml.XmlNode,StyleCop.Settings,System.Boolean)">
            <summary>
            Enables or disables all rules for the given analyzers.
            </summary>
            <param name="disabledAnalyzersNode">
            The node representing the analyzer.
            </param>
            <param name="settings">
            The settings.
            </param>
            <param name="enabled">
            Indicates whether to enable or disable the rules.
            </param>
        </member>
        <member name="M:StyleCop.V101Settings.LoadAnalyzeDesignerFilesSetting(StyleCop.Settings,System.String)">
            <summary>
            Sets the AnalyzeDesignerFiles property on the C# parser.
            </summary>
            <param name="settings">
            The settings collection.
            </param>
            <param name="nodeText">
            The text of the setting from the settings file.
            </param>
        </member>
        <member name="M:StyleCop.V101Settings.LoadAnalyzerSetting(StyleCop.Settings,System.String,System.String,System.String)">
            <summary>
            Sets the given property on the given parser.
            </summary>
            <param name="settings">
            The settings collection.
            </param>
            <param name="analyzerId">
            The ID of the analyzer.
            </param>
            <param name="propertyName">
            The name of the property to set.
            </param>
            <param name="nodeText">
            The text of the setting from the settings file.
            </param>
        </member>
        <member name="M:StyleCop.V101Settings.LoadLegacyAnalyzerSetting(StyleCop.Settings,System.String,System.String,System.String)">
            <summary>
            Loads a property which no longer exists, and translates it into an enabled or
            disabled rule.
            </summary>
            <param name="settings">
            The settings.
            </param>
            <param name="analyzerId">
            The ID of the analyzer owning the property.
            </param>
            <param name="propertyName">
            The name of legacy property.
            </param>
            <param name="nodeText">
            The property value.
            </param>
        </member>
        <member name="M:StyleCop.V101Settings.LoadValidPrefixes(System.Xml.XmlNode,StyleCop.Settings)">
            <summary>
            Loads the valid prefixes from the given node..
            </summary>
            <param name="validPrefixesNode">
            The node containing the prefixes.
            </param>
            <param name="settings">
            The settings collection.
            </param>
        </member>
        <member name="M:StyleCop.V101Settings.MapAnalyzerId(System.String)">
            <summary>
            Maps a 4.0 analyzer ID to a 4.3 analyzer ID.
            </summary>
            <param name="analyzerId">
            The ID of the 4.0 analyzer.
            </param>
            <returns>
            Returns the 4.3 analyzer ID.
            </returns>
        </member>
        <member name="M:StyleCop.V101Settings.MapAnalyzerToRules(System.String)">
            <summary>
            Maps the given 4.1 analyzer name to a list of 4.3 rules.
            </summary>
            <param name="analyzerId">
            The ID of the 4.1 analyzer.
            </param>
            <returns>
            Returns the collection of 4.3 rules mapping to the analyzer.
            </returns>
        </member>
        <member name="T:StyleCop.StyleCopAddInAttribute">
            <summary>
            Attribute class for marking StyleCop add-in classes.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopAddInAttribute.addInXmlId">
            <summary>
            The id of the add-in xml file within the assembly resources.
            </summary>
        </member>
        <member name="M:StyleCop.StyleCopAddInAttribute.#ctor">
            <summary>
            Initializes a new instance of the StyleCopAddInAttribute class.
            </summary>
        </member>
        <member name="M:StyleCop.StyleCopAddInAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the StyleCopAddInAttribute class.
            </summary>
            <param name="addInXmlId">
            The ID of the add-in xml file within the analyzer resource.
            </param>
        </member>
        <member name="P:StyleCop.StyleCopAddInAttribute.AddInXmlId">
            <summary>
            Gets the ID of the add-in xml file within the assembly resources.
            </summary>
        </member>
        <member name="T:StyleCop.StyleCopEnvironment">
            <summary>
            The environment used to interact with source code documents, settings, etc.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopEnvironment.Core">
            <summary>
            Gets the StyleCop core instance.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopEnvironment.SupportsLinkedSettings">
            <summary>
            Gets a value indicating whether the environment supports settings documents
            which link directly to another settings document to merge with.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopEnvironment.SupportsResultsCache">
            <summary>
            Gets a value indicating whether the environment supports reading and writing
            violation results caches.
            </summary>
        </member>
        <member name="M:StyleCop.StyleCopEnvironment.AddParser(StyleCop.SourceParser)">
            <summary>
            Invoked when a new parser is loaded.
            </summary>
            <param name="parser">
            The new parser.
            </param>
        </member>
        <member name="M:StyleCop.StyleCopEnvironment.AddSourceCode(StyleCop.CodeProject,System.String,System.Object)">
            <summary>
            Adds a source code document to the given project.
            </summary>
            <param name="project">
            The project which should contain the source code instance.
            </param>
            <param name="path">
            The path to the source code document to add.
            </param>
            <param name="context">
            Optional context information.
            </param>
            <returns>
            Returns true if any source code documents were added to the project.
            </returns>
        </member>
        <member name="M:StyleCop.StyleCopEnvironment.GetDefaultSettingsPath">
            <summary>
            Gets the path to the default settings file for the currently running StyleCop installation.
            </summary>
            <returns>Returns the path or null if there is none.</returns>
        </member>
        <member name="M:StyleCop.StyleCopEnvironment.GetParentSettingsPath(System.String)">
            <summary>
            Given the path to a settings document, determines the path to a parent settings file, if one exists.
            </summary>
            <param name="settingsPath">
            The path to the local settings document.
            </param>
            <returns>
            Returns the path to the parent settings document or null if none exists.
            </returns>
            <remarks>
            The environment should search through parent folders above the location of the
            given settings file to attempt to find a parent settings file.
            </remarks>
        </member>
        <member name="M:StyleCop.StyleCopEnvironment.GetProjectSettings(StyleCop.CodeProject,System.Boolean,System.Exception@)">
            <summary>
            Gets the settings for the given project.
            </summary>
            <param name="project">
            The project containing the settings.
            </param>
            <param name="merge">
            Indicates whether to merge the settings with parent settings before returning them.
            </param>
            <param name="exception">
            Returns an exception if one occurred while loading the settings.
            </param>
            <returns>
            Returns the settings.
            </returns>
        </member>
        <member name="M:StyleCop.StyleCopEnvironment.GetProjectSettings(StyleCop.CodeProject,System.Boolean)">
            <summary>
            Gets the settings for the given project.
            </summary>
            <param name="project">
            The project containing the settings.
            </param>
            <param name="merge">
            Indicates whether to merge the settings with parent settings before returning them.
            </param>
            <returns>
            Returns the settings.
            </returns>
        </member>
        <member name="M:StyleCop.StyleCopEnvironment.GetSettings(System.String,System.Boolean,System.Exception@)">
            <summary>
            Gets the settings given the path to local settings.
            </summary>
            <param name="settingsPath">
            The path to the settings to load.
            </param>
            <param name="merge">
            Indicates whether to merge the settings with parent settings before returning them.
            </param>
            <param name="exception">
            Returns an exception if one occurred while loading the settings.
            </param>
            <returns>
            Returns the settings.
            </returns>
        </member>
        <member name="M:StyleCop.StyleCopEnvironment.GetSettings(System.String,System.Boolean)">
            <summary>
            Gets the settings given the path to local settings.
            </summary>
            <param name="settingsPath">
            The path to the settings to load.
            </param>
            <param name="merge">
            Indicates whether to merge the settings with parent settings before returning them.
            </param>
            <returns>
            Returns the settings.
            </returns>
        </member>
        <member name="M:StyleCop.StyleCopEnvironment.GetWritableSettings(System.String,System.Exception@)">
            <summary>
            Loads or creates the settings at the given path, and returns them in writable mode.
            </summary>
            <param name="settingsPath">
            The path to the settings.
            </param>
            <param name="exception">
            Returns an exception if one occurred loading or creating the settings.
            </param>
            <returns>
            Returns the settings.
            </returns>
        </member>
        <member name="M:StyleCop.StyleCopEnvironment.GetWritableSettings(System.String)">
            <summary>
            Loads or creates the settings at the given path, and returns them in writable mode.
            </summary>
            <param name="settingsPath">
            The path to the settings.
            </param>
            <returns>
            Returns the settings.
            </returns>
        </member>
        <member name="M:StyleCop.StyleCopEnvironment.LoadResultsCache(System.String)">
            <summary>
            Loads the results cache at the given location.
            </summary>
            <param name="location">
            The location of the results cache to load.
            </param>
            <returns>
            Returns the results cache or null if there is no results cache at that location.
            </returns>
        </member>
        <member name="M:StyleCop.StyleCopEnvironment.RemoveAnalysisResults(System.String)">
            <summary>
            Removes the analysis results at the given location.
            </summary>
            <param name="location">
            The location of the analysis results to remove.
            </param>
        </member>
        <member name="M:StyleCop.StyleCopEnvironment.SaveAnalysisResults(System.String,System.Xml.XmlDocument,System.Exception@)">
            <summary>
            Saves the analysis results at the given location.
            </summary>
            <param name="location">
            The path to save the results under.
            </param>
            <param name="analysisResults">
            The results to save.
            </param>
            <param name="exception">
            Returns an exception if one occurs while saving the results.
            </param>
            <returns>
            Returns true if the results were saved successfully.
            </returns>
        </member>
        <member name="M:StyleCop.StyleCopEnvironment.SaveResultsCache(System.String,System.Xml.XmlDocument)">
            <summary>
            Saves the given results cache.
            </summary>
            <param name="location">
            The location to save the results cache under.
            </param>
            <param name="resultsCache">
            The results cache to save.
            </param>
        </member>
        <member name="M:StyleCop.StyleCopEnvironment.SaveSettings(StyleCop.WritableSettings,System.Exception@)">
            <summary>
            Saves the settings document at the path specified within the document.
            </summary>
            <param name="settings">
            The settings to save.
            </param>
            <param name="exception">
            If the document could not be saved, this returns the 
            resulting exception information.
            </param>
            <returns>
            Returns true if the document was successfully saved.
            </returns>
        </member>
        <member name="M:StyleCop.StyleCopEnvironment.SaveSettings(StyleCop.WritableSettings)">
            <summary>
            Saves the settings document at the path specified within the document.
            </summary>
            <param name="settings">
            The settings to save.
            </param>
            <returns>
            Returns true if the document was successfully saved.
            </returns>
        </member>
        <member name="T:StyleCop.SourceCode">
            <summary>
            Describes source code to parse and analyze.
            </summary>
            <remarks>Each piece of source code to be parsed and analyzed by StyleCop must be 
            described by a SourceCode object. A SourceCode object may only be used once. After the 
            SourceCode has been processed by StyleCop, it cannot be sent to StyleCop 
            a second time for analysis.</remarks>
        </member>
        <member name="F:StyleCop.SourceCode.configurations">
            <summary>
            The list of configurations for the document.
            </summary>
        </member>
        <member name="F:StyleCop.SourceCode.parser">
            <summary>
            The parser that handles this source code document.
            </summary>
        </member>
        <member name="F:StyleCop.SourceCode.project">
            <summary>
            The project that contains the source code document.
            </summary>
        </member>
        <member name="F:StyleCop.SourceCode.violations">
            <summary>
            The list of violations in this document.
            </summary>
        </member>
        <member name="F:StyleCop.SourceCode.settings">
            <summary>
            The settings for the project.
            </summary>
        </member>
        <member name="M:StyleCop.SourceCode.#ctor(StyleCop.CodeProject,StyleCop.SourceParser)">
            <summary>
            Initializes a new instance of the SourceCode class.
            </summary>
            <param name="project">
            The project that contains this document.
            </param>
            <param name="parser">
            The parser that created this document.
            </param>
        </member>
        <member name="M:StyleCop.SourceCode.#ctor(StyleCop.CodeProject,StyleCop.SourceParser,System.Collections.Generic.IEnumerable{StyleCop.Configuration})">
            <summary>
            Initializes a new instance of the SourceCode class.
            </summary>
            <param name="project">
            The project that contains this document.
            </param>
            <param name="parser">
            The parser that created this document.
            </param>
            <param name="configurations">
            The list of configurations for the document.
            </param>
        </member>
        <member name="P:StyleCop.SourceCode.Configurations">
            <summary>
            Gets the list of configurations for the file.
            </summary>
        </member>
        <member name="P:StyleCop.SourceCode.Exists">
            <summary>
            Gets a value indicating whether the source code document currently exists and is accessible.
            </summary>
        </member>
        <member name="P:StyleCop.SourceCode.Name">
            <summary>
            Gets the name of the source code document.
            </summary>
        </member>
        <member name="P:StyleCop.SourceCode.Parser">
            <summary>
            Gets the parser that created this document.
            </summary>
        </member>
        <member name="P:StyleCop.SourceCode.Path">
            <summary>
            Gets the full path to the source code document.
            </summary>
        </member>
        <member name="P:StyleCop.SourceCode.Project">
            <summary>
            Gets the project that contains the document.
            </summary>
        </member>
        <member name="P:StyleCop.SourceCode.Settings">
            <summary>
            Gets or sets the settings for this source code.
            </summary>
        </member>
        <member name="P:StyleCop.SourceCode.TimeStamp">
            <summary>
            Gets the time that the source code was last edited or updated.
            </summary>
        </member>
        <member name="P:StyleCop.SourceCode.Type">
            <summary>
            Gets the type of code that the document contains.
            </summary>
        </member>
        <member name="P:StyleCop.SourceCode.Violations">
            <summary>
            Gets the violations found within this document.
            </summary>
        </member>
        <member name="M:StyleCop.SourceCode.Read">
            <summary>
            Reads the contents of the source code into a TextReader.
            </summary>
            <returns>Returns the TextReader containing the source code.</returns>
        </member>
        <member name="M:StyleCop.SourceCode.AddViolation(StyleCop.Violation)">
            <summary>
            Adds one violation to this element.
            </summary>
            <param name="violation">
            The violation to add.
            </param>
            <returns>
            Returns false if there is already an identical violation in the element.
            </returns>
        </member>
        <member name="T:StyleCop.Configuration">
            <summary>
            Describes one compilation configuration style for a code document.
            </summary>
        </member>
        <member name="F:StyleCop.Configuration.conditionalCompilationDefinitions">
            <summary>
            The list of conditional compilation flags for this configuration.
            </summary>
        </member>
        <member name="M:StyleCop.Configuration.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the Configuration class.
            </summary>
            <param name="conditionalCompilationDefinitions">
            The list of conditional compilation flags for 
            this configuration.
            </param>
        </member>
        <member name="P:StyleCop.Configuration.Flags">
            <summary>
            Gets the list of flags defined in the configuration.
            </summary>
        </member>
        <member name="M:StyleCop.Configuration.Contains(System.String)">
            <summary>
            Determines whether the given flag is contained in the configuration.
            </summary>
            <param name="definition">
            The flag to search for.
            </param>
            <returns>
            Returns true if the flag is contained in the configuration.
            </returns>
        </member>
        <member name="M:StyleCop.Configuration.GetValue(System.String)">
            <summary>
            Gets the value of the given flag.
            </summary>
            <param name="definition">
            The defined flag to retrieve.
            </param>
            <returns>
            Returns the value of the flag.
            </returns>
        </member>
        <member name="T:StyleCop.AdapterConverterHandler`2">
            <summary>
            Event handler for converting elements within an adapted collection.
            </summary>
            <typeparam name="TOriginal">
            The type of the elements stored in the original collection.
            </typeparam>
            <typeparam name="TAdapted">
            The type of the element returned in the adapted collection.
            </typeparam>
            <param name="item">
            The element to convert.
            </param>
            <returns>
            Returns the converted element.
            </returns>
        </member>
        <member name="T:StyleCop.EnumerableAdapter`2">
            <summary>
            Adapts an enumerable collection from one format to another.
            </summary>
            <typeparam name="TOriginal">
            The type of the elements stored in the original collection.
            </typeparam>
            <typeparam name="TAdapted">
            The type of the elements returned in the adapted collection.
            </typeparam>
            <content>
            Implements the weakly typed interface IEnumerable.
            </content>
        </member>
        <member name="F:StyleCop.EnumerableAdapter`2.converter">
            <summary>
            The adapter converter.
            </summary>
        </member>
        <member name="F:StyleCop.EnumerableAdapter`2.innerEnumerable">
            <summary>
            The enumerable collection that is wrapped by this class.
            </summary>
        </member>
        <member name="M:StyleCop.EnumerableAdapter`2.#ctor(System.Collections.Generic.IEnumerable{`0},StyleCop.AdapterConverterHandler{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:StyleCop.EnumerableAdapter`2"/> class. 
            Initializes a new instance of the EnumerableAdapter class.
            </summary>
            <param name="enumerable">
            The enumerable collection to wrap.
            </param>
            <param name="converter">
            Converts elements from the original list to the adapted list.
            </param>
        </member>
        <member name="P:StyleCop.EnumerableAdapter`2.InnerEnumerable">
            <summary>
            Gets the inner enumerable collection wrapped by this adapter.
            </summary>
        </member>
        <member name="M:StyleCop.EnumerableAdapter`2.System#Collections#Generic#IEnumerable{TAdapted}#GetEnumerator">
            <summary>
            Gets an enumerator for iterating through the items in the list.
            </summary>
            <returns>Returns the enumerator.</returns>
        </member>
        <member name="M:StyleCop.EnumerableAdapter`2.Convert(`0)">
            <summary>
            Converts the item to its adapted format.
            </summary>
            <param name="item">
            The item to convert.
            </param>
            <returns>
            Returns the converted item.
            </returns>
        </member>
        <member name="M:StyleCop.EnumerableAdapter`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for iterating through the items in the list.
            </summary>
            <returns>Returns the enumerator.</returns>
        </member>
        <member name="T:StyleCop.ProjectStatus">
            <summary>
            Keeps track of the analysis status for a single code project.
            </summary>
        </member>
        <member name="F:StyleCop.ProjectStatus.ignoreResultsCache">
            <summary>
            Indicates whether to ignore the cached results for all files in this project.
            </summary>
        </member>
        <member name="P:StyleCop.ProjectStatus.IgnoreResultsCache">
            <summary>
            Gets or sets a value indicating whether to ignore the cached results for all source code 
            documents within this project.
            </summary>
        </member>
        <member name="T:StyleCop.Rule">
            <summary>
            Describes one analysis rule exposed by a StyleCop analyzer or parser.
            </summary>
        </member>
        <member name="F:StyleCop.Rule.canDisable">
            <summary>
            Indicates whether the rule can be disabled.
            </summary>
        </member>
        <member name="F:StyleCop.Rule.checkId">
            <summary>
            The short ID of the rule.
            </summary>
        </member>
        <member name="F:StyleCop.Rule.context">
            <summary>
            The context message for the rule.
            </summary>
        </member>
        <member name="F:StyleCop.Rule.description">
            <summary>
            The rule description.
            </summary>
        </member>
        <member name="F:StyleCop.Rule.enabledByDefault">
            <summary>
            Indicates whether the rule is enabled by default.
            </summary>
        </member>
        <member name="F:StyleCop.Rule.name">
            <summary>
            The name of this rule.
            </summary>
        </member>
        <member name="F:StyleCop.Rule.namespace">
            <summary>
            The namespace that the rule is contained within.
            </summary>
        </member>
        <member name="F:StyleCop.Rule.namespaceID">
            <summary>
            The unique hash ID for the rule namespace.
            </summary>
        </member>
        <member name="F:StyleCop.Rule.ruleGroup">
            <summary>
            The rule group that contains this rule.
            </summary>
        </member>
        <member name="F:StyleCop.Rule.uniqueID">
            <summary>
            The unique hash ID for the rule.
            </summary>
        </member>
        <member name="F:StyleCop.Rule.warning">
            <summary>
            Indicates whether the rule is a warning.
            </summary>
        </member>
        <member name="M:StyleCop.Rule.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the Rule class.
            </summary>
            <param name="name">
            The name of this rule.
            </param>
            <param name="namespace">
            The namespace that the rule is contained within.
            </param>
            <param name="checkId">
            The short ID of the rule.
            </param>
            <param name="context">
            The context message for the rule.
            </param>
            <param name="warning">
            Indicates whether the rule is a warning.
            </param>
        </member>
        <member name="M:StyleCop.Rule.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Rule class.
            </summary>
            <param name="name">
            The name of this rule.
            </param>
            <param name="namespace">
            The namespace that the rule is contained within.
            </param>
            <param name="checkId">
            The short ID of the rule.
            </param>
            <param name="context">
            The context message for the rule.
            </param>
            <param name="warning">
            Indicates whether the rule is a warning.
            </param>
            <param name="description">
            The description of the rule.
            </param>
            <param name="ruleGroup">
            The rule group that contains this rule.
            </param>
            <param name="enabledByDefault">
            Indicates whether the rule is enabled by default.
            </param>
            <param name="canDisable">
            Indicates whether the rule can be disabled.
            </param>
        </member>
        <member name="P:StyleCop.Rule.CanDisable">
            <summary>
            Gets a value indicating whether the rule can be disabled.
            </summary>
        </member>
        <member name="P:StyleCop.Rule.CheckId">
            <summary>
            Gets the short identifier of the rule.
            </summary>
        </member>
        <member name="P:StyleCop.Rule.Context">
            <summary>
            Gets the context message for the rule.
            </summary>
        </member>
        <member name="P:StyleCop.Rule.Description">
            <summary>
            Gets the description of the rule.
            </summary>
        </member>
        <member name="P:StyleCop.Rule.EnabledByDefault">
            <summary>
            Gets a value indicating whether the rule is enabled by default.
            </summary>
        </member>
        <member name="P:StyleCop.Rule.Name">
            <summary>
            Gets the name of this rule.
            </summary>
        </member>
        <member name="P:StyleCop.Rule.Namespace">
            <summary>
            Gets the namespace that contains the rule.
            </summary>
        </member>
        <member name="P:StyleCop.Rule.RuleGroup">
            <summary>
            Gets the rule group that contains this rule, if any.
            </summary>
        </member>
        <member name="P:StyleCop.Rule.UniqueRuleId">
            <summary>
            Gets a unique ID for this specific rule, which can be used as a hash for identifying this rule.
            </summary>
        </member>
        <member name="P:StyleCop.Rule.UniqueRuleNamespaceId">
            <summary>
            Gets a unique ID for this rule's namespace, which can be used as a hash for identifying the namespace.
            </summary>
        </member>
        <member name="P:StyleCop.Rule.Warning">
            <summary>
            Gets a value indicating whether the rule is a warning.
            </summary>
        </member>
        <member name="M:StyleCop.Rule.GenerateUniqueId(System.String,System.String,System.String)">
            <summary>
            Gets a unique ID for identifying a rule.
            </summary>
            <param name="namespace">
            The namespace containing the rule.
            </param>
            <param name="checkId">
            The CheckID code for the rule, or * to match against all rules in the namespace.
            </param>
            <param name="name">
            The rule name, or null if CheckID is *.
            </param>
            <returns>
            Returns the unique ID.
            </returns>
        </member>
        <member name="M:StyleCop.Rule.GetHashCode">
            <summary>
            Gets a unique hash code for identifying the rule.
            </summary>
            <returns>Returns the hash code.</returns>
        </member>
        <member name="M:StyleCop.Rule.GenerateUniqueRuleID(System.String,System.String,System.String)">
            <summary>
            Generates a unique ID for a specific rule, which can be used as a hash for identifying the rule.
            </summary>
            <param name="namespace">
            The rule's namespace.
            </param>
            <param name="checkID">
            The rule's checkID.
            </param>
            <param name="name">
            The rule's name.
            </param>
            <returns>
            Returns the unique ID.
            </returns>
        </member>
        <member name="M:StyleCop.Rule.GenerateUniqueRuleNamespaceID(System.String)">
            <summary>
            Generates a unique ID for the rule's namespace, which can be used as a hash for identifying the namespace.
            </summary>
            <param name="namespace">
            The rule's namespace.
            </param>
            <returns>
            Returns the unique ID.
            </returns>
        </member>
        <member name="T:StyleCop.Rules">
            <summary>
            The list of rules that can be triggered by this analyzer module.
            </summary>
        </member>
        <member name="F:StyleCop.Rules.ExceptionOccurred">
            <summary>
            An exception occurred while parsing the file.
            </summary>
        </member>
        <member name="T:StyleCop.BooleanProperty">
            <summary>
            A boolean property.
            </summary>
        </member>
        <member name="M:StyleCop.BooleanProperty.#ctor(StyleCop.PropertyDescriptor{System.Boolean},System.Boolean)">
            <summary>
            Initializes a new instance of the BooleanProperty class.
            </summary>
            <param name="propertyDescriptor">
            The property descriptor that this value represents.
            </param>
            <param name="value">
            The value of the property.
            </param>
        </member>
        <member name="M:StyleCop.BooleanProperty.#ctor(StyleCop.IPropertyContainer,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the BooleanProperty class.
            </summary>
            <param name="propertyContainer">
            The container of this property.
            </param>
            <param name="propertyName">
            The name of the property.
            </param>
            <param name="value">
            The value of the property.
            </param>
        </member>
        <member name="M:StyleCop.BooleanProperty.Clone">
            <summary>
            Clones the contents of the property.
            </summary>
            <returns>Returns the cloned property.</returns>
        </member>
        <member name="T:StyleCop.CollectionProperty">
            <summary>
            Contains a collection of strings.
            </summary>
        </member>
        <member name="F:StyleCop.CollectionProperty.collection">
            <summary>
            The inner property collection.
            </summary>
        </member>
        <member name="M:StyleCop.CollectionProperty.#ctor(StyleCop.CollectionPropertyDescriptor)">
            <summary>
            Initializes a new instance of the CollectionProperty class.
            </summary>
            <param name="propertyDescriptor">
            The property descriptor that this value represents.
            </param>
        </member>
        <member name="M:StyleCop.CollectionProperty.#ctor(StyleCop.CollectionPropertyDescriptor,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the CollectionProperty class.
            </summary>
            <param name="propertyDescriptor">
            The property descriptor that this value represents.
            </param>
            <param name="innerCollection">
            The inner collection.
            </param>
        </member>
        <member name="M:StyleCop.CollectionProperty.#ctor(StyleCop.IPropertyContainer,System.String)">
            <summary>
            Initializes a new instance of the CollectionProperty class.
            </summary>
            <param name="propertyContainer">
            The container of this property.
            </param>
            <param name="propertyName">
            The name of the property.
            </param>
        </member>
        <member name="M:StyleCop.CollectionProperty.#ctor(StyleCop.IPropertyContainer,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the CollectionProperty class.
            </summary>
            <param name="propertyContainer">
            The container of this property.
            </param>
            <param name="propertyName">
            The name of the property.
            </param>
            <param name="innerCollection">
            The inner collection.
            </param>
        </member>
        <member name="P:StyleCop.CollectionProperty.Aggregate">
            <summary>
            Gets a value indicating whether to aggregate the collection when merged.
            </summary>
        </member>
        <member name="P:StyleCop.CollectionProperty.Count">
            <summary>
            Gets the number of values in the property values collection.
            </summary>
        </member>
        <member name="P:StyleCop.CollectionProperty.HasDefaultValue">
            <summary>
            Gets a value indicating whether the property has a default value.
            </summary>
        </member>
        <member name="P:StyleCop.CollectionProperty.IsDefault">
            <summary>
            Gets a value indicating whether the property is currently set to the default value for the property.
            </summary>
        </member>
        <member name="P:StyleCop.CollectionProperty.Values">
            <summary>
            Gets the collection of property values.
            </summary>
        </member>
        <member name="M:StyleCop.CollectionProperty.Add(System.String)">
            <summary>
            Adds a value to the property list.
            </summary>
            <param name="item">
            The item to add.
            </param>
        </member>
        <member name="M:StyleCop.CollectionProperty.Clear">
            <summary>
            Clears the list of property values.
            </summary>
        </member>
        <member name="M:StyleCop.CollectionProperty.Clone">
            <summary>
            Clones the contents of the collection.
            </summary>
            <returns>Returns the cloned collection.</returns>
        </member>
        <member name="M:StyleCop.CollectionProperty.Contains(System.String)">
            <summary>
            Determines whether the given value is contained in the property value list.
            </summary>
            <param name="item">
            The item to search for.
            </param>
            <returns>
            Returns true if the item is contained within the list.
            </returns>
        </member>
        <member name="M:StyleCop.CollectionProperty.CopyTo(System.String[],System.Int32)">
            <summary>
            Copies values from the list to the given array.
            </summary>
            <param name="array">
            The array to copy the items into.
            </param>
            <param name="arrayIndex">
            The index within the array to begin copying.
            </param>
        </member>
        <member name="M:StyleCop.CollectionProperty.GetEnumerator">
            <summary>
            Gets an enumerator for iterating through the values in the property collection.
            </summary>
            <returns>Returns the enumerator.</returns>
        </member>
        <member name="M:StyleCop.CollectionProperty.OverridesProperty(StyleCop.PropertyValue)">
            <summary>
            Determines whether this property overrides the given property.
            </summary>
            <param name="parentProperty">
            The parent property to compare with.
            </param>
            <returns>
            Returns true if this property overrides the given property.
            </returns>
        </member>
        <member name="M:StyleCop.CollectionProperty.Remove(System.String)">
            <summary>
            Removes the given value from the property list.
            </summary>
            <param name="item">
            The value to remove.
            </param>
            <returns>
            Returns true if the value was removed from the property collection, or
            false if it did not exist in the collection.
            </returns>
        </member>
        <member name="M:StyleCop.CollectionProperty.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for iterating through the values in the property collection.
            </summary>
            <returns>Returns the enumerator.</returns>
        </member>
        <member name="M:StyleCop.CollectionProperty.OverridesPropertyCollection(System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String},System.Boolean)">
            <summary>
            Determines whether the local values overrides the parent values.
            </summary>
            <param name="localValues">
            The local values.
            </param>
            <param name="parentValues">
            The parent values.
            </param>
            <param name="aggregate">
            Indicates whether the collection is an aggregate collection.
            </param>
            <returns>
            Returns true if the local values overrides the parent values.
            </returns>
        </member>
        <member name="T:StyleCop.IntProperty">
            <summary>
            An integer property.
            </summary>
        </member>
        <member name="M:StyleCop.IntProperty.#ctor(StyleCop.PropertyDescriptor{System.Int32},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:StyleCop.IntProperty"/> class.
            </summary>
            <param name="propertyDescriptor">
            The property descriptor that this value represents.
            </param>
            <param name="value">
            The value of the property.
            </param>
        </member>
        <member name="M:StyleCop.IntProperty.#ctor(StyleCop.IPropertyContainer,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:StyleCop.IntProperty"/> class.
            </summary>
            <param name="propertyContainer">
            The container of this property.
            </param>
            <param name="propertyName">
            The name of the property.
            </param>
            <param name="value">
            The value of the property.
            </param>
        </member>
        <member name="M:StyleCop.IntProperty.Clone">
            <summary>
            Clones the contents of the property.
            </summary>
            <returns>Returns the cloned property.</returns>
        </member>
        <member name="T:StyleCop.IPropertyControlPage">
            <summary>
            Interface which must be implemented by a page that appears on the <see cref="T:StyleCop.PropertyControl"/>.
            </summary>
        </member>
        <member name="P:StyleCop.IPropertyControlPage.Dirty">
            <summary>
            Gets or sets a value indicating whether the page is dirty.
            </summary>
        </member>
        <member name="P:StyleCop.IPropertyControlPage.TabName">
            <summary>
            Gets the text displayed on the page tab.
            </summary>
        </member>
        <member name="M:StyleCop.IPropertyControlPage.Activate(System.Boolean)">
            <summary>
            Called whenever the page is being shown or hidden.
            </summary>
            <param name="activated">
            True if the page is being show, false if it is being hidden.
            </param>
        </member>
        <member name="M:StyleCop.IPropertyControlPage.Apply">
            <summary>
            Saves the data on the page and resets any internal dirty flags.
            </summary>
            <returns>Returns true if the page settings were applied.</returns>
        </member>
        <member name="M:StyleCop.IPropertyControlPage.Initialize(StyleCop.PropertyControl)">
            <summary>
            Initializes the page object.
            </summary>
            <param name="propertyControl">
            The property control that hosts the page.
            </param>
        </member>
        <member name="M:StyleCop.IPropertyControlPage.PostApply(System.Boolean)">
            <summary>
            Allows the property page to perform an action after the settings for all pages have been applied.
            </summary>
            <param name="wasDirty">
            Indicates whether the page was dirty before it was applied.
            </param>
        </member>
        <member name="M:StyleCop.IPropertyControlPage.PreApply">
            <summary>
            Allows the property page to perform an action before any of the settings pages have been applied.
            </summary>
            <returns>Returns false if no pages should be applied.</returns>
        </member>
        <member name="M:StyleCop.IPropertyControlPage.RefreshSettingsOverrideState">
            <summary>
            Called when the merged settings have changed.
            </summary>
        </member>
        <member name="T:StyleCop.PropertyCollection">
            <summary>
            Contains a collection of properties.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyCollection.properties">
            <summary>
            The properties.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyCollection.readOnly">
            <summary>
            Indicates whether the collection is read-only.
            </summary>
        </member>
        <member name="M:StyleCop.PropertyCollection.#ctor">
            <summary>
            Initializes a new instance of the PropertyCollection class.
            </summary>
        </member>
        <member name="P:StyleCop.PropertyCollection.Count">
            <summary>
            Gets the number of properties in the collection.
            </summary>
        </member>
        <member name="P:StyleCop.PropertyCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:StyleCop.PropertyCollection.Properties">
            <summary>
            Gets the collection of properties.
            </summary>
        </member>
        <member name="P:StyleCop.PropertyCollection.Item(System.String)">
            <summary>
            Gets the property with the given name.
            </summary>
            <param name="propertyName">
            The name of the property.
            </param>
            <returns>
            Returns the property or null if there is no property with the given name.
            </returns>
        </member>
        <member name="M:StyleCop.PropertyCollection.Add(StyleCop.PropertyValue)">
            <summary>
            Adds a property to the collection.
            </summary>
            <param name="property">
            The property to add.
            </param>
        </member>
        <member name="M:StyleCop.PropertyCollection.Clear">
            <summary>
            Clears the list of property values.
            </summary>
        </member>
        <member name="M:StyleCop.PropertyCollection.Clone">
            <summary>
            Clones the contents of the collection.
            </summary>
            <returns>Returns the cloned collection.</returns>
        </member>
        <member name="M:StyleCop.PropertyCollection.Contains(StyleCop.PropertyValue)">
            <summary>
            Determines whether the given property is contained in the collection.
            </summary>
            <param name="property">
            The property to search for.
            </param>
            <returns>
            Returns true if the property is contained within the collection.
            </returns>
        </member>
        <member name="M:StyleCop.PropertyCollection.Contains(System.String)">
            <summary>
            Determines whether the given property is contained in the collection.
            </summary>
            <param name="propertyName">
            The name of the property to search for.
            </param>
            <returns>
            Returns true if the property is contained within the collection.
            </returns>
        </member>
        <member name="M:StyleCop.PropertyCollection.CopyTo(StyleCop.PropertyValue[],System.Int32)">
            <summary>
            Copies values from the collection to the given array.
            </summary>
            <param name="array">
            The array to copy the items into.
            </param>
            <param name="arrayIndex">
            The index within the array to begin copying.
            </param>
        </member>
        <member name="M:StyleCop.PropertyCollection.GetEnumerator">
            <summary>
            Gets an enumerator for iterating through the values in the property collection.
            </summary>
            <returns>Returns the enumerator.</returns>
        </member>
        <member name="M:StyleCop.PropertyCollection.GetProperty(System.String)">
            <summary>
            Gets the property values collection for the given property.
            </summary>
            <param name="propertyName">
            The name of the property.
            </param>
            <returns>
            Returns the values collection for the property or null if the property is not contained within the collection.
            </returns>
        </member>
        <member name="M:StyleCop.PropertyCollection.Remove(StyleCop.PropertyValue)">
            <summary>
            Removes the given property from the collection.
            </summary>
            <param name="property">
            The property to remove.
            </param>
            <returns>
            Returns true if the property was removed from the property collection, or
            false if it did not exist in the collection.
            </returns>
        </member>
        <member name="M:StyleCop.PropertyCollection.Remove(System.String)">
            <summary>
            Removes the given property from the collection.
            </summary>
            <param name="propertyName">
            The name of the property to remove.
            </param>
            <returns>
            Returns true if the property was removed from the property collection, or
            false if it did not exist in the collection.
            </returns>
        </member>
        <member name="M:StyleCop.PropertyCollection.SetProperty(StyleCop.PropertyValue)">
            <summary>
            Sets the given property.
            </summary>
            <param name="property">
            The property to set.
            </param>
        </member>
        <member name="M:StyleCop.PropertyCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for iterating through the values in the property collection.
            </summary>
            <returns>Returns the enumerator.</returns>
        </member>
        <member name="T:StyleCop.PropertyControl">
            <summary>
            Hosts property pages.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyControl.context">
            <summary>
            The context for the property pages.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyControl.core">
            <summary>
            The StyleCop core instance.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyControl.dirty">
            <summary>
            Indicates whether any of the pages are dirty.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyControl.host">
            <summary>
            The property page host.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyControl.localSettings">
            <summary>
            The settings file to read from and write to.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyControl.mergedSettings">
            <summary>
            The local settings merged with parent settings.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyControl.pageInterfaces">
            <summary>
            The pages to display.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyControl.pages">
            <summary>
            The pages to display.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyControl.parentSettings">
            <summary>
            The settings one level up from the local settings file.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyControl.settingsComparer">
            <summary>
            Compares the local settings with the merged settings.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyControl.tabPages">
            <summary>
            The pages to display.
            </summary>
        </member>
        <member name="M:StyleCop.PropertyControl.#ctor">
            <summary>
            Initializes a new instance of the PropertyControl class.
            </summary>
        </member>
        <member name="P:StyleCop.PropertyControl.ActivePage">
            <summary>
            Gets the currently active page.
            </summary>
        </member>
        <member name="P:StyleCop.PropertyControl.Context">
            <summary>
            Gets the list of context objects passed to this property control.
            </summary>
        </member>
        <member name="P:StyleCop.PropertyControl.Core">
            <summary>
            Gets the StyleCop core instance.
            </summary>
        </member>
        <member name="P:StyleCop.PropertyControl.IsDirty">
            <summary>
            Gets a value indicating whether any of the pages are dirty.
            </summary>
        </member>
        <member name="P:StyleCop.PropertyControl.LocalSettings">
            <summary>
            Gets the local settings file to read from and write to.
            </summary>
        </member>
        <member name="P:StyleCop.PropertyControl.MergedSettings">
            <summary>
            Gets the local settings merged with all parent settings.
            </summary>
        </member>
        <member name="P:StyleCop.PropertyControl.Pages">
            <summary>
            Gets the list of pages that are currently loaded on the property control.
            </summary>
        </member>
        <member name="P:StyleCop.PropertyControl.ParentSettings">
            <summary>
            Gets the settings which the local settings are merged with at runtime, or null if there are
            no settings to merge.
            </summary>
        </member>
        <member name="P:StyleCop.PropertyControl.SettingsComparer">
            <summary>
            Gets a comparer that can be used to determine whether local settings are overriding parent settings.
            </summary>
        </member>
        <member name="M:StyleCop.PropertyControl.Cancel">
            <summary>
            Called when the property control should be cancelled.
            </summary>
        </member>
        <member name="M:StyleCop.PropertyControl.DirtyChanged">
            <summary>
            Sets the dirty flag and notifies the host that the dirty status has changed.
            </summary>
        </member>
        <member name="M:StyleCop.PropertyControl.RefreshMergedSettings">
            <summary>
            Called when the parent settings have changed.
            </summary>
        </member>
        <member name="M:StyleCop.PropertyControl.Apply(System.Boolean@)">
            <summary>
            Applies the data on the property pages.
            </summary>
            <param name="dirtyPages">
            Returns true if any pages were dirty.
            </param>
            <returns>
            Returns false if any page returned false from it's apply call, in which case
            the apply failed.
            </returns>
        </member>
        <member name="M:StyleCop.PropertyControl.Initialize(StyleCop.IPropertyControlHost,System.Collections.Generic.IList{StyleCop.IPropertyControlPage},StyleCop.WritableSettings,StyleCop.StyleCopCore,System.Object[])">
            <summary>
            The control must be initialized by calling this method during the host's OnLoad event.
            </summary>
            <param name="hostInstance">
            Interface implemented by the host object.
            </param>
            <param name="propertyPages">
            The array of pages to display on the tab control.
            </param>
            <param name="settings">
            The settings to read from and write to.
            </param>
            <param name="coreInstance">
            The StyleCop core instance.
            </param>
            <param name="contextItem">
            The context for the property control.
            </param>
        </member>
        <member name="M:StyleCop.PropertyControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:StyleCop.PropertyControl.OnSizeChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the size of the dialog changes.
            </summary>
            <param name="sender">
            The event sender..
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.PropertyControl.SizePage(System.Int32)">
            <summary>
            Sets the size of a tab page to fill the sheet area.
            </summary>
            <param name="index">
            The index of the tab to size.
            </param>
        </member>
        <member name="T:StyleCop.PropertyType">
            <summary>
            The possible property types.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyType.String">
            <summary>
            A string value.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyType.Boolean">
            <summary>
            A boolean value.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyType.Int">
            <summary>
            An integer value.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyType.Collection">
            <summary>
            A collection of values.
            </summary>
        </member>
        <member name="T:StyleCop.PropertyValue">
            <summary>
            A single property.
            </summary>
        </member>
        <member name="F:StyleCop.PropertyValue.propertyDescriptor">
            <summary>
            The property descriptor.
            </summary>
        </member>
        <member name="M:StyleCop.PropertyValue.#ctor(StyleCop.PropertyDescriptor)">
            <summary>
            Initializes a new instance of the PropertyValue class.
            </summary>
            <param name="propertyDescriptor">
            The property descriptor that this value represents.
            </param>
        </member>
        <member name="M:StyleCop.PropertyValue.#ctor(StyleCop.IPropertyContainer,System.String)">
            <summary>
            Initializes a new instance of the PropertyValue class.
            </summary>
            <param name="propertyContainer">
            The container of this property.
            </param>
            <param name="propertyName">
            The name of the property.
            </param>
        </member>
        <member name="P:StyleCop.PropertyValue.Description">
            <summary>
            Gets the description of the property.
            </summary>
        </member>
        <member name="P:StyleCop.PropertyValue.FriendlyName">
            <summary>
            Gets the friendly name of the property.
            </summary>
        </member>
        <member name="P:StyleCop.PropertyValue.HasDefaultValue">
            <summary>
            Gets a value indicating whether the property has a default value.
            </summary>
        </member>
        <member name="P:StyleCop.PropertyValue.IsDefault">
            <summary>
            Gets a value indicating whether the property is currently set to the default value for the property.
            </summary>
        </member>
        <member name="P:StyleCop.PropertyValue.IsReadOnly">
            <summary>
            Gets a value indicating whether the property is read-only.
            </summary>
        </member>
        <member name="P:StyleCop.PropertyValue.PropertyDescriptor">
            <summary>
            Gets the property descriptor that this value represents.
            </summary>
        </member>
        <member name="P:StyleCop.PropertyValue.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
        </member>
        <member name="P:StyleCop.PropertyValue.PropertyType">
            <summary>
            Gets the type of the property.
            </summary>
        </member>
        <member name="M:StyleCop.PropertyValue.Clone">
            <summary>
            Clones the contents of the property.
            </summary>
            <returns>Returns the cloned property.</returns>
        </member>
        <member name="M:StyleCop.PropertyValue.OverridesProperty(StyleCop.PropertyValue)">
            <summary>
            Determines whether this property overrides the given property.
            </summary>
            <param name="parentProperty">
            The parent property to compare with.
            </param>
            <returns>
            Returns true if this property overrides the given property.
            </returns>
        </member>
        <member name="T:StyleCop.Settings">
            <summary>
            Represents a single StyleCop settings file in read-only mode.
            </summary>
        </member>
        <member name="F:StyleCop.Settings.AlternateFileName">
            <summary>
            The alternate settings file name.
            </summary>
        </member>
        <member name="F:StyleCop.Settings.DefaultFileName">
            <summary>
            The default settings file name.
            </summary>
        </member>
        <member name="F:StyleCop.Settings.analyzerSettings">
            <summary>
            The settings for the analyzers.
            </summary>
        </member>
        <member name="F:StyleCop.Settings.contents">
            <summary>
            The contents of the settings document.
            </summary>
        </member>
        <member name="F:StyleCop.Settings.core">
            <summary>
            The StyleCop core instance.
            </summary>
        </member>
        <member name="F:StyleCop.Settings.enabledRulesLock">
            <summary>
            Lock object for enabled rules dictionary
            </summary>
        </member>
        <member name="F:StyleCop.Settings.globalSettings">
            <summary>
            The global settings.
            </summary>
        </member>
        <member name="F:StyleCop.Settings.location">
            <summary>
            The path to the settings document.
            </summary>
        </member>
        <member name="F:StyleCop.Settings.parserSettings">
            <summary>
            The settings for the parsers.
            </summary>
        </member>
        <member name="F:StyleCop.Settings.sourceFileLists">
            <summary>
            The collection of excluded files specified in the settings.
            </summary>
        </member>
        <member name="F:StyleCop.Settings.defaultSettings">
            <summary>
            Indicates whether this is the default settings file for the installation.
            </summary>
        </member>
        <member name="F:StyleCop.Settings.enabledRules">
            <summary>
            The collection of enabled analyzers based on the settings.
            </summary>
        </member>
        <member name="M:StyleCop.Settings.#ctor(StyleCop.StyleCopCore,System.String)">
            <summary>
            Initializes a new instance of the Settings class.
            </summary>
            <param name="core">
            The StyleCop core instance. 
            </param>
            <param name="location">
            The location of the settings document. 
            </param>
        </member>
        <member name="M:StyleCop.Settings.#ctor(StyleCop.StyleCopCore,System.String,System.Xml.XmlDocument,System.DateTime)">
            <summary>
            Initializes a new instance of the Settings class.
            </summary>
            <param name="core">
            The StyleCop core instance. 
            </param>
            <param name="location">
            The path to the settings document. 
            </param>
            <param name="contents">
            The initial contents of the settings document. 
            </param>
            <param name="writeTime">
            The time when the settings were last updated. 
            </param>
        </member>
        <member name="M:StyleCop.Settings.#ctor(StyleCop.StyleCopCore)">
            <summary>
            Initializes a new instance of the Settings class.
            </summary>
            <param name="core">
            The StyleCop core instance. 
            </param>
        </member>
        <member name="P:StyleCop.Settings.AnalyzerSettings">
            <summary>
            Gets the collection of settings for the analyzers.
            </summary>
        </member>
        <member name="P:StyleCop.Settings.Contents">
            <summary>
            Gets the contents of the settings document.
            </summary>
        </member>
        <member name="P:StyleCop.Settings.EnabledAnalyzers">
            <summary>
            Gets the collection of enabled analyzers for these settings.
            </summary>
        </member>
        <member name="P:StyleCop.Settings.GlobalSettings">
            <summary>
            Gets the global settings.
            </summary>
        </member>
        <member name="P:StyleCop.Settings.Loaded">
            <summary>
            Gets a value indicating whether the settings are loaded.
            </summary>
        </member>
        <member name="P:StyleCop.Settings.Location">
            <summary>
            Gets the location of the settings file.
            </summary>
        </member>
        <member name="P:StyleCop.Settings.ParserSettings">
            <summary>
            Gets the collection of settings for the parsers.
            </summary>
        </member>
        <member name="P:StyleCop.Settings.RulesEnabledByDefault">
            <summary>
            Gets a value indicating whether rules for this file list are enabled or disabled by default.
            </summary>
        </member>
        <member name="P:StyleCop.Settings.SourceFileLists">
            <summary>
            Gets the collection of source files lists.
            </summary>
        </member>
        <member name="P:StyleCop.Settings.WriteTime">
            <summary>
            Gets the time when the settings were last updated.
            </summary>
        </member>
        <member name="P:StyleCop.Settings.Core">
            <summary>
            Gets the core instance.
            </summary>
        </member>
        <member name="P:StyleCop.Settings.DefaultSettings">
            <summary>
            Gets or sets a value indicating whether this is the default settings file for the installation.
            </summary>
        </member>
        <member name="P:StyleCop.Settings.AnalyzerDictionary">
            <summary>
            Gets the settings for the analyzers.
            </summary>
        </member>
        <member name="P:StyleCop.Settings.ParserDictionary">
            <summary>
            Gets the settings for the parsers.
            </summary>
        </member>
        <member name="M:StyleCop.Settings.GetAddInSetting(StyleCop.StyleCopAddIn,System.String)">
            <summary>
            Gets a setting for the given add-in.
            </summary>
            <param name="addIn">
            The add-in. 
            </param>
            <param name="propertyName">
            The name of the setting property. 
            </param>
            <returns>
            Returns the setting or null if the setting does not exist for the add-in. 
            </returns>
        </member>
        <member name="M:StyleCop.Settings.GetAddInSettings(StyleCop.StyleCopAddIn)">
            <summary>
            Gets the settings for the given add-in.
            </summary>
            <param name="addIn">
            The add-in. 
            </param>
            <returns>
            Returns the add-in settings or null if there are no settings for the add-in. 
            </returns>
        </member>
        <member name="M:StyleCop.Settings.GetCustomSettingsForFile(System.String)">
            <summary>
            Gets the custom settings for a file with the given name, if any.
            </summary>
            <param name="fileName">
            The name of the file. 
            </param>
            <returns>
            Returns the custom settings or null if there are no custom settings specified for this file. 
            </returns>
            <remarks>
            Custom settings are specified through a SourceFileList node in the settings file.
            </remarks>
        </member>
        <member name="M:StyleCop.Settings.IsRuleEnabled(StyleCop.SourceAnalyzer,System.String)">
            <summary>
            Gets a value indicating whether the given rule is enabled for the given document.
            </summary>
            <param name="analyzer">
            The analyzer which contains the rule. 
            </param>
            <param name="ruleName">
            The rule to check. 
            </param>
            <returns>
            Returns true if the rule is enabled; otherwise false. 
            </returns>
        </member>
        <member name="M:StyleCop.Settings.AddSourceFileList(StyleCop.SourceFileListSettings)">
            <summary>
            Adds a set of custom source file settings.
            </summary>
            <param name="sourceFileList">
            The source file list settings. 
            </param>
        </member>
        <member name="M:StyleCop.Settings.ClearAddInSettingInternal(StyleCop.StyleCopAddIn,System.String)">
            <summary>
            Clears a setting for the given add-in.
            </summary>
            <param name="addIn">
            The add-in. 
            </param>
            <param name="propertyName">
            The name of the property to clear. 
            </param>
        </member>
        <member name="M:StyleCop.Settings.SetAddInSettingInternal(StyleCop.StyleCopAddIn,StyleCop.PropertyValue)">
            <summary>
            Sets a setting for the given add-in.
            </summary>
            <param name="addIn">
            The add-in. 
            </param>
            <param name="property">
            The setting property to set. 
            </param>
        </member>
        <member name="M:StyleCop.Settings.SetAddInSettings(StyleCop.AddInPropertyCollection)">
            <summary>
            Sets the settings for the given add-in.
            </summary>
            <param name="properties">
            The properties to set. 
            </param>
            <remarks>
            This overrides any existing settings for the add-in.
            </remarks>
        </member>
        <member name="M:StyleCop.Settings.GetPropertyCollectionDictionary(StyleCop.StyleCopAddIn)">
            <summary>
            Gets the correct property collection dictionary depending on whether the given add-in is a parser or an analyzer.
            </summary>
            <param name="addIn">
            The add-in. 
            </param>
            <returns>
            Returns the correct dictionary. 
            </returns>
        </member>
        <member name="M:StyleCop.Settings.InitializeEnabledRules">
            <summary>
            Initializes the collection of enabled analyzers and rules based on these settings.
            </summary>
        </member>
        <member name="M:StyleCop.Settings.LoadSettingsDocument">
            <summary>
            Loads the settings from the document.
            </summary>
        </member>
        <member name="T:StyleCop.SettingsComparer">
            <summary>
            Compares two settings files.
            </summary>
        </member>
        <member name="F:StyleCop.SettingsComparer.localSettings">
            <summary>
            The local settings.
            </summary>
        </member>
        <member name="F:StyleCop.SettingsComparer.parentSettings">
            <summary>
            The parent settings to merge with the local settings.
            </summary>
        </member>
        <member name="M:StyleCop.SettingsComparer.#ctor(StyleCop.Settings,StyleCop.Settings)">
            <summary>
            Initializes a new instance of the SettingsComparer class.
            </summary>
            <param name="localSettings">
            The local settings.
            </param>
            <param name="parentSettings">
            The parent setting to merge with the local settings, or null.
            </param>
        </member>
        <member name="P:StyleCop.SettingsComparer.LocalSettings">
            <summary>
            Gets the local settings.
            </summary>
        </member>
        <member name="P:StyleCop.SettingsComparer.ParentSettings">
            <summary>
            Gets the parent settings.
            </summary>
        </member>
        <member name="M:StyleCop.SettingsComparer.IsSettingOverwritten(StyleCop.PropertyValue,StyleCop.PropertyValue)">
            <summary>
            Determines whether the local property overrides the parent property.
            </summary>
            <param name="localProperty">
            The local property.
            </param>
            <param name="parentProperty">
            The parent property.
            </param>
            <returns>
            Returns true if the local property overrides the parent property.
            </returns>
        </member>
        <member name="M:StyleCop.SettingsComparer.IsAddInSettingOverwritten(StyleCop.StyleCopAddIn,System.String,StyleCop.PropertyValue)">
            <summary>
            Determines whether the given add-in setting overrides the parent setting.
            </summary>
            <param name="addIn">
            The add-in.
            </param>
            <param name="propertyName">
            The name of the property.
            </param>
            <param name="localProperty">
            The local value of the property.
            </param>
            <returns>
            Returns true if the given add-in setting overrides the parent setting.
            </returns>
        </member>
        <member name="M:StyleCop.SettingsComparer.IsGlobalSettingOverwritten(System.String,StyleCop.PropertyValue)">
            <summary>
            Determines whether the given global setting overrides the parent setting.
            </summary>
            <param name="propertyName">
            The name of the property.
            </param>
            <param name="localProperty">
            The local value of the property.
            </param>
            <returns>
            Returns true if the given global setting overrides the parent setting.
            </returns>
        </member>
        <member name="M:StyleCop.SettingsComparer.IsGlobalSettingOverwritten(System.String)">
            <summary>
            Determines whether a local global setting overrides the parent setting.
            </summary>
            <param name="propertyName">
            The name of the property.
            </param>
            <returns>
            Returns true if the local global setting overrides the parent setting.
            </returns>
        </member>
        <member name="M:StyleCop.SettingsComparer.IsParserSettingOverwritten(StyleCop.StyleCopAddIn,System.String)">
            <summary>
            Determines whether a local add-in setting overrides the parent setting.
            </summary>
            <param name="addIn">
            The add-in.
            </param>
            <param name="propertyName">
            The name of the property.
            </param>
            <returns>
            Returns true if the local add-in setting overrides the parent setting.
            </returns>
        </member>
        <member name="T:StyleCop.SettingsMerger">
            <summary>
            Merges a settings file with other settings files.
            </summary>
        </member>
        <member name="F:StyleCop.SettingsMerger.LinkedSettingsProperty">
            <summary>
            The name of the linked settings property.
            </summary>
        </member>
        <member name="F:StyleCop.SettingsMerger.MergeSettingsFilesProperty">
            <summary>
            The name of the merge settings property.
            </summary>
        </member>
        <member name="F:StyleCop.SettingsMerger.MergeStyleLinked">
            <summary>
            Merge with a linked settings file.
            </summary>
        </member>
        <member name="F:StyleCop.SettingsMerger.MergeStyleNone">
            <summary>
            Do not merge the settings file.
            </summary>
        </member>
        <member name="F:StyleCop.SettingsMerger.MergeStyleParent">
            <summary>
            Merge with a parent settings file.
            </summary>
        </member>
        <member name="F:StyleCop.SettingsMerger.environment">
            <summary>
            The environment in which StyleCop is running.
            </summary>
        </member>
        <member name="F:StyleCop.SettingsMerger.localSettings">
            <summary>
            The settings which should be merged.
            </summary>
        </member>
        <member name="M:StyleCop.SettingsMerger.#ctor(StyleCop.Settings,StyleCop.StyleCopEnvironment)">
            <summary>
            Initializes a new instance of the SettingsMerger class.
            </summary>
            <param name="localSettings">
            The settings which should be merged.
            </param>
            <param name="environment">
            The environment in which StyleCop is running.
            </param>
        </member>
        <member name="P:StyleCop.SettingsMerger.MergedSettings">
            <summary>
            Gets the local settings merged with parent settings.
            </summary>
        </member>
        <member name="P:StyleCop.SettingsMerger.ParentMergedSettings">
            <summary>
            Gets the merged parent settings which would be merged with the local settings.
            </summary>
        </member>
        <member name="M:StyleCop.SettingsMerger.MergePropertyCollections(StyleCop.PropertyCollection,StyleCop.PropertyCollection,StyleCop.PropertyCollection)">
            <summary>
            Merged two sets of property collections together.
            </summary>
            <param name="originalPropertyCollection">
            The original property collection.
            </param>
            <param name="overridingPropertyCollection">
            The overriding property collection.
            </param>
            <param name="mergedPropertyCollection">
            The merged property collection.
            </param>
        </member>
        <member name="M:StyleCop.SettingsMerger.DetermineMergeType(StyleCop.Settings,StyleCop.StyleCopEnvironment)">
            <summary>
            Determines the type of merge to perform, based on the local settings file.
            </summary>
            <param name="settings">
            The settings file
            </param>
            <param name="environment">
            The environment.
            </param>
            <returns>
            Returns the merge type.
            </returns>
        </member>
        <member name="M:StyleCop.SettingsMerger.MergeCollectionProperties(StyleCop.PropertyCollection,StyleCop.PropertyValue,StyleCop.PropertyValue)">
            <summary>
            Merges two collection properties together.
            </summary>
            <param name="mergedPropertyCollection">
            The merged property collection.
            </param>
            <param name="originalProperty">
            The original property to merge.
            </param>
            <param name="overridingProperty">
            The overriding property to merge.
            </param>
        </member>
        <member name="M:StyleCop.SettingsMerger.MergeSettings(StyleCop.Settings,StyleCop.Settings)">
            <summary>
            Merges two settings files together.
            </summary>
            <param name="originalSettings">
            The original settings.
            </param>
            <param name="overridingSettings">
            The settings which are overriding the original settings.
            </param>
            <returns>
            Returns the merged settings.
            </returns>
        </member>
        <member name="M:StyleCop.SettingsMerger.FindMergedSettingsThroughLinkedSettings(StyleCop.Settings,System.Boolean)">
            <summary>
            Finds a linked settings document and merges it with the given settings.
            </summary>
            <param name="originalSettings">
            The original settings.
            </param>
            <param name="mergeOriginal">
            Indicates whether the merge the original settings with the linked settings.
            </param>
            <returns>
            Returns the merged settings.
            </returns>
            <remarks>
            This method is designed to work only in file-based environments.
            </remarks>
        </member>
        <member name="M:StyleCop.SettingsMerger.FindMergedSettingsThroughParentPaths(StyleCop.Settings,System.Boolean)">
            <summary>
            Scans all parent paths above the path containing the given settings file, and merges all settings together.
            </summary>
            <param name="originalSettings">
            The original settings to merge.
            </param>
            <param name="mergeOriginal">
            Indicates whether the merge the original settings with the parent settings files.
            </param>
            <returns>
            Returns the merged settings.
            </returns>
        </member>
        <member name="T:StyleCop.StringProperty">
            <summary>
            A string property.
            </summary>
        </member>
        <member name="M:StyleCop.StringProperty.#ctor(StyleCop.PropertyDescriptor{System.String},System.String)">
            <summary>
            Initializes a new instance of the StringProperty class.
            </summary>
            <param name="propertyDescriptor">
            The property descriptor that this value represents.
            </param>
            <param name="value">
            The value of the property.
            </param>
        </member>
        <member name="M:StyleCop.StringProperty.#ctor(StyleCop.IPropertyContainer,System.String,System.String)">
            <summary>
            Initializes a new instance of the StringProperty class.
            </summary>
            <param name="propertyContainer">
            The container of this property.
            </param>
            <param name="propertyName">
            The name of the property.
            </param>
            <param name="value">
            The value of the property.
            </param>
        </member>
        <member name="M:StyleCop.StringProperty.Clone">
            <summary>
            Clones the contents of the property.
            </summary>
            <returns>Returns the cloned property.</returns>
        </member>
        <member name="T:StyleCop.WritableSettings">
            <summary>
            Represents a single StyleCop settings file in read-write mode.
            </summary>
        </member>
        <member name="F:StyleCop.WritableSettings.CurrentSettingsVersion">
            <summary>
            This is the StyleCop.Settings file version number written into files.
            </summary>
        </member>
        <member name="M:StyleCop.WritableSettings.#ctor(StyleCop.StyleCopCore,System.String,System.Xml.XmlDocument,System.DateTime)">
            <summary>
            Initializes a new instance of the WritableSettings class.
            </summary>
            <param name="core">
            The StyleCop core instance.
            </param>
            <param name="location">
            The location of the settings document.
            </param>
            <param name="contents">
            The initial contents of the settings document.
            </param>
            <param name="writeTime">
            The time when the settings were last updated.
            </param>
        </member>
        <member name="M:StyleCop.WritableSettings.NewDocument">
            <summary>
            Creates a new settings document.
            </summary>
            <returns>Returns the new document.</returns>
        </member>
        <member name="M:StyleCop.WritableSettings.ClearAddInSetting(StyleCop.StyleCopAddIn,System.String)">
            <summary>
            Clears a setting for the given add-in.
            </summary>
            <param name="addIn">
            The add-in.
            </param>
            <param name="propertyName">
            The name of the property to clear.
            </param>
        </member>
        <member name="M:StyleCop.WritableSettings.SetAddInSetting(StyleCop.StyleCopAddIn,StyleCop.PropertyValue)">
            <summary>
            Sets a setting for the given add-in.
            </summary>
            <param name="addIn">
            The add-in.
            </param>
            <param name="property">
            The setting property to set.
            </param>
        </member>
        <member name="M:StyleCop.WritableSettings.WriteSettingsToDocument(StyleCop.StyleCopEnvironment)">
            <summary>
            Writes the settings into the given document.
            </summary>
            <param name="environment">
            The environment that StyleCop is running under, if any.
            </param>
            <returns>
            Returns the new settings document.
            </returns>
        </member>
        <member name="M:StyleCop.WritableSettings.SaveBooleanProperty(System.Xml.XmlNode,StyleCop.BooleanProperty,System.String)">
            <summary>
            Saves the given boolean property into the given node.
            </summary>
            <param name="rootNode">
            The node under which to store the new property node.
            </param>
            <param name="property">
            The property to save.
            </param>
            <param name="propertyName">
            The name of the property.
            </param>
            <returns>
            Returns true if the property was written.
            </returns>
        </member>
        <member name="M:StyleCop.WritableSettings.SaveCollectionProperty(System.Xml.XmlNode,StyleCop.CollectionProperty,System.String)">
            <summary>
            Saves the given collection property into the given node.
            </summary>
            <param name="rootNode">
            The node under which to store the new property node.
            </param>
            <param name="property">
            The property to save.
            </param>
            <param name="propertyName">
            The name of the property.
            </param>
            <returns>
            Returns true if the property was written.
            </returns>
        </member>
        <member name="M:StyleCop.WritableSettings.SaveIntProperty(System.Xml.XmlNode,StyleCop.IntProperty,System.String)">
            <summary>
            Saves the given <see cref="T:System.Int32"/> property into the given node.
            </summary>
            <param name="rootNode">
            The node under which to store the new property node.
            </param>
            <param name="property">
            The property to save.
            </param>
            <param name="propertyName">
            The name of the property.
            </param>
            <returns>
            Returns true if the property was written.
            </returns>
        </member>
        <member name="M:StyleCop.WritableSettings.SavePropertyCollection(System.Xml.XmlNode,System.String,StyleCop.PropertyCollection,StyleCop.PropertyCollection,System.Boolean,System.String)">
            <summary>
            Saves the given property collection.
            </summary>
            <param name="rootNode">
            The node to store the property collection beneath.
            </param>
            <param name="nodeName">
            The name of the new property collection node.
            </param>
            <param name="properties">
            The property collection to store.
            </param>
            <param name="parentProperties">
            The corresponding property collection from the parent settings, if any.
            </param>
            <param name="aggregate">
            Indicates whether the collection is aggregated with the parent collection.
            </param>
            <param name="nodeNameAttribute">
            An optional name attribute value for the new property node.
            </param>
            <returns>
            Returns true if at least one property was saved.
            </returns>
        </member>
        <member name="M:StyleCop.WritableSettings.SavePropertyValue(System.Xml.XmlNode,StyleCop.PropertyValue,System.String)">
            <summary>
            Saves a single property value.
            </summary>
            <param name="rootCollectionNode">
            The collection node containing the property.
            </param>
            <param name="property">
            The property to save.
            </param>
            <param name="propertyName">
            The name of the property.
            </param>
            <returns>
            Returns true if the property was saved; otherwise false.
            </returns>
        </member>
        <member name="M:StyleCop.WritableSettings.SaveRuleProperty(System.Xml.XmlNode,StyleCop.PropertyValue,System.String,System.String)">
            <summary>
            Saves a rule property.
            </summary>
            <param name="rootNode">
            The node to store the property collection beneath.
            </param>
            <param name="property">
            The property to save.
            </param>
            <param name="ruleName">
            The name of the rule.
            </param>
            <param name="propertyName">
            The name of the property.
            </param>
            <returns>
            Returns true if the property was saved; otherwise false.
            </returns>
        </member>
        <member name="M:StyleCop.WritableSettings.SaveStringProperty(System.Xml.XmlNode,StyleCop.StringProperty,System.String)">
            <summary>
            Saves the given string property into the given node.
            </summary>
            <param name="rootNode">
            The node under which to store the new property node.
            </param>
            <param name="property">
            The property to save.
            </param>
            <param name="propertyName">
            The name of the property.
            </param>
            <returns>
            Returns true if the property was written.
            </returns>
        </member>
        <member name="M:StyleCop.WritableSettings.SaveSettingsIntoXmlDocument(System.Xml.XmlDocument,StyleCop.StyleCopEnvironment,System.Xml.XmlElement,StyleCop.Settings)">
            <summary>
            Saves the Settings provided into the XmlDocument.
            </summary>
            <param name="document">
            The root document.
            </param>
            <param name="environment">
            The environment that StyleCop is running under, if any.
            </param>
            <param name="rootElement">
            The element to save our settings to.
            </param>
            <param name="settingsToSave">
            The settings to save.
            </param>
        </member>
        <member name="T:StyleCop.StyleCopAddIn">
            <summary>
            An add-in to the StyleCop engine.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopAddIn.DefaultCheckIdPrefix">
            <summary>
            The default CheckId prefix for rules.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopAddIn.id">
            <summary>
            The unique ID of the add-in.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopAddIn.propertyDescriptors">
            <summary>
            The property descriptors for the add-in.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopAddIn.rules">
            <summary>
            Stores the list of rules for the add-in.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopAddIn.core">
            <summary>
            The StyleCop core instance.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopAddIn.description">
            <summary>
            The user-friendly description of the add-in.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopAddIn.name">
            <summary>
            The user-friendly name of the add-in.
            </summary>
        </member>
        <member name="M:StyleCop.StyleCopAddIn.#ctor">
            <summary>
            Initializes a new instance of the StyleCopAddIn class.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopAddIn.Core">
            <summary>
            Gets the StyleCop core instance.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopAddIn.Description">
            <summary>
            Gets the description of the add-in.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopAddIn.Id">
            <summary>
            Gets the unique ID of the add-in.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopAddIn.Name">
            <summary>
            Gets the name of the add-in.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopAddIn.PropertyDescriptors">
            <summary>
            Gets the collection of property descriptors exposed by the add-in.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopAddIn.SettingsPages">
            <summary>
            Gets the property pages to expose on the StyleCop settings dialog for this add-in.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopAddIn.TimeStamp">
            <summary>
            Gets the time stamp of this assembly.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopAddIn.AddInRules">
            <summary>
            Gets the collection of rules exposed by this analyzer.
            </summary>
        </member>
        <member name="M:StyleCop.StyleCopAddIn.AddViolation(StyleCop.ICodeElement,System.String,System.Object[])">
            <summary>
            Adds one violation to the given code element.
            </summary>
            <param name="element">
            The element that the violation appears in.
            </param>
            <param name="ruleName">
            The name of the rule that triggered the violation.
            </param>
            <param name="values">
            String parameters to insert into the violation context string.
            </param>
        </member>
        <member name="M:StyleCop.StyleCopAddIn.AddViolation(StyleCop.ICodeElement,System.Enum,System.Object[])">
            <summary>
            Adds one violation to the given code element.
            </summary>
            <param name="element">
            The element that the violation appears in.
            </param>
            <param name="ruleName">
            The name of the rule that triggered the violation.
            </param>
            <param name="values">
            String parameters to insert into the violation context string.
            </param>
        </member>
        <member name="M:StyleCop.StyleCopAddIn.AddViolation(StyleCop.ICodeElement,StyleCop.CodeLocation,System.String,System.Object[])">
            <summary>
            Adds one violation to the given code element.
            </summary>
            <param name="element">
            The element that the violation appears in.
            </param>
            <param name="location">
            The location in the code where the violation occurs.
            </param>
            <param name="ruleName">
            The name of the rule that triggered the violation.
            </param>
            <param name="values">
            String parameters to insert into the violation string.
            </param>
        </member>
        <member name="M:StyleCop.StyleCopAddIn.AddViolation(StyleCop.ICodeElement,System.Int32,System.String,System.Object[])">
            <summary>
            Adds one violation to the given code element.
            </summary>
            <param name="element">
            The element that the violation appears in.
            </param>
            <param name="line">
            The line in the code where the violation occurs.
            </param>
            <param name="ruleName">
            The name of the rule that triggered the violation.
            </param>
            <param name="values">
            String parameters to insert into the violation string.
            </param>
        </member>
        <member name="M:StyleCop.StyleCopAddIn.AddViolation(StyleCop.ICodeElement,StyleCop.CodeLocation,System.Enum,System.Object[])">
            <summary>
            Adds one violation to the given code element.
            </summary>
            <param name="element">
            The element that the violation appears in.
            </param>
            <param name="location">
            The location in the code where the violation occurs.
            </param>
            <param name="ruleName">
            The name of the rule that triggered the violation.
            </param>
            <param name="values">
            String parameters to insert into the violation string.
            </param>
        </member>
        <member name="M:StyleCop.StyleCopAddIn.AddViolation(StyleCop.ICodeElement,System.Int32,System.Enum,System.Object[])">
            <summary>
            Adds one violation to the given code element.
            </summary>
            <param name="element">
            The element that the violation appears in.
            </param>
            <param name="line">
            The line in the code where the violation occurs.
            </param>
            <param name="ruleName">
            The name of the rule that triggered the violation.
            </param>
            <param name="values">
            String parameters to insert into the violation string.
            </param>
        </member>
        <member name="M:StyleCop.StyleCopAddIn.ClearSetting(StyleCop.WritableSettings,System.String)">
            <summary>
            Clears the given property for the add-in.
            </summary>
            <param name="settings">
            The settings.
            </param>
            <param name="propertyName">
            The name of the property to clear.
            </param>
        </member>
        <member name="M:StyleCop.StyleCopAddIn.GetRule(System.String)">
            <summary>
            Gets the rule with the given name.
            </summary>
            <param name="ruleName">
            The name of the rule to retrieve.
            </param>
            <returns>
            Returns the rule or null if there is no rule with the given name.
            </returns>
        </member>
        <member name="M:StyleCop.StyleCopAddIn.GetRuleSetting(StyleCop.Settings,System.String,System.String)">
            <summary>
            Gets a setting for a rule exposed by the add-in.
            </summary>
            <param name="settings">
            The settings.
            </param>
            <param name="ruleName">
            The name of the rule.
            </param>
            <param name="propertyName">
            The name of the setting property.
            </param>
            <returns>
            Returns the setting or null if it does not exist.
            </returns>
        </member>
        <member name="M:StyleCop.StyleCopAddIn.GetSetting(StyleCop.Settings,System.String)">
            <summary>
            Gets a setting for the add-in.
            </summary>
            <param name="settings">
            The settings.
            </param>
            <param name="propertyName">
            The name of the setting property.
            </param>
            <returns>
            Returns the setting or null if it does not exist.
            </returns>
        </member>
        <member name="M:StyleCop.StyleCopAddIn.InitializeAddIn">
            <summary>
            Allows the add-in to initialize itself, after all initialization documents have been processed.
            </summary>
        </member>
        <member name="M:StyleCop.StyleCopAddIn.IsRuleEnabled(StyleCop.CodeDocument,System.String)">
            <summary>
            Gets a value indicating whether the given rule is enabled for the given document.
            </summary>
            <param name="document">
            The document.
            </param>
            <param name="ruleName">
            The rule to check.
            </param>
            <returns>
            Returns true if the rule is enabled; otherwise false.
            </returns>
        </member>
        <member name="M:StyleCop.StyleCopAddIn.IsRuleSuppressed(StyleCop.ICodeElement,System.String,System.String,System.String)">
            <summary>
            Gets a value indicating whether the given rule is suppressed for the given element.
            </summary>
            <param name="element">
            The element to check.
            </param>
            <param name="ruleCheckId">
            The Id of the rule to check.
            </param>
            <param name="ruleName">
            The Name of the rule to check.
            </param>
            <param name="ruleNamespace">
            The Namespace of the rule to check.
            </param>
            <returns>
            Returns true if the rule is suppressed; otherwise false.
            </returns>
        </member>
        <member name="M:StyleCop.StyleCopAddIn.SetSetting(StyleCop.WritableSettings,StyleCop.PropertyValue)">
            <summary>
            Sets the given property on the add-in.
            </summary>
            <param name="settings">
            The settings.
            </param>
            <param name="property">
            The property to set.
            </param>
        </member>
        <member name="M:StyleCop.StyleCopAddIn.SolutionClosing">
            <summary>
            Called when the user closes the solution.
            </summary>
        </member>
        <member name="M:StyleCop.StyleCopAddIn.SolutionOpened">
            <summary>
            Called when the user opens a new solution.
            </summary>
        </member>
        <member name="M:StyleCop.StyleCopAddIn.GetIdFromAddInType(System.Type)">
            <summary>
            Gets the ID of an add-in given the type of that add-in.
            </summary>
            <param name="addInType">
            The type of the add-in.
            </param>
            <returns>
            Returns the ID of the add-in.
            </returns>
        </member>
        <member name="M:StyleCop.StyleCopAddIn.Initialize(StyleCop.StyleCopCore,System.Xml.XmlDocument,System.Boolean,System.Boolean)">
            <summary>
            Initializes the add-in.
            </summary>
            <param name="styleCopCore">
            The StyleCop core instance.
            </param>
            <param name="initializationXml">
            The add-in's XML initialization document.
            </param>
            <param name="topMostType">
            Indicates whether the xml document comes from the top-most type in the 
            add-in's type hierarchy.
            </param>
            <param name="isKnownAssembly">
            Indicates whether the add-in comes from a known assembly.
            </param>
        </member>
        <member name="M:StyleCop.StyleCopAddIn.ImportInitializationXml(System.Xml.XmlDocument,System.Boolean,System.Boolean)">
            <summary>
            Parses the Xml document which initializes the add-in.
            </summary>
            <param name="document">
            The xml document to load.
            </param>
            <param name="topmostType">
            Indicates whether the xml document comes from the top-most type in the 
            add-in's type hierarchy.
            </param>
            <param name="isKnownAssembly">
            Indicates whether the add-in comes from a known assembly.
            </param>
        </member>
        <member name="M:StyleCop.StyleCopAddIn.TrimXmlContent(System.String)">
            <summary>
            Trims extra whitespace and newlines out of Xml text data.
            </summary>
            <param name="content">
            The original Xml content.
            </param>
            <returns>
            Returns the trimmed content.
            </returns>
        </member>
        <member name="M:StyleCop.StyleCopAddIn.AddRulesFromXml(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            Parses the given Xml document and loads the rules.
            </summary>
            <param name="rulesNode">
            The rules node.
            </param>
            <param name="ruleGroup">
            The optional rule group name.
            </param>
            <param name="isKnownAssembly">
            Indicates whether the add-in comes from a known assembly.
            </param>
        </member>
        <member name="T:StyleCop.StyleCopCore">
            <summary>
            The main entry point into the StyleCop core module.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopCore.ProjectSettingsPropertyPageIdProperty">
            <summary>
            The name of the ID for the project settings property page dialog.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopCore.versionNumberMajorMinor">
            <summary>
            The Major.Minor parts of the StyleCop version number i.e. 4.3 or 4.5.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopCore.versionNumberFull">
            <summary>
            The full version number of StyleCop i.e. 4.3.1.3 or 4.5.0.23.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopCore.analyzing">
            <summary>
            Indicates whether the module is currently analyzing files.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopCore.cancel">
            <summary>
            True if the analyze should be canceled.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopCore.writeResultsCache">
            <summary>
            Indicates whether the results cache should be saved for each analyzed source code document.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopCore.displayUI">
            <summary>
            Indicates whether it is ok to display UI dialogs.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopCore.parsers">
            <summary>
            The list of loaded code parsers.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopCore.analyzers">
            <summary>
            The list of loaded analyzers.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopCore.environment">
            <summary>
            The environment that StyleCop is running under.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopCore.registry">
            <summary>
            The registry manager.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopCore.coreParser">
            <summary>
            The fake core parser.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopCore.hostTag">
            <summary>
            A tag object which can be optionally filled in by the host.
            </summary>
        </member>
        <member name="M:StyleCop.StyleCopCore.#ctor">
            <summary>
            Initializes a new instance of the StyleCopCore class.
            </summary>
        </member>
        <member name="M:StyleCop.StyleCopCore.#ctor(StyleCop.StyleCopEnvironment)">
            <summary>
            Initializes a new instance of the StyleCopCore class.
            </summary>
            <param name="environment">The environment that StyleCop is running under.</param>
        </member>
        <member name="M:StyleCop.StyleCopCore.#ctor(StyleCop.StyleCopEnvironment,System.Object)">
            <summary>
            Initializes a new instance of the StyleCopCore class.
            </summary>
            <param name="environment">The environment that StyleCop is running under.</param>
            <param name="hostTag">A tag object which can be optionally filled in by the host.</param>
        </member>
        <member name="E:StyleCop.StyleCopCore.ViolationEncountered">
            <summary>
            Event that is fired when a violation has been encountered.
            </summary>
        </member>
        <member name="E:StyleCop.StyleCopCore.OutputGenerated">
            <summary>
            Event that is fired when a line of output is generated.
            </summary>
        </member>
        <member name="E:StyleCop.StyleCopCore.ProjectSettingsChanged">
            <summary>
            Event that is fired when one or more settings are changed on a project.
            </summary>
        </member>
        <member name="E:StyleCop.StyleCopCore.AddSettingsPages">
            <summary>
            Event that is fired before the settings dialog is displayed, to allow
            listeners to add settings pages.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopCore.PlatformID">
            <summary>
            Gets the current operating system PlatformID.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopCore.Analyzing">
            <summary>
            Gets a value indicating whether StyleCop is currently analyzing files.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopCore.Cancel">
            <summary>
            Gets or sets a value indicating whether the currently running analysis should cancel.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopCore.TimeStamp">
            <summary>
            Gets the time stamp of this assembly.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopCore.WriteResultsCache">
            <summary>
            Gets or sets a value indicating whether the results cache should be saved on disk.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopCore.DisplayUI">
            <summary>
            Gets or sets a value indicating whether it is ok to display UI dialogs.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopCore.Parsers">
            <summary>
            Gets the collection of loaded code parsers.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopCore.Environment">
            <summary>
            Gets the environment that StyleCop is running under.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopCore.Registry">
            <summary>
            Gets the Registry object, which can be used for writing items to StyleCop's registry key.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopCore.PropertyDescriptors">
            <summary>
            Gets the collection of global property descriptors exposed by StyleCop.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopCore.HostTag">
            <summary>
            Gets the value of the optional tag filled in by the host at the time of this
            instance's creation.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopCore.CoreViolations">
            <summary>
            Gets the list of violations that can be triggered by the core module.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopCore.VersionNumberMajorMinor">
            <summary>
            Gets the Major.Minor parts of the StyleCop version number i.e. 4.3 or 4.5.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopCore.VersionNumberFull">
            <summary>
            Gets the full version number of StyleCop i.e. 4.3.1.3 or 4.5.0.23.
            </summary>
        </member>
        <member name="M:StyleCop.StyleCopCore.LoadAddInResourceXml(System.Type,System.String)">
            <summary>
            Loads the add-in resource xml at the given path.
            </summary>
            <param name="addInType">The add-in type.</param>
            <param name="resourceId">The resource ID of the analyzer xml.</param>
            <returns>Returns the loaded Xml or null if none was loaded.</returns>
        </member>
        <member name="M:StyleCop.StyleCopCore.Initialize(System.Collections.Generic.ICollection{System.String},System.Boolean)">
            <summary>
            Initializes the StyleCop core instance. This must be called before
            the object can be used.
            </summary>
            <param name="addInPaths">The list of paths to search under for parser and analyzer addins.
            Can be null if no addin paths are provided.</param>
            <param name="loadFromDefaultPath">Indicates whether to load addins
            from the default path, where the core binary is located.</param>
        </member>
        <member name="M:StyleCop.StyleCopCore.Analyze(System.Collections.Generic.IList{StyleCop.CodeProject})">
            <summary>
            Analyzes the files within the given projects.
            </summary>
            <param name="projects">The list of code projects to analyze.</param>
        </member>
        <member name="M:StyleCop.StyleCopCore.Analyze(System.Collections.Generic.IList{StyleCop.CodeProject},System.String)">
            <summary>
            Analyzes the files within the given projects.
            </summary>
            <param name="projects">The list of code projects to analyze.</param>
            <param name="settingsFilePath">The path to a StyleCop settings file to use during analysis.</param>
        </member>
        <member name="M:StyleCop.StyleCopCore.FullAnalyze(System.Collections.Generic.IList{StyleCop.CodeProject})">
            <summary>
            Analyzes the files within the given projects, ignoring all cached results.
            </summary>
            <param name="projects">The list of code projects to analyze.</param>
        </member>
        <member name="M:StyleCop.StyleCopCore.FullAnalyze(System.Collections.Generic.IList{StyleCop.CodeProject},System.String)">
            <summary>
            Analyzes the files within the given projects, ignoring all cached results.
            </summary>
            <param name="projects">The list of code projects to analyze.</param>
            <param name="settingsFilePath">The path to a StyleCop settings file to use during analysis.</param>
        </member>
        <member name="M:StyleCop.StyleCopCore.ShowSettings(System.String)">
            <summary>
            Displays the settings dialog for a project.
            </summary>
            <param name="settingsFilePath">The path to the settings file to edit.</param>
            <returns>Returns true if at least one settings change was made.</returns>
        </member>
        <member name="M:StyleCop.StyleCopCore.GetAnalyzer(System.String)">
            <summary>
            Gets the analyzer with the given ID.
            </summary>
            <param name="analyzerId">The ID of the analyzer.</param>
            <returns>Returns the analyzer or null if there is no loaded analyzer with the given ID.</returns>
        </member>
        <member name="M:StyleCop.StyleCopCore.GetParser(System.String)">
            <summary>
            Gets the parser with the given ID.
            </summary>
            <param name="parserId">The ID of the parser.</param>
            <returns>Returns the parser or null if there is no loaded parser with the given ID.</returns>
        </member>
        <member name="M:StyleCop.StyleCopCore.GetAddIn(System.String)">
            <summary>
            Gets the add-in with the given ID.
            </summary>
            <param name="addInId">The ID of the add-in.</param>
            <returns>Returns the add-in or null if there is no loaded add-in with the given ID.</returns>
        </member>
        <member name="M:StyleCop.StyleCopCore.GetSettingsPages(StyleCop.StyleCopCore)">
            <summary>
            Gets the pages to display on the settings dialog.
            </summary>
            <param name="core">The StyleCop core instance.</param>
            <returns>Returns the list of settings pages to display.</returns>
        </member>
        <member name="M:StyleCop.StyleCopCore.CleanPath(System.String)">
            <summary>
            Cleans up the given path so that it can always be matched against other paths.
            </summary>
            <param name="path">The path to clean.</param>
            <returns>Returns the cleaned path.</returns>
        </member>
        <member name="M:StyleCop.StyleCopCore.AddViolation(StyleCop.SourceCode,StyleCop.Violation)">
            <summary>
            Adds a generic violation.
            </summary>
            <param name="sourceCode">The file to add the violation to.</param>
            <param name="violation">The violation to add to the element.</param>
        </member>
        <member name="M:StyleCop.StyleCopCore.AddViolation(StyleCop.ICodeElement,StyleCop.Violation)">
            <summary>
            Adds a generic violation.
            </summary>
            <param name="element">The element to add the violation to.</param>
            <param name="violation">The violation to add to the element.</param>
        </member>
        <member name="M:StyleCop.StyleCopCore.AddViolation(StyleCop.ICodeElement,StyleCop.Rule,StyleCop.CodeLocation,System.Object[])">
            <summary>
            Adds a generic violation.
            </summary>
            <param name="element">The element to add the violation to.</param>
            <param name="type">The type of violation to add.</param>
            <param name="location">The location the violation appears on.</param>
            <param name="values">The string values to add to the context string.</param>
        </member>
        <member name="M:StyleCop.StyleCopCore.AddViolation(StyleCop.ICodeElement,StyleCop.Rule,System.Int32,System.Object[])">
            <summary>
            Adds a generic violation.
            </summary>
            <param name="element">The element to add the violation to.</param>
            <param name="type">The type of violation to add.</param>
            <param name="line">Line the violation appears on.</param>
            <param name="values">The string values to add to the context string.</param>
        </member>
        <member name="M:StyleCop.StyleCopCore.AddViolation(StyleCop.SourceCode,StyleCop.Rule,System.Int32,System.Object[])">
            <summary>
            Adds a generic violation.
            </summary>
            <param name="sourceCode">The source code document to add the violation to.</param>
            <param name="type">The type of violation to add.</param>
            <param name="line">Line the violation appears on.</param>
            <param name="values">The string values to add to the context string.</param>
        </member>
        <member name="M:StyleCop.StyleCopCore.SignalOutput(System.String)">
            <summary>
            Fires an output generated event.
            </summary>
            <param name="output">The output to display.</param>
        </member>
        <member name="M:StyleCop.StyleCopCore.SignalOutput(Microsoft.Build.Framework.MessageImportance,System.String)">
            <summary>
            Fires an output generated event.
            </summary>
            <param name="importance">Level of importance for the output.</param>
            <param name="output">The output to display.</param>
        </member>
        <member name="M:StyleCop.StyleCopCore.ShowSettings(System.String,System.String)">
            <summary>
            Displays the settings dialog for a project.
            </summary>
            <param name="settingsPath">The path to the settings to edit.</param>
            <param name="id">The ID of the settings property page.</param>
            <returns>Returns true if at least one settings change was made.</returns>
        </member>
        <member name="M:StyleCop.StyleCopCore.ShowProjectSettings(System.String,System.Collections.Generic.IList{StyleCop.IPropertyControlPage},System.String)">
            <summary>
            Displays a settings dialog for a project.
            </summary>
            <param name="settingsPath">The path to the settings.</param>
            <param name="pages">The list of pages to display on the settings dialog.</param>
            <param name="id">A unique identifier string for the property page group.</param>
            <returns>Returns true if at least one settings change was made.</returns>
        </member>
        <member name="M:StyleCop.StyleCopCore.ShowProjectSettings(StyleCop.WritableSettings,System.Collections.Generic.IList{StyleCop.IPropertyControlPage},System.String)">
            <summary>
            Displays a settings dialog for a project.
            </summary>
            <param name="settings">The settings manager.</param>
            <param name="pages">The list of pages to display on the settings dialog.</param>
            <param name="id">A unique identifier string for the property page group.</param>
            <returns>Returns true if at least one settings change was made.</returns>
        </member>
        <member name="M:StyleCop.StyleCopCore.CompareCachedConfiguration(StyleCop.Configuration,System.String)">
            <summary>
            Compares the given configuration with the given list of flags.
            </summary>
            <param name="configuration">The configuration object.</param>
            <param name="flagList">The list of flags.</param>
            <returns>Returns true if the configuration is identical to the flag list, or
            false otherwise.</returns>
        </member>
        <member name="M:StyleCop.StyleCopCore.InitializeProjectForAnalysis(StyleCop.CodeProject,StyleCop.StyleCopThread.Data,StyleCop.ResultsCache)">
            <summary>
            Initializes the project to prepare it for analysis.
            </summary>
            <param name="project">The project to initialize.</param>
            <param name="data">The analysis data object.</param>
            <param name="cache">The file cache.</param>
        </member>
        <member name="M:StyleCop.StyleCopCore.GetNextAddInAttributeType(System.Type,System.Type,System.Object@)">
            <summary>
            Gets the next type in the given add-in type's inheritance chain that implements the given attribute.
            </summary>
            <param name="addInType">The add-in type.</param>
            <param name="attributeType">The attribute type.</param>
            <param name="attribute">Returns the attribute, if found.</param>
            <returns>Returns the next type, or null if there are no types containing the attribute.</returns>
        </member>
        <member name="M:StyleCop.StyleCopCore.ComparePublicKeys(System.Byte[],System.Byte[])">
            <summary>
            Compares two public keys to see if they are the same.
            </summary>
            <param name="key1">The first public key.</param>
            <param name="key2">The second public key.</param>
            <returns>true if the keys are the same; false otherwise.</returns>
        </member>
        <member name="M:StyleCop.StyleCopCore.OnViolationEncountered(StyleCop.ViolationEventArgs)">
            <summary>
            Called when a violation is encountered while analyzing a code document. This can be called simultaneously from several threads and so any code must be thread safe.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:StyleCop.StyleCopCore.OnOutputGenerated(StyleCop.OutputEventArgs)">
            <summary>
            Called when a line of output is generated while analyzing a code document. This can be called simultaneously from several threads and so any code must be thread safe.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:StyleCop.StyleCopCore.OnProjectSettingsChanged(System.EventArgs)">
            <summary>
            Called when the settings are changed for one or more projects. This can be called simultaneously from several threads and so any code must be thread safe.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:StyleCop.StyleCopCore.OnAddSettingsPages(StyleCop.AddSettingsPagesEventArgs)">
            <summary>
            Event that is fired before the settings dialog is displayed, to allow
            listeners to add settings pages.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:StyleCop.StyleCopCore.LoadAddins(System.String,System.Byte[])">
            <summary>
            Loads the addin modules.
            </summary>
            <param name="path">The path to the addin modules.</param>
            <param name="publicKey">The public key of the core assembly.</param>
        </member>
        <member name="M:StyleCop.StyleCopCore.InitializeAddIn(System.Type,System.Boolean)">
            <summary>
            Instantiates an add-in object from the given assembly, with the given class name.
            </summary>
            <param name="addInType">The type of the add-in.</param>
            <param name="isKnownAssembly">Indicates whether the add-in comes from a known assembly.</param>
            <returns>Returns the created, initialized add-in.</returns>
        </member>
        <member name="M:StyleCop.StyleCopCore.Analyze(System.Collections.Generic.IList{StyleCop.CodeProject},System.Boolean,System.String)">
            <summary>
            Performs analysis of the given projects.
            </summary>
            <param name="projects">The list of code projects to analyze.</param>
            <param name="ignoreCache">True if the cache files should be ignored.</param>
            <param name="settingsPath">The path to the settings to use during analysis.</param>
        </member>
        <member name="M:StyleCop.StyleCopCore.RunWorkerThreads(StyleCop.StyleCopThread.Data,System.Int32)">
            <summary>
            Launches the worker threads and waits for them to complete.
            </summary>
            <param name="data">The threading data.</param>
            <param name="count">The number of threads to create.</param>
            <returns>Returns a value indicating whether analysis of all
            files has been completed. If this returns false, another round
            of analysis must be performed.</returns>
        </member>
        <member name="T:StyleCop.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.AlertDialogWithOptionsInNonUIState">
            <summary>
              Looks up a localized string similar to An AlertDialog which provides the user an option has been fired while the program is running in a non-UI state. In this state, the only valid option for AlertDialog is MessageBoxButtons.OK. Check the DisplayUI property on the StyleCopCore object before calling an AlertDialog which provides other options..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.AllFiles">
            <summary>
              Looks up a localized string similar to All files.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.AnalysisErrorOccurred">
            <summary>
              Looks up a localized string similar to An error occurred during the analysis: {0}.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.AnalyzersTab">
            <summary>
              Looks up a localized string similar to Rules.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.BothItemsMustBeNullOrNonNull">
            <summary>
              Looks up a localized string similar to Both nodes must be null, or both nodes must be non-null..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.CacheTab">
            <summary>
              Looks up a localized string similar to Options.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.CannotBeNull">
            <summary>
              Looks up a localized string similar to Must not be null.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.CannotDisplaySettingsInNonUIMode">
            <summary>
              Looks up a localized string similar to StyleCop is running in non-UI mode. The settings dialog cannot be displayed in this mode. Check the status of the DisplayUI property on the StyleCopCore object before attempting to display settings..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.CannotLoadSettingsFilePath">
            <summary>
              Looks up a localized string similar to The settings file at this path cannot be loaded: {0}.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.CollectionCannotBeEmptyOrNull">
            <summary>
              Looks up a localized string similar to The collection must not be empty or null.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.ComparingDifferentPropertyTypes">
            <summary>
              Looks up a localized string similar to It is not possible to compare properties of different types..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.CouldNotSaveSettingsFile">
            <summary>
              Looks up a localized string similar to The settings file could not be saved: {0}.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.CouldNotSaveViolationsFile">
            <summary>
              Looks up a localized string similar to Could not save the violations file..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.CouldNotSaveViolationsFileWithException">
            <summary>
              Looks up a localized string similar to Could not save the violations file. An exception occurred: {0}.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.DisabledByDefaultAttributeDeprecatedForAddIns">
            <summary>
              Looks up a localized string similar to Analyzers are no longer allowed by be disabled by default. The DisableByDefault attribute has been deprecated and is not allowed to appear on a SourceAnalyzer node. Instead, place a DisabledByDefault attribute on Rule nodes to indicate individual rules which are disabled by default..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.EditDefaultSettingsWarning">
            <summary>
              Looks up a localized string similar to You are about to edit the default settings which are applied to all code on which this installation of StyleCop is run. You may need special permissions to write to the file. Are you sure you want to do this?.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.EmptySettingsFilePath">
            <summary>
              Looks up a localized string similar to The settings file path must not be empty..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.EnterValidDeprecatedWord">
            <summary>
              Looks up a localized string similar to Please enter a valid deprecated word and it&apos;s alternative before clicking the Add button.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.EnterValidFolder">
            <summary>
              Looks up a localized string similar to Enter a valid folder path before clicking Add.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.EnterValidWord">
            <summary>
              Looks up a localized string similar to Please enter a valid word before clicking the Add button.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.ErrorTag">
            <summary>
              Looks up a localized string similar to Error: {0}.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.ExceptionWhileLoadingAddins">
            <summary>
              Looks up a localized string similar to An exception occurred while loading one of the StyleCop add-ins: {0}, {1}.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.GlobalSettingsFile">
            <summary>
              Looks up a localized string similar to Global Settings File.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.InternalError">
            <summary>
              Looks up a localized string similar to Internal Error.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.InvalidAddInXmlDocument">
            <summary>
              Looks up a localized string similar to The analyzer or parser add-in returned a null or empty Xml initialization document..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.InvalidWindowLocationInputString">
            <summary>
              Looks up a localized string similar to The window location input string is invalid: {0}.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.LocalSettingsNotOpenedOrCreated">
            <summary>
              Looks up a localized string similar to The local settings file could not be opened or created: {0}.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.MissingAddInDescription">
            <summary>
              Looks up a localized string similar to There is no description for the add-in..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.MissingNameAttributeOnRootNode">
            <summary>
              Looks up a localized string similar to The root node does not have a valid name attribute..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.MustBeBetween">
            <summary>
              Looks up a localized string similar to The value must be between {0} and {1}.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.MustBeGreaterThan">
            <summary>
              Looks up a localized string similar to The value must be greater than {0}.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.MustBeGreaterThanOrEqualTo">
            <summary>
              Looks up a localized string similar to The value must be greater than or equal to {0}.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.MustBeGreaterThanOrEqualToZero">
            <summary>
              Looks up a localized string similar to The value must be greater than or equal to zero.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.MustBeGreaterThanZero">
            <summary>
              Looks up a localized string similar to The value must be greater than zero.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.MustBeLessThan">
            <summary>
              Looks up a localized string similar to The value must be less than {0}.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.MustBeLessThanOrEqualTo">
            <summary>
              Looks up a localized string similar to The value must be less than or equal to {0}.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.NodeAlreadyInCollection">
            <summary>
              Looks up a localized string similar to The node has already been inserted into a different collection..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.NoLinkedSettingsFile">
            <summary>
              Looks up a localized string similar to The linked settings file does not exist or cannot be loaded..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.NoParentSettingsFile">
            <summary>
              Looks up a localized string similar to There is no settings file located in a parent folder above the location of this settings file..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.NoViolationsEncountered">
            <summary>
              Looks up a localized string similar to No violations encountered.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.ProjectSettingsFileNotLoadedOrCreated">
            <summary>
              Looks up a localized string similar to The settings file for the project could not be loaded or created: {0}.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.PropertyControlAlreadyInitialized">
            <summary>
              Looks up a localized string similar to The PropertyControl object has already been initialized.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.PropertyDescriptionNotSet">
            <summary>
              Looks up a localized string similar to The property description has not been set..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.PropertyDescriptorDoesNotExist">
            <summary>
              Looks up a localized string similar to The property container does not contain a property descriptor for the {0} property..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.PropertyDescriptorHasNoDefaultValue">
            <summary>
              Looks up a localized string similar to The property descriptor does not have a default value defined..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.PropertyFriendlyNameNotSet">
            <summary>
              Looks up a localized string similar to The friendly name of the property has not been set..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.PropertyHasNoDescription">
            <summary>
              Looks up a localized string similar to The property has no description..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.PropertyHasNoFriendlyName">
            <summary>
              Looks up a localized string similar to The property has no friendly name..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.PropertyHasNoName">
            <summary>
              Looks up a localized string similar to The property has no name..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.ReadOnlyCollection">
            <summary>
              Looks up a localized string similar to The collection is read-only..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.ReadOnlyProperty">
            <summary>
              Looks up a localized string similar to The property is read-only..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.RootNodeMustBeSourceParser">
            <summary>
              Looks up a localized string similar to The name of the root node must be &apos;SourceParser&apos;.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.RuleCheckIdInvalid">
            <summary>
              Looks up a localized string similar to A rule&apos;s CheckId must be six characters long, composed of two upper-case letters followed by four digits..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.RuleDisabledByDefaultAndNotCanDisable">
            <summary>
              Looks up a localized string similar to A rule cannot be marked with DisableByDefault=true if it is also marked with CanDisable=false..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.RuleDoesNotExist">
            <summary>
              Looks up a localized string similar to The rule {0} does not exist.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.RuleGroupHasNoNameAttribute">
            <summary>
              Looks up a localized string similar to The rule group has no Name attribute..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.RuleHasNoCheckIdAttribute">
            <summary>
              Looks up a localized string similar to The rule {0} has no CheckId attribute..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.RuleHasNoContextElement">
            <summary>
              Looks up a localized string similar to The rule {0} has no Context element or the Context is empty..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.RuleHasNoNameAttribute">
            <summary>
              Looks up a localized string similar to The rule has no Name attribute..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.RuleNameInvalid">
            <summary>
              Looks up a localized string similar to A rule name must start with an upper-case letter, and can only contain letters and numbers..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.RuleWithSameNameExists">
            <summary>
              Looks up a localized string similar to A rule with the same name has already been added..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.SettingsDialogTitleDefault">
            <summary>
              Looks up a localized string similar to StyleCop {0} Default Settings.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.SettingsDialogTitleFormat">
            <summary>
              Looks up a localized string similar to {0} - {1}.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.SettingsDialogTitleLocal">
            <summary>
              Looks up a localized string similar to StyleCop {0} Project Settings.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.SettingsFileHasNotBeenLoaded">
            <summary>
              Looks up a localized string similar to A settings file has not been loaded..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.SettingsFileMatchPaths">
            <summary>
              Looks up a localized string similar to {0} (*.StyleCop)|*.StyleCop|{1} (*.*)|*.*&quot;.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.SettingsFiles">
            <summary>
              Looks up a localized string similar to Settings files.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.SettingsFilesTab">
            <summary>
              Looks up a localized string similar to Settings Files.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.SourceAnalyzerAttributeMissing">
            <summary>
              Looks up a localized string similar to The analyzer type does not have a properly formatted SourceAnalyzer attribute..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.SourceAnalyzerRootNodeIsIncorrect">
            <summary>
              Looks up a localized string similar to The name of the root node must be &apos;SourceAnalyzer&apos;.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.SourceCodeFactoryReturnsNull">
            <summary>
              Looks up a localized string similar to A SourceCodeFactory may not return null..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.SourceCodeTypePropertyNotSet">
            <summary>
              Looks up a localized string similar to The SourceCode&apos;s Type property is not set..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.SpellingTab">
            <summary>
              Looks up a localized string similar to Spelling.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.StringCannotBeEmptyOrNull">
            <summary>
              Looks up a localized string similar to The string must not be empty or null.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.StyleCopUnableToLoad">
            <summary>
              Looks up a localized string similar to StyleCop is unable to load. An unexpected error occurred. {0}.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.SyntaxErrorInFile">
            <summary>
              Looks up a localized string similar to A syntax error has been discovered in file {0} on line {1}..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.SyntaxErrorInFileWithMessage">
            <summary>
              Looks up a localized string similar to A syntax error has been discovered in file {0} on line {1}: {2}.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.Title">
            <summary>
              Looks up a localized string similar to StyleCop.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.UnknownAssemblyUsingDefaultCheckIdPrefix">
            <summary>
              Looks up a localized string similar to A rule defined within a third-party rules add-in uses the CheckId {0}. CheckIds for third-party rules may not use the SA prefix, but instead must define their own two-letter prefix..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.ViolationFormatter">
            <summary>
              Looks up a localized string similar to {0}: {1}.
            </summary>
        </member>
        <member name="P:StyleCop.Strings.ViolationsEncountered">
            <summary>
              Looks up a localized string similar to {0} violations encountered..
            </summary>
        </member>
        <member name="P:StyleCop.Strings.WarningTag">
            <summary>
              Looks up a localized string similar to Warning: {0}.
            </summary>
        </member>
        <member name="T:StyleCop.StyleCopThread">
            <summary>
            The style cop thread.
            </summary>
            <content>
            StyleCop thread.
            </content>
            <summary>
            StyleCop analyze thread.
            </summary>
        </member>
        <member name="T:StyleCop.StyleCopThread.Data">
            <summary>
            Class that contains data used by analysis worker threads.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopThread.Data.cache">
            <summary>
            The results cache manager.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopThread.Data.core">
            <summary>
            The StyleCop core instance.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopThread.Data.ignoreResultsCache">
            <summary>
            True if the results cache should be ignored.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopThread.Data.projectStatus">
            <summary>
            The current analysis status of each project.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopThread.Data.projects">
            <summary>
            The list of projects to analyze.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopThread.Data.settingsPath">
            <summary>
            The path to the settings to use during analysis.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopThread.Data.sourceCodeInstanceStatus">
            <summary>
            The current analysis status of each source code document.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopThread.Data.passNumber">
            <summary>
            The pass number.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopThread.Data.projectIndex">
            <summary>
            The index of the current project.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopThread.Data.settings">
            <summary>
            Stores the settings for each project.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopThread.Data.sourceCodeInstanceIndex">
            <summary>
            The index of the current source code index within the current project.
            </summary>
        </member>
        <member name="M:StyleCop.StyleCopThread.Data.#ctor(StyleCop.StyleCopCore,System.Collections.Generic.IList{StyleCop.CodeProject},StyleCop.ResultsCache,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the Data class.
            </summary>
            <param name="core">
            The StyleCop core instance.
            </param>
            <param name="codeProjects">
            The list of code projects to analyze.
            </param>
            <param name="resultsCache">
            The results cache.
            </param>
            <param name="ignoreResultsCache">
            True to ignore the results cache.
            </param>
            <param name="settingsPath">
            The path to the settings to use during analysis.
            </param>
        </member>
        <member name="P:StyleCop.StyleCopThread.Data.Core">
            <summary>
            Gets the StyleCop core instance.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopThread.Data.IgnoreResultsCache">
            <summary>
            Gets a value indicating whether to ignore the cached results from the last run.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopThread.Data.PassNumber">
            <summary>
            Gets or sets the current pass number.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopThread.Data.ResultsCache">
            <summary>
            Gets the results cache handler.
            </summary>
        </member>
        <member name="M:StyleCop.StyleCopThread.Data.GetDocumentStatus(StyleCop.SourceCode)">
            <summary>
            Gets the analysis status for the given source code document.
            </summary>
            <param name="sourceCode">
            The source code to retrieve status for.
            </param>
            <returns>
            Returns the analysis status for the source code.
            </returns>
        </member>
        <member name="M:StyleCop.StyleCopThread.Data.GetNextSourceCodeDocument">
            <summary>
            Gets the next source code document to analyze.
            </summary>
            <returns>Returns the source code document to analyze or null if none.</returns>
        </member>
        <member name="M:StyleCop.StyleCopThread.Data.GetProjectStatus(StyleCop.CodeProject)">
            <summary>
            Gets the analysis status for the given project.
            </summary>
            <param name="project">
            The project.
            </param>
            <returns>
            Returns the analysis status for the project.
            </returns>
        </member>
        <member name="M:StyleCop.StyleCopThread.Data.GetSettings(StyleCop.CodeProject)">
            <summary>
            Gets the settings for the given project.
            </summary>
            <param name="project">
            The project containing the settings.
            </param>
            <returns>
            Returns the settings or null if the settings could not be loaded.
            </returns>
            <remarks>
            If a settings path has been provided by the host, the project is ignored and
            the alternate settings provided by the host are loaded instead.
            </remarks>
        </member>
        <member name="M:StyleCop.StyleCopThread.Data.ResetEmumerator">
            <summary>
            Resets the source code document index.
            </summary>
        </member>
        <member name="M:StyleCop.StyleCopThread.Data.ExtractNextSourceCodeDocument">
            <summary>
            Pulls out the next source code document.
            </summary>
            <returns>Returns the source code document to analyze or null if none.</returns>
        </member>
        <member name="F:StyleCop.StyleCopThread.data">
            <summary>
            The data for this worker thread.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopThread.complete">
            <summary>
            Indicates whether the analysis of all files is complete.
            </summary>
        </member>
        <member name="M:StyleCop.StyleCopThread.#ctor(StyleCop.StyleCopThread.Data)">
            <summary>
            Initializes a new instance of the StyleCopThread class.
            </summary>
            <param name="data">
            The thread data.
            </param>
        </member>
        <member name="E:StyleCop.StyleCopThread.ThreadCompleted">
            <summary>
            Event that is fired when the thread is completed.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopThread.Complete">
            <summary>
            Gets a value indicating whether the analysis of all source code documents is complete.
            </summary>
        </member>
        <member name="M:StyleCop.StyleCopThread.DoWork(System.Object)">
            <summary>
            Runs the thread operation.
            </summary>
            <param name="sender">
            The event sender.
            </param>
        </member>
        <member name="M:StyleCop.StyleCopThread.FormatExceptionMessage(System.Exception)">
            <summary>
            Formats the exception message and stack trace into a loggable string.
            </summary>
            <param name="ex">
            The exception.
            </param>
            <returns>
            Returns the formatted message.
            </returns>
        </member>
        <member name="M:StyleCop.StyleCopThread.GetRelativeFileName(StyleCop.SourceCode)">
            <summary>
            Returns the leafname of the source code path.
            </summary>
            <param name="sourceCode">
            The SourceCode object to use.
            </param>
            <returns>
            The leafname.
            </returns>
        </member>
        <member name="M:StyleCop.StyleCopThread.GetSignalOutputGetText(StyleCop.SourceCode)">
            <summary>
            Returns the text to use in the signalled output.
            </summary>
            <param name="sourceCode">
            The SourceCode object to use.
            </param>
            <returns>
            The text to signal.
            </returns>
        </member>
        <member name="M:StyleCop.StyleCopThread.LoadSourceCodeFromResultsCache(StyleCop.SourceCode)">
            <summary>
            Attempts to load results for the given document from the cache.
            </summary>
            <param name="sourceCode">
            The source code document to load.
            </param>
            <returns>
            Returns true if the results were loaded from the cache.
            </returns>
        </member>
        <member name="M:StyleCop.StyleCopThread.ParseAndAnalyzeDocument(StyleCop.SourceCode,StyleCop.DocumentAnalysisStatus)">
            <summary>
            Parses and analyzes the given document.
            </summary>
            <param name="sourceCode">
            The document to parse and analyze.
            </param>
            <param name="documentStatus">
            The current status of the documents.
            </param>
        </member>
        <member name="M:StyleCop.StyleCopThread.RunAnalyzers(StyleCop.CodeDocument,StyleCop.SourceParser,System.Collections.Generic.IEnumerable{StyleCop.SourceAnalyzer})">
            <summary>
            Runs the list of analyzers against the given document.
            </summary>
            <param name="document">
            The document to analyze.
            </param>
            <param name="parser">
            The parser that created the document.
            </param>
            <param name="analyzers">
            The list of analyzers to run against the document.
            </param>
        </member>
        <member name="M:StyleCop.StyleCopThread.TestAndRunAnalyzers(StyleCop.CodeDocument,StyleCop.SourceParser,System.Collections.Generic.IEnumerable{StyleCop.SourceAnalyzer},System.Int32)">
            <summary>
            Runs the analyzers against the given document.
            </summary>
            <param name="document">
            The document to analyze.
            </param>
            <param name="parser">
            The parser that created the document.
            </param>
            <param name="analyzers">
            The analyzers to run against the document.
            </param>
            <param name="passNumber">
            The current pass number.
            </param>
            <returns>
            Returns true if analysis was run, or false if analysis was delayed until the next pass.
            </returns>
        </member>
        <member name="T:StyleCop.RegistryUtils">
            <summary>
            The registry utils.
            </summary>
            <content>
            Performs operations in the registry.
            </content>
            <summary>
            The registry utils.
            </summary>
            <content>
            Performs operations in the registry.
            </content>
            <summary>
            Performs operations in the registry.
            </summary>
        </member>
        <member name="T:StyleCop.RegistryUtils.Permissions">
            <summary>
            Demands permissions on behalf of the RegistryUtils class.
            </summary>
        </member>
        <member name="M:StyleCop.RegistryUtils.Permissions.DemandCurrentUserAccess(System.String)">
            <summary>
            Call this function before creating the RegistryUtils class in order to make sure that
            you (the caller) will have permissions to access the class.
            </summary>
            <param name="subKey">
            The sub key to demand permissions for.
            </param>
        </member>
        <member name="M:StyleCop.RegistryUtils.Permissions.DemandLocalMachineAccess(System.String)">
            <summary>
            Call this function before creating the RegistryUtils class in order to make sure that
            you (the caller) will have permissions to access the class.
            </summary>
            <param name="subKey">
            The sub key to demand permissions for.
            </param>
        </member>
        <member name="T:StyleCop.RegistryUtils.WindowLocation">
            <summary>
            Used to save the location and size of a form in the registry.
            </summary>
        </member>
        <member name="F:StyleCop.RegistryUtils.WindowLocation.location">
            <summary>
            The current location of the form.
            </summary>
        </member>
        <member name="F:StyleCop.RegistryUtils.WindowLocation.size">
            <summary>
            The current size of the form.
            </summary>
        </member>
        <member name="F:StyleCop.RegistryUtils.WindowLocation.state">
            <summary>
            The current state of the form.
            </summary>
        </member>
        <member name="M:StyleCop.RegistryUtils.WindowLocation.#ctor">
            <summary>
            Initializes a new instance of the WindowLocation class.
            </summary>
        </member>
        <member name="M:StyleCop.RegistryUtils.WindowLocation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the WindowLocation class.
            </summary>
            <param name="input">
            The input string.
            </param>
        </member>
        <member name="P:StyleCop.RegistryUtils.WindowLocation.Location">
            <summary>
            Gets or sets the location value.
            </summary>
        </member>
        <member name="P:StyleCop.RegistryUtils.WindowLocation.Size">
            <summary>
            Gets or sets the size value.
            </summary>
        </member>
        <member name="P:StyleCop.RegistryUtils.WindowLocation.State">
            <summary>
            Gets or sets the window state value.
            </summary>
        </member>
        <member name="M:StyleCop.RegistryUtils.WindowLocation.ToString">
            <summary>
            Converts the values to a string.
            </summary>
            <returns>Returns the string representations of the values.</returns>
        </member>
        <member name="F:StyleCop.RegistryUtils.StyleCopSubKey">
            <summary>
            The StyleCop sub key.
            </summary>
        </member>
        <member name="F:StyleCop.RegistryUtils.currentUserRoot">
            <summary>
            The current user registry key for StyleCop.
            </summary>
        </member>
        <member name="F:StyleCop.RegistryUtils.localMachineRoot">
            <summary>
            The local machine registry key for StyleCop.
            </summary>
        </member>
        <member name="M:StyleCop.RegistryUtils.Finalize">
            <summary>
            Finalizes an instance of the RegistryUtils class.
            </summary>
        </member>
        <member name="P:StyleCop.RegistryUtils.CurrentUserRoot">
            <summary>
            Gets the HKCU root key for the StyleCop key as read/write. It will be created if it doesn't exist.
            </summary>
        </member>
        <member name="P:StyleCop.RegistryUtils.LocalMachineRoot">
            <summary>
            Gets the HKLM root key for the StyleCop key as read only.
            </summary>
        </member>
        <member name="M:StyleCop.RegistryUtils.LocalMachineGetValue(System.String,System.String)">
            <summary>
            Gets a RegistryKey value for the specified <paramref name="keyName"/> and <paramref name="valueName"/> from the local machine hive.
            </summary>
            <param name="keyName">
            The key to retrieve from the registry.
            </param>
            <param name="valueName">
            The value to retrieve from the key provided.
            </param>
            <returns>
            Returns the RegistryKey value or null if not found.
            </returns>
        </member>
        <member name="M:StyleCop.RegistryUtils.CUGetValue(System.String)">
            <summary>
            Gets a value under the StyleCop HKCU key.
            </summary>
            <param name="name">
            The path to the value.
            </param>
            <returns>
            Returns the object retrieved.
            </returns>
        </member>
        <member name="M:StyleCop.RegistryUtils.CUSetValue(System.String,System.Object)">
            <summary>
            Adds or overwrites a value under the StyleCop HKCU key.
            </summary>
            <param name="name">
            The path to the value.
            </param>
            <param name="value">
            The object to write.
            </param>
            <returns>
            Returns true if the value was written, false if not.
            </returns>
        </member>
        <member name="M:StyleCop.RegistryUtils.LMGetValue(System.String)">
            <summary>
            Gets a value under the StyleCop HKLM key.
            </summary>
            <param name="name">
            The path to the value.
            </param>
            <returns>
            Returns the object retrieved.
            </returns>
        </member>
        <member name="M:StyleCop.RegistryUtils.RestoreWindowPosition(System.String,System.Windows.Forms.Form,System.Object,System.Object)">
            <summary>
            Restores the position of a form.
            </summary>
            <param name="name">
            The unique name of the form.
            </param>
            <param name="form">
            The form to restore.
            </param>
            <param name="location">
            Form's default location (optional).
            </param>
            <param name="size">
            Form's default size (optional).
            </param>
            <returns>
            Returns false if there is no registry information for this form, or if 
            the position of the form could not be restored.
            </returns>
        </member>
        <member name="M:StyleCop.RegistryUtils.SaveWindowPosition(System.String,System.Drawing.Point,System.Drawing.Size,System.Windows.Forms.FormWindowState)">
            <summary>
            Saves the current position of a form in the registry, given the position values.
            </summary>
            <param name="name">
            A unique name for the form.
            </param>
            <param name="location">
            The location of the form.
            </param>
            <param name="size">
            The size of the form.
            </param>
            <param name="state">
            The window state of the form.
            </param>
            <returns>
            Return false if the position could not be saved.
            </returns>
        </member>
        <member name="M:StyleCop.RegistryUtils.SaveWindowPositionByForm(System.String,System.Windows.Forms.Form)">
            <summary>
            Saves the current position of the given form in the registry.
            </summary>
            <param name="name">
            A unique name for this form.
            </param>
            <param name="form">
            The form to save.
            </param>
            <returns>
            Returns false if the position could not be saved.
            </returns>
        </member>
        <member name="M:StyleCop.RegistryUtils.CreatePath(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Creates a path of keys in the registry.
            </summary>
            <param name="root">
            The root node to create the keys under.
            </param>
            <param name="name">
            The path the create under the root node.
            </param>
            <returns>
            Returns the key to the lowest branch created, or null if the path could not be created.
            </returns>
        </member>
        <member name="M:StyleCop.RegistryUtils.GetPath(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Traverses a path in the registry and returns the lowest key.
            </summary>
            <param name="root">
            The root that the path is under.
            </param>
            <param name="name">
            The path to traverse.
            </param>
            <returns>
            Returns the key if it was found and loaded, or null otherwise.
            </returns>
        </member>
        <member name="M:StyleCop.RegistryUtils.GetValue(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Gets one value from the registry.
            </summary>
            <param name="root">
            The root key to get the value under.
            </param>
            <param name="name">
            The path to the value under the root key.
            </param>
            <returns>
            Return the object or null if it could not be found or retrieved.
            </returns>
        </member>
        <member name="M:StyleCop.RegistryUtils.SetValue(Microsoft.Win32.RegistryKey,System.String,System.Object)">
            <summary>
            Sets one value in the registry.
            </summary>
            <param name="root">
            The root key to set the value under.
            </param>
            <param name="name">
            The path to the value to set.
            </param>
            <param name="value">
            The value to set.
            </param>
            <returns>
            Returns true if the value is set, false otherwise.
            </returns>
        </member>
        <member name="T:StyleCop.RegistryUtils.PathInfo">
            <summary>
            Used by the GetPath and CreatePath functions.
            </summary>
        </member>
        <member name="F:StyleCop.RegistryUtils.PathInfo.Key">
            <summary>
            The path key.
            </summary>
        </member>
        <member name="F:StyleCop.RegistryUtils.PathInfo.Stub">
            <summary>
            The path stub.
            </summary>
        </member>
        <member name="T:StyleCop.StyleCopConsole">
            <summary>
            A lightweight host for StyleCop which loads source files and settings files from the file system.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopConsole.outputFile">
            <summary>
            The output file path.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopConsole.settingsPath">
            <summary>
            The settings path.
            </summary>
        </member>
        <member name="M:StyleCop.StyleCopConsole.#ctor(System.String,System.Boolean,System.String,System.Collections.Generic.ICollection{System.String},System.Boolean)">
            <summary>
            Initializes a new instance of the StyleCopConsole class.
            </summary>
            <param name="settings">
            The path to the settings to load or
            null to use the default project settings files.
            </param>
            <param name="writeResultsCache">
            Indicates whether to write results cache files.
            </param>
            <param name="outputFile">
            Optional path to the results output file.
            </param>
            <param name="addInPaths">
            The list of paths to search under for parser and analyzer addins.
            Can be null if no addin paths are provided.
            </param>
            <param name="loadFromDefaultPath">
            Indicates whether to load addins
            from the default path, where the core binary is located.
            </param>
        </member>
        <member name="M:StyleCop.StyleCopConsole.#ctor(System.String,System.Boolean,System.String,System.Collections.Generic.ICollection{System.String},System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the StyleCopConsole class.
            </summary>
            <param name="settings">
            The path to the settings to load or
            null to use the default project settings files.
            </param>
            <param name="writeResultsCache">
            Indicates whether to write results cache files.
            </param>
            <param name="outputFile">
            Optional path to the results output file.
            </param>
            <param name="addInPaths">
            The list of paths to search under for parser and analyzer addins.
            Can be null if no addin paths are provided.
            </param>
            <param name="loadFromDefaultPath">
            Indicates whether to load addins
            from the default application path.
            </param>
            <param name="hostTag">
            An optional tag which can be set by the host.
            </param>
        </member>
        <member name="M:StyleCop.StyleCopConsole.Start(System.Collections.Generic.IList{StyleCop.CodeProject},System.Boolean)">
            <summary>
            Starts analyzing the source code documents contained within the given projects.
            </summary>
            <param name="projects">
            The projects to analyze.
            </param>
            <param name="fullAnalyze">
            Determines whether to ignore cache files and reanalyze
            every file from scratch.
            </param>
            <returns>
            Returns false if an error occurs during analysis.
            </returns>
        </member>
        <member name="M:StyleCop.StyleCopConsole.LoadSettingsFiles(System.Collections.Generic.IList{StyleCop.CodeProject})">
            <summary>
            Loads the settings files to use for the analysis.
            </summary>
            <param name="projects">
            The list of projects to use.
            </param>
        </member>
        <member name="T:StyleCop.CodeDocument">
            <summary>
            Contains the parsed object model for a source code document.
            </summary>
        </member>
        <member name="F:StyleCop.CodeDocument.analyzerData">
            <summary>
            Storage space for analyzer data.
            </summary>
        </member>
        <member name="F:StyleCop.CodeDocument.sourceCode">
            <summary>
            The original source code document.
            </summary>
        </member>
        <member name="M:StyleCop.CodeDocument.#ctor(StyleCop.SourceCode)">
            <summary>
            Initializes a new instance of the CodeDocument class.
            </summary>
            <param name="sourceCode">
            The source code document this instance represents.
            </param>
        </member>
        <member name="P:StyleCop.CodeDocument.DocumentContents">
            <summary>
            Gets the parsed contents of the document.
            </summary>
        </member>
        <member name="P:StyleCop.CodeDocument.Settings">
            <summary>
            Gets the settings for the the project that contains the document.
            </summary>
        </member>
        <member name="P:StyleCop.CodeDocument.SourceCode">
            <summary>
            Gets the original source code document.
            </summary>
        </member>
        <member name="P:StyleCop.CodeDocument.AnalyzerData">
            <summary>
            Gets the analyzer data dictionary for the document.
            </summary>
        </member>
        <member name="M:StyleCop.CodeDocument.Dispose">
            <summary>
            Disposes the contents of the class.
            </summary>
        </member>
        <member name="M:StyleCop.CodeDocument.Dispose(System.Boolean)">
            <summary>
            Disposes the contents of the class.
            </summary>
            <param name="disposing">
            Indicates whether to dispose unmanaged resources.
            </param>
        </member>
        <member name="T:StyleCop.CodeProject">
            <summary>
            Describes a project containing one or more source code documents.
            </summary>
        </member>
        <member name="F:StyleCop.CodeProject.DefaultCulture">
            <summary>
            The default culture.
            </summary>
        </member>
        <member name="F:StyleCop.CodeProject.DefaultMaxViolationCount">
            <summary>
            The default maximum violation count.
            </summary>
        </member>
        <member name="F:StyleCop.CodeProject.configuration">
            <summary>
            The configuration for the project.
            </summary>
        </member>
        <member name="F:StyleCop.CodeProject.key">
            <summary>
            The unique key for the project.
            </summary>
        </member>
        <member name="F:StyleCop.CodeProject.location">
            <summary>
            The location where the project is contained.
            </summary>
        </member>
        <member name="F:StyleCop.CodeProject.targetFrameworkVersion">
            <summary>
            The target framework version used to check new specification features.
            </summary>
        </member>
        <member name="F:StyleCop.CodeProject.sourceCodes">
            <summary>
            The list of source code documents in the project.
            </summary>
        </member>
        <member name="F:StyleCop.CodeProject.culture">
            <summary>
            The CultureInfo to use during analysis.
            </summary>
        </member>
        <member name="F:StyleCop.CodeProject.deprecatedWords">
            <summary>
            Deprecated words for the spell checker.
            </summary>
        </member>
        <member name="F:StyleCop.CodeProject.dictionaryFolders">
            <summary>
            Folders to scan for CustomDictionary.xml files.
            </summary>
        </member>
        <member name="F:StyleCop.CodeProject.maxViolationCount">
            <summary>
            Maximum number of violations to occur before cancelling analysis.
            </summary>
        </member>
        <member name="F:StyleCop.CodeProject.recognizedWords">
            <summary>
            Recognized words for the spell checker.
            </summary>
        </member>
        <member name="F:StyleCop.CodeProject.settings">
            <summary>
            The settings for the project.
            </summary>
        </member>
        <member name="F:StyleCop.CodeProject.settingsLoaded">
            <summary>
            Indicates whether settings have been loaded into the project.
            </summary>
        </member>
        <member name="F:StyleCop.CodeProject.writeCache">
            <summary>
            Indicates whether to write cache results for the project.
            </summary>
        </member>
        <member name="M:StyleCop.CodeProject.#ctor(System.Int32,System.String,StyleCop.Configuration,System.Double)">
            <summary>
            Initializes a new instance of the CodeProject class.
            </summary>
            <param name="key">The unique key for the project.</param>
            <param name="location">The location where the project is contained.</param>
            <param name="configuration">The active configuration.</param>
            <param name="frameworkVersion">The framework version for current code project, default 0 if not found.</param>
        </member>
        <member name="P:StyleCop.CodeProject.Configuration">
            <summary>
            Gets the project configuration.
            </summary>
        </member>
        <member name="P:StyleCop.CodeProject.Culture">
            <summary>
            Gets the CultureInfo to use during analysis.
            </summary>
        </member>
        <member name="P:StyleCop.CodeProject.DeprecatedWords">
            <summary>
            Gets the dictionary of deprecated words and their alternatives.
            </summary>
        </member>
        <member name="P:StyleCop.CodeProject.DictionaryFolders">
            <summary>
            Gets the dictionary of folders that will be scanned for CustomDictionary.xml files.
            </summary>
        </member>
        <member name="P:StyleCop.CodeProject.Key">
            <summary>
            Gets the unique key for the project.
            </summary>
        </member>
        <member name="P:StyleCop.CodeProject.Location">
            <summary>
            Gets the location where the project is contained.
            </summary>
        </member>
        <member name="P:StyleCop.CodeProject.TargetFrameworkVersion">
            <summary>
            Gets the target framework version for current project.
            </summary>
        </member>
        <member name="P:StyleCop.CodeProject.MaxViolationCount">
            <summary>
            Gets a value indicating how many violations should occur before cancelling analysis.
            </summary>
        </member>
        <member name="P:StyleCop.CodeProject.RecognizedWords">
            <summary>
            Gets the list of recognized words.
            </summary>
        </member>
        <member name="P:StyleCop.CodeProject.Settings">
            <summary>
            Gets or sets the settings for the project.
            </summary>
        </member>
        <member name="P:StyleCop.CodeProject.SettingsLoaded">
            <summary>
            Gets or sets a value indicating whether settings have been loaded into the project.
            </summary>
        </member>
        <member name="P:StyleCop.CodeProject.SourceCodeInstances">
            <summary>
            Gets the list of source code documents in the project.
            </summary>
        </member>
        <member name="P:StyleCop.CodeProject.WriteCache">
            <summary>
            Gets a value indicating whether to write cache results for the project.
            </summary>
        </member>
        <member name="P:StyleCop.CodeProject.ViolationsAsErrors">
            <summary>
            Gets a value indicating whether to treat violations as errors.
            </summary>
        </member>
        <member name="M:StyleCop.CodeProject.AddSourceCode(StyleCop.SourceCode)">
            <summary>
            Adds the given source code document to the project.
            </summary>
            <param name="sourceCode">
            The source code to add.
            </param>
        </member>
        <member name="T:StyleCop.AnalyzersOptions">
            <summary>
            Options dialog to choose which analyzers to run for the solution.
            </summary>
        </member>
        <member name="F:StyleCop.AnalyzersOptions.AnalyzerNode">
            <summary>
            The name of an analyzer node.
            </summary>
        </member>
        <member name="F:StyleCop.AnalyzersOptions.ParserNode">
            <summary>
            The name of a parser node.
            </summary>
        </member>
        <member name="F:StyleCop.AnalyzersOptions.RuleGroupNode">
            <summary>
            The name of a rule group node.
            </summary>
        </member>
        <member name="F:StyleCop.AnalyzersOptions.RuleNode">
            <summary>
            The name of a rule node.
            </summary>
        </member>
        <member name="F:StyleCop.AnalyzersOptions.properties">
            <summary>
            Stores the properties for each analyzer and parser.
            </summary>
        </member>
        <member name="F:StyleCop.AnalyzersOptions.analyzeTree">
            <summary>
            The enabled analyzers tree.
            </summary>
        </member>
        <member name="F:StyleCop.AnalyzersOptions.components">
            <summary>
            The components container for the control.
            </summary>
        </member>
        <member name="F:StyleCop.AnalyzersOptions.description">
            <summary>
            The description text box.
            </summary>
        </member>
        <member name="F:StyleCop.AnalyzersOptions.detailsTree">
            <summary>
            The details tree.
            </summary>
        </member>
        <member name="F:StyleCop.AnalyzersOptions.dirty">
            <summary>
            Indicates whether the page is dirty.
            </summary>
        </member>
        <member name="F:StyleCop.AnalyzersOptions.findRule">
            <summary>
            Initiates search for a rule.
            </summary>
        </member>
        <member name="F:StyleCop.AnalyzersOptions.findRuleId">
            <summary>
            Text string to match against rules for search.
            </summary>
        </member>
        <member name="F:StyleCop.AnalyzersOptions.formAcceptButton">
            <summary>
            Stores the form's accept button while focus is on the find rule ID textbox.
            </summary>
        </member>
        <member name="F:StyleCop.AnalyzersOptions.label1">
            <summary>
            The static text label.
            </summary>
        </member>
        <member name="F:StyleCop.AnalyzersOptions.label2">
            <summary>
            A tree label.
            </summary>
        </member>
        <member name="F:StyleCop.AnalyzersOptions.label3">
            <summary>
            A tree label.
            </summary>
        </member>
        <member name="F:StyleCop.AnalyzersOptions.label4">
            <summary>
            Find label.
            </summary>
        </member>
        <member name="F:StyleCop.AnalyzersOptions.nodeImages">
            <summary>
            List of images on for tree nodes.
            </summary>
        </member>
        <member name="F:StyleCop.AnalyzersOptions.refreshing">
            <summary>
            Indicates whether the tree is currently being refreshed.
            </summary>
        </member>
        <member name="F:StyleCop.AnalyzersOptions.tableLayoutPanel1">
            <summary>
            The table layout panel 1.
            </summary>
        </member>
        <member name="F:StyleCop.AnalyzersOptions.tableLayoutPanel2">
            <summary>
            The table layout panel 2.
            </summary>
        </member>
        <member name="F:StyleCop.AnalyzersOptions.tabControl">
            <summary>
            The tab control hosting this page.
            </summary>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.#ctor">
            <summary>
            Initializes a new instance of the AnalyzersOptions class.
            </summary>
        </member>
        <member name="T:StyleCop.AnalyzersOptions.MatchRuleHandler">
            <summary>
            Handler for matching nodes in the rules tree while searching for a node.
            </summary>
            <param name="node">The node to match against.</param>
            <param name="searchText">The search text to match against.</param>
            <returns>Returns true if the node matches the given text; false otherwise.</returns>
        </member>
        <member name="P:StyleCop.AnalyzersOptions.Dirty">
            <summary>
            Gets or sets a value indicating whether the pages are dirty.
            </summary>
        </member>
        <member name="P:StyleCop.AnalyzersOptions.TabName">
            <summary>
            Gets the value to place on the page tab.
            </summary>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.Activate(System.Boolean)">
            <summary>
            Called when the page is activated.
            </summary>
            <param name="activated">
            Indicates whether the is being activated or deactivated..
            </param>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.Apply">
            <summary>
            Saves the data and clears the dirty flag.
            </summary>
            <returns>Returns true if the data was saved, false if not.</returns>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.Initialize(StyleCop.PropertyControl)">
            <summary>
            Initializes the page.
            </summary>
            <param name="propertyControl">
            The tab control object.
            </param>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.PostApply(System.Boolean)">
            <summary>
            Called after all pages have been applied.
            </summary>
            <param name="wasDirty">
            The dirty state of the page before it was applied.
            </param>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.PreApply">
            <summary>
            Called before all pages are applied.
            </summary>
            <returns>Returns false if no pages should be applied.</returns>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.RefreshSettingsOverrideState">
            <summary>
            Refreshes the bold state for all analyzers.
            </summary>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            Dispose parameter.
            </param>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.FindMatchingRuleGroupNode(System.Windows.Forms.TreeNodeCollection,System.String)">
            <summary>
            Searches the given node collection to find a rule group node matching the given name.
            </summary>
            <param name="nodes">
            The nodes collection.
            </param>
            <param name="ruleGroup">
            The name of the rule group.
            </param>
            <returns>
            Returns the rule group node or null if there is none.
            </returns>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.InsertIntoSortedTree(System.Windows.Forms.TreeNodeCollection,System.Windows.Forms.TreeNode)">
            <summary>
            Inserts a nodes into a nodes collection, sorted by name.
            </summary>
            <param name="nodes">
            The collection of nodes to insert into.
            </param>
            <param name="nodeToInsert">
            The node to insert.
            </param>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.SetBoldState(System.Windows.Forms.TreeNode,System.Boolean,System.Windows.Forms.TreeView)">
            <summary>
            Sets the bold state of the given node.
            </summary>
            <param name="item">
            The node to set.
            </param>
            <param name="bolded">
            Indicates whether the item should be bolded.
            </param>
            <param name="tree">
            The tree that contains the item.
            </param>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.AdjustBoldState">
            <summary>
            Adjusts the bold state of all nodes in the analyzer tree.
            </summary>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.AnalyzeTreeAfterCheck(System.Object,System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            Event handler that is called when the user checks or un-checks an item in the list.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.AnalyzeTreeAfterSelect(System.Object,System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            Called after a node is selected.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.AnalyzeTreeBeforeCollapse(System.Object,System.Windows.Forms.TreeViewCancelEventArgs)">
            <summary>
            Called when a tree node is about to be collapsed.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.ApplyProperties(StyleCop.StyleCopAddIn)">
            <summary>
            Applies the properties for the given add-in.
            </summary>
            <param name="addIn">
            The add-in.
            </param>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.ApplyRules(StyleCop.StyleCopAddIn,System.Windows.Forms.TreeNode)">
            <summary>
            Applies settings for rules under the given node.
            </summary>
            <param name="addIn">
            The addin owning the rules.
            </param>
            <param name="parentNode">
            The parent node of the rules.
            </param>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.CheckAllChildNodes(System.Windows.Forms.TreeNode,System.Boolean)">
            <summary>
            Checks or un-checks all nodes beneath the given node.
            </summary>
            <param name="node">
            The node to check or un-check.
            </param>
            <param name="checked">
            Indicates whether to check or un-check the nodes.
            </param>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.DetailsTreeAfterCheck(System.Object,System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            Event handler that is called when the user checks or un-checks an item in the list.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.DetailsTreeAfterSelect(System.Object,System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            Called after a node is selected in the details tree.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.DetectBoldStateForDetails(System.Windows.Forms.TreeNode)">
            <summary>
            Sets the bold state of the given properties node based on its current status.
            </summary>
            <param name="propertyNode">
            The node containing the properties.
            </param>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.DetectBoldStateForRule(System.Windows.Forms.TreeNode)">
            <summary>
            Sets the bold state of the given rule item based on it current status.
            </summary>
            <param name="ruleNode">
            The node containing the rule to set.
            </param>
            <returns>
            Returns true if the item is bolded, false otherwise.
            </returns>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.FillAnalyzerRules(StyleCop.SourceAnalyzer,System.Windows.Forms.TreeNode)">
            <summary>
            Adds nodes for an analyzer's rules to the tree.
            </summary>
            <param name="analyzer">
            The analyzer.
            </param>
            <param name="analyzerNode">
            The parent node for the analyzer.
            </param>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.FillAnalyzerTree">
            <summary>
            Fills in the analyzer tree.
            </summary>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.FillDetailsTree">
            <summary>
            Fills the contents of the details tree.
            </summary>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.FindRuleClick(System.Object,System.EventArgs)">
            <summary>
            Called when the file rule button is clicked.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.FindRuleIdGotFocus(System.Object,System.EventArgs)">
            <summary>
            Called when the formRuleId TextBox receives the input focus.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.FindRuleIdKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called when a key is clicked while focus is on the find rule textbox.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.FindRuleIdLostFocus(System.Object,System.EventArgs)">
            <summary>
            Called when the formRuleId TextBox loses the input focus.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.InitializePropertyState(StyleCop.StyleCopAddIn,StyleCop.BooleanProperty)">
            <summary>
            Sets the check state for the given property.
            </summary>
            <param name="addIn">
            The addin that owns the property.
            </param>
            <param name="property">
            The property.
            </param>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.InitializeRuleCheckedState(StyleCop.Rule,System.Windows.Forms.TreeNode)">
            <summary>
            Initializes the checked state of the given rule.
            </summary>
            <param name="rule">
            The rule to check.
            </param>
            <param name="ruleNode">
            The node representing the rule.
            </param>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.IterateAndFindRule(System.Windows.Forms.TreeNodeCollection,System.String,StyleCop.AnalyzersOptions.MatchRuleHandler)">
            <summary>
            Iterates through all nodes in the analyzer rules tree to try to find a matching node.
            </summary>
            <param name="nodes">
            The collection of nodes to iterate.
            </param>
            <param name="searchText">
            The search text to match against.
            </param>
            <param name="matchHandler">
            Performs node matching.
            </param>
            <returns>
            Returns the matching node, or null if none was found.
            </returns>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.SearchForRule(System.String)">
            <summary>
            Searches for a rule with the given ID or name. If found, selects and shows the rule.
            </summary>
            <param name="searchText">
            The text to search for.
            </param>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.SearchForRuleByCategories(System.String)">
            <summary>
            Searches for a rule with the given ID or name, searching through various categories of information on the rule.
            </summary>
            <param name="searchText">
            The text to search for.
            </param>
            <returns>
            Returns the tree node representing the rule, or null if no node could be found.
            </returns>
        </member>
        <member name="M:StyleCop.AnalyzersOptions.StoreAddinProperties(StyleCop.StyleCopAddIn)">
            <summary>
            Stores the properties for the given add-in.
            </summary>
            <param name="addIn">
            The add-in.
            </param>
        </member>
        <member name="T:StyleCop.AnalyzersOptions.PropertyAddInPair">
            <summary>
            A property addin pair.
            </summary>
        </member>
        <member name="F:StyleCop.AnalyzersOptions.PropertyAddInPair.AddIn">
            <summary>
            The add-in.
            </summary>
        </member>
        <member name="F:StyleCop.AnalyzersOptions.PropertyAddInPair.Property">
            <summary>
            The property.
            </summary>
        </member>
        <member name="T:StyleCop.GlobalSettingsFileOptions">
            <summary>
            Options dialog to choose which settings files to use.
            </summary>
        </member>
        <member name="F:StyleCop.GlobalSettingsFileOptions.components">
            <summary>
            The WinForms components manager.
            </summary>
        </member>
        <member name="F:StyleCop.GlobalSettingsFileOptions.browse">
            <summary>
            The browse button.
            </summary>
        </member>
        <member name="F:StyleCop.GlobalSettingsFileOptions.dirty">
            <summary>
            Indicates whether the page is dirty.
            </summary>
        </member>
        <member name="F:StyleCop.GlobalSettingsFileOptions.disableLinking">
            <summary>
            Indicates whether the disable the linked settings options.
            </summary>
        </member>
        <member name="F:StyleCop.GlobalSettingsFileOptions.editLinkedSettingsFile">
            <summary>
            The edit button.
            </summary>
        </member>
        <member name="F:StyleCop.GlobalSettingsFileOptions.editParentSettingsFile">
            <summary>
            Edits the parent settings file.
            </summary>
        </member>
        <member name="F:StyleCop.GlobalSettingsFileOptions.label1">
            <summary>
            The page description.
            </summary>
        </member>
        <member name="F:StyleCop.GlobalSettingsFileOptions.linkedFilePath">
            <summary>
            The global file path textbox.
            </summary>
        </member>
        <member name="F:StyleCop.GlobalSettingsFileOptions.locationLabel">
            <summary>
            Location label.
            </summary>
        </member>
        <member name="F:StyleCop.GlobalSettingsFileOptions.mergeWithLinkedFile">
            <summary>
            Determines whether to merge with a linked settings file.
            </summary>
        </member>
        <member name="F:StyleCop.GlobalSettingsFileOptions.mergeWithParents">
            <summary>
            Determines whether to merge with parent settings files.
            </summary>
        </member>
        <member name="F:StyleCop.GlobalSettingsFileOptions.noMerge">
            <summary>
            Determines whether not to merge the settings.
            </summary>
        </member>
        <member name="F:StyleCop.GlobalSettingsFileOptions.tableLayoutPanel1">
            <summary>
            The table layout panel 1.
            </summary>
        </member>
        <member name="F:StyleCop.GlobalSettingsFileOptions.tabControl">
            <summary>
            The tab control hosting this page.
            </summary>
        </member>
        <member name="M:StyleCop.GlobalSettingsFileOptions.#ctor">
            <summary>
            Initializes a new instance of the GlobalSettingsFileOptions class.
            </summary>
        </member>
        <member name="P:StyleCop.GlobalSettingsFileOptions.Dirty">
            <summary>
            Gets or sets a value indicating whether the page is dirty.
            </summary>
        </member>
        <member name="P:StyleCop.GlobalSettingsFileOptions.TabName">
            <summary>
            Gets the value to place on the page tab.
            </summary>
        </member>
        <member name="M:StyleCop.GlobalSettingsFileOptions.Activate(System.Boolean)">
            <summary>
            Called when the page is activated.
            </summary>
            <param name="activated">
            Indicates whether the page is being activated or deactivated.
            </param>
        </member>
        <member name="M:StyleCop.GlobalSettingsFileOptions.Apply">
            <summary>
            Saves the data and clears the dirty flag.
            </summary>
            <returns>Returns true if the data was saved, false if not.</returns>
        </member>
        <member name="M:StyleCop.GlobalSettingsFileOptions.Initialize(StyleCop.PropertyControl)">
            <summary>
            Initializes the page.
            </summary>
            <param name="propertyControl">
            The tab control object.
            </param>
        </member>
        <member name="M:StyleCop.GlobalSettingsFileOptions.PostApply(System.Boolean)">
            <summary>
            Called after all pages have been applied.
            </summary>
            <param name="wasDirty">
            The dirty state of the page before it was applied.
            </param>
        </member>
        <member name="M:StyleCop.GlobalSettingsFileOptions.PreApply">
            <summary>
            Called before all pages are applied.
            </summary>
            <returns>Returns false if no pages should be applied.</returns>
        </member>
        <member name="M:StyleCop.GlobalSettingsFileOptions.RefreshSettingsOverrideState">
            <summary>
            Refreshes the merged override state of properties on the page.
            </summary>
        </member>
        <member name="M:StyleCop.GlobalSettingsFileOptions.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            Dispose parameter.
            </param>
        </member>
        <member name="M:StyleCop.GlobalSettingsFileOptions.ConvertBackslashes(System.String)">
            <summary>
            Converts forward slashes to backslashes in a path string.
            </summary>
            <param name="path">
            The path to convert.
            </param>
            <returns>
            Returns the converted string.
            </returns>
        </member>
        <member name="M:StyleCop.GlobalSettingsFileOptions.BrowseClick(System.Object,System.EventArgs)">
            <summary>
            Called when the browse button is clicked.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.GlobalSettingsFileOptions.EditLinkedSettingsFileClicked(System.Object,System.EventArgs)">
            <summary>
            Called when the edit linked settings file button is clicked.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.GlobalSettingsFileOptions.EditParentSettings(System.String)">
            <summary>
            Confirms and edits a parent settings file.
            </summary>
            <param name="settingsFile">
            The path to the parent settings.
            </param>
        </member>
        <member name="M:StyleCop.GlobalSettingsFileOptions.EditParentSettingsFileClicked(System.Object,System.EventArgs)">
            <summary>
            Called when the edit parent settings file button is clicked.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.GlobalSettingsFileOptions.EnableDisable">
            <summary>
            Enables or disables the file controls.
            </summary>
        </member>
        <member name="M:StyleCop.GlobalSettingsFileOptions.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:StyleCop.GlobalSettingsFileOptions.LinkedFilePathTextChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the text in the global file path textbox changes.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.GlobalSettingsFileOptions.MergeWithLinkedFileCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the 'mergeWithLinkedFile' radio button is checked or unchecked.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.GlobalSettingsFileOptions.MergeWithParentsCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the 'mergeWithParents' radio button is checked or unchecked.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.GlobalSettingsFileOptions.NoMergeCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the 'noMerge' radio button is checked or unchecked.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="T:StyleCop.SourceAnalyzerAttribute">
            <summary>
            Attribute class for marking StyleCop analyzer classes.
            </summary>
        </member>
        <member name="F:StyleCop.SourceAnalyzerAttribute.parserType">
            <summary>
            The type of the parser that this analyzer is associated with.
            </summary>
        </member>
        <member name="M:StyleCop.SourceAnalyzerAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the SourceAnalyzerAttribute class.
            </summary>
            <param name="parserType">
            The type of the parser that this analyzer is associated with.
            </param>
        </member>
        <member name="M:StyleCop.SourceAnalyzerAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the SourceAnalyzerAttribute class.
            </summary>
            <param name="parserType">
            The type of the parser that this analyzer is associated with.
            </param>
            <param name="analyzerXmlId">
            The ID of the analyzer xml file within the analyzer resource.
            </param>
        </member>
        <member name="P:StyleCop.SourceAnalyzerAttribute.ParserType">
            <summary>
            Gets the type of the parser that this analyzer is associated with.
            </summary>
        </member>
        <member name="T:StyleCop.StyleCopLogLevel">
            <summary>
            Available log levels for controlling log output.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopLogLevel.None">
            <summary>
            No logging.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopLogLevel.Low">
            <summary>
            Low log output. Only the most basic log strings use this level.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopLogLevel.Medium">
            <summary>
            Medium log output. Data that is interesting, but not necessarily essential,
            should use this level.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopLogLevel.High">
            <summary>
            The highest log output. Highly detailed log output should use this level.
            </summary>
        </member>
        <member name="T:StyleCop.SourceParserAttribute">
            <summary>
            Attribute class for marking StyleCop parser classes.
            </summary>
        </member>
        <member name="M:StyleCop.SourceParserAttribute.#ctor">
            <summary>
            Initializes a new instance of the SourceParserAttribute class.
            </summary>
        </member>
        <member name="M:StyleCop.SourceParserAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SourceParserAttribute class.
            </summary>
            <param name="parserXmlId">
            The ID of the parser xml file within the parser resource.
            </param>
        </member>
        <member name="T:StyleCop.StyleCopWebClient">
            <summary>
            Extends the default WebClient.
            </summary>
        </member>
        <member name="M:StyleCop.StyleCopWebClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StyleCop.StyleCopWebClient"/> class.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopWebClient.Timeout">
            <summary>
            Gets or sets Timeout.
            </summary>
        </member>
        <member name="M:StyleCop.StyleCopWebClient.GetWebRequest(System.Uri)">
            <summary>
            The get web request.
            </summary>
            <param name="address">
            The address.
            </param>
            <returns>
            An instance of a WebRequest.
            </returns>
        </member>
        <member name="T:StyleCop.SyntaxException">
            <summary>
            Exception which is thrown when a syntax error is found in the code
            which prevents StyleCop from analyzing the code.
            </summary>
        </member>
        <member name="F:StyleCop.SyntaxException.lineNumber">
            <summary>
            The line number that the error appears on.
            </summary>
        </member>
        <member name="F:StyleCop.SyntaxException.sourceCode">
            <summary>
            The source code document that contains the syntax error.
            </summary>
        </member>
        <member name="M:StyleCop.SyntaxException.#ctor">
            <summary>
            Initializes a new instance of the SyntaxException class.
            </summary>
        </member>
        <member name="M:StyleCop.SyntaxException.#ctor(StyleCop.SourceCode,System.Int32)">
            <summary>
            Initializes a new instance of the SyntaxException class.
            </summary>
            <param name="sourceCode">
            The source code document containing the exception.
            </param>
            <param name="lineNumber">
            The line number of the exception.
            </param>
        </member>
        <member name="M:StyleCop.SyntaxException.#ctor(StyleCop.SourceCode,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the SyntaxException class.
            </summary>
            <param name="sourceCode">
            The source code document containing the exception.
            </param>
            <param name="lineNumber">
            The line number of the exception.
            </param>
            <param name="message">
            The exception message.
            </param>
        </member>
        <member name="M:StyleCop.SyntaxException.#ctor(StyleCop.SourceCode,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the SyntaxException class.
            </summary>
            <param name="sourceCode">
            The source code document containing the exception.
            </param>
            <param name="lineNumber">
            The line number of the exception.
            </param>
            <param name="innerException">
            The exception within this exception.
            </param>
        </member>
        <member name="M:StyleCop.SyntaxException.#ctor(StyleCop.SourceCode,System.Int32,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the SyntaxException class.
            </summary>
            <param name="sourceCode">
            The source code document containing the exception.
            </param>
            <param name="lineNumber">
            The line number of the exception.
            </param>
            <param name="message">
            The exception message.
            </param>
            <param name="innerException">
            The exception within this exception.
            </param>
        </member>
        <member name="M:StyleCop.SyntaxException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the SyntaxException class.
            </summary>
            <param name="serializationInfo">
            Holds the serialization info about the exception.
            </param>
            <param name="streamingContext">
            Holds contextual information.
            </param>
        </member>
        <member name="P:StyleCop.SyntaxException.LineNumber">
            <summary>
            Gets the line number that the syntax error appears on.
            </summary>
        </member>
        <member name="P:StyleCop.SyntaxException.SourceCode">
            <summary>
            Gets the source code document that contains the syntax error.
            </summary>
        </member>
        <member name="M:StyleCop.SyntaxException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">
            The SerializationInfo to populate with data.
            </param>
            <param name="context">
            The destination context for this serialization.
            </param>
        </member>
        <member name="T:StyleCop.CodeFile">
            <summary>
              Describes a source code file on disk.
            </summary>
        </member>
        <member name="F:StyleCop.CodeFile.fileType">
            <summary>
              The file type extension of this file.
            </summary>
        </member>
        <member name="F:StyleCop.CodeFile.folder">
            <summary>
              The folder that the file appears in.
            </summary>
        </member>
        <member name="F:StyleCop.CodeFile.name">
            <summary>
              The name of the file.
            </summary>
        </member>
        <member name="F:StyleCop.CodeFile.path">
            <summary>
              The path to the file.
            </summary>
        </member>
        <member name="M:StyleCop.CodeFile.#ctor(System.String,StyleCop.CodeProject,StyleCop.SourceParser)">
            <summary>
            Initializes a new instance of the CodeFile class.
            </summary>
            <param name="path">
            The path to the code file. 
            </param>
            <param name="project">
            The project that contains this file. 
            </param>
            <param name="parser">
            The parser that created this file object. 
            </param>
        </member>
        <member name="M:StyleCop.CodeFile.#ctor(System.String,StyleCop.CodeProject,StyleCop.SourceParser,System.Collections.Generic.IEnumerable{StyleCop.Configuration})">
            <summary>
            Initializes a new instance of the CodeFile class.
            </summary>
            <param name="path">
            The path to the code file. 
            </param>
            <param name="project">
            The project that contains this file. 
            </param>
            <param name="parser">
            The parser that created this file object. 
            </param>
            <param name="configurations">
            The list of configurations for the file. 
            </param>
        </member>
        <member name="P:StyleCop.CodeFile.Exists">
            <summary>
              Gets a value indicating whether the source code document currently exists and is accessible.
            </summary>
        </member>
        <member name="P:StyleCop.CodeFile.Folder">
            <summary>
              Gets the path to the folder that contains this file.
            </summary>
        </member>
        <member name="P:StyleCop.CodeFile.FullPathName">
            <summary>
              Gets the full path name of the file, spaced by underscores.
            </summary>
        </member>
        <member name="P:StyleCop.CodeFile.Name">
            <summary>
              Gets the file name.
            </summary>
        </member>
        <member name="P:StyleCop.CodeFile.Path">
            <summary>
              Gets the path to the file.
            </summary>
        </member>
        <member name="P:StyleCop.CodeFile.TimeStamp">
            <summary>
              Gets the time that the source code was last edited or updated.
            </summary>
        </member>
        <member name="P:StyleCop.CodeFile.Type">
            <summary>
              Gets the code type identifier.
            </summary>
            <remarks>
              This is equivalent to the file extension.
            </remarks>
        </member>
        <member name="M:StyleCop.CodeFile.Read">
            <summary>
            Reads the contents of the source code into a TextReader.
            </summary>
            <returns>
            Returns the TextReader containing the source code.
            </returns>
        </member>
        <member name="T:StyleCop.OutputEventArgs">
            <summary>
            Event argument for output generated event.
            </summary>
        </member>
        <member name="M:StyleCop.OutputEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the OutputEventArgs class.
            </summary>
            <param name="text">
            The output text.
            </param>
        </member>
        <member name="M:StyleCop.OutputEventArgs.#ctor(System.String,Microsoft.Build.Framework.MessageImportance)">
            <summary>
            Initializes a new instance of the OutputEventArgs class.
            </summary>
            <param name="text">
            The output text.
            </param>
            <param name="importance">
            The level of importance for this output event.
            </param>
        </member>
        <member name="P:StyleCop.OutputEventArgs.Importance">
            <summary>
            Gets the importance of the message.
            </summary>
        </member>
        <member name="P:StyleCop.OutputEventArgs.Output">
            <summary>
            Gets the output text.
            </summary>
        </member>
        <member name="T:StyleCop.ParamErrorTextHandler">
            <summary>
            Delegate used for getting error text.
            </summary>
            <returns>Returns the error text.</returns>
        </member>
        <member name="T:StyleCop.Param">
            <summary>
            Used to verify method parameters.
            </summary>
            <exclude/>
        </member>
        <member name="M:StyleCop.Param.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:StyleCop.Param"/> class from being created.
            </summary>
        </member>
        <member name="M:StyleCop.Param.Assert(System.Boolean,System.String,System.String)">
            <summary>
            Asserts on the given value. This is meant to be used in non-public facing methods.
            </summary>
            <param name="test">
            The boolean state of the parameter test.
            </param>
            <param name="parameterName">
            Name of the parameter.
            </param>
            <param name="exceptionMessage">
            Message of the exception to create.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertGreaterThan(System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that the given number is greater than the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="minimum">
            The number must be greater than this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertGreaterThan(System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that the given number is greater than the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="minimum">
            The number must be greater than this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertGreaterThan(System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that the given number is greater than the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="minimum">
            The number must be greater than this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertGreaterThan(System.Double,System.Double,System.String)">
            <summary>
            Asserts that the given number is greater than the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="minimum">
            The number must be greater than this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertGreaterThan(System.Single,System.Single,System.String)">
            <summary>
            Asserts that the given number is greater than the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="minimum">
            The number must be greater than this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertGreaterThanOrEqualTo(System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that the given number is greater than or equal to the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="minimum">
            The number must be greater than or equal to this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertGreaterThanOrEqualTo(System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that the given number is greater than or equal to the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="minimum">
            The number must be greater than or equal to this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertGreaterThanOrEqualTo(System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that the given number is greater than or equal to the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="minimum">
            The number must be greater than or equal to this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertGreaterThanOrEqualTo(System.Double,System.Double,System.String)">
            <summary>
            Asserts that the given number is greater than or equal to the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="minimum">
            The number must be greater than or equal to this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertGreaterThanOrEqualTo(System.Single,System.Single,System.String)">
            <summary>
            Asserts that the given number is greater than or equal to the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="minimum">
            The number must be greater than or equal to this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertGreaterThanOrEqualToZero(System.Int32,System.String)">
            <summary>
            Asserts that the given number is greater than or equal to zero.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertGreaterThanOrEqualToZero(System.Int64,System.String)">
            <summary>
            Asserts that the given number is greater than or equal to zero.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertGreaterThanOrEqualToZero(System.Int16,System.String)">
            <summary>
            Asserts that the given number is greater than or equal to zero.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertGreaterThanOrEqualToZero(System.Double,System.String)">
            <summary>
            Asserts that the given number is greater than zero.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertGreaterThanOrEqualToZero(System.Single,System.String)">
            <summary>
            Asserts that the given number is greater than or equal to zero.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertGreaterThanZero(System.Int32,System.String)">
            <summary>
            Asserts that the given number is greater than zero.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertGreaterThanZero(System.Int64,System.String)">
            <summary>
            Asserts that the given number is greater than zero.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertGreaterThanZero(System.Int16,System.String)">
            <summary>
            Asserts that the given number is greater than zero.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertGreaterThanZero(System.Double,System.String)">
            <summary>
            Asserts that the given number is greater than zero.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertGreaterThanZero(System.Single,System.String)">
            <summary>
            Asserts that the given number is greater than zero.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertLessThan(System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that the given number is less than the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="maximum">
            The number must be less than this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertLessThan(System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that the given number is less than the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="maximum">
            The number must be less than this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertLessThan(System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that the given number is less than the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="maximum">
            The number must be less than this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertLessThan(System.Double,System.Double,System.String)">
            <summary>
            Asserts that the given number is less than the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="maximum">
            The number must be less than this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertLessThan(System.Single,System.Single,System.String)">
            <summary>
            Asserts that the given number is less than the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="maximum">
            The number must be less than this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertLessThanOrEqualTo(System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that the given number is less than or equal to the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="maximum">
            The number must be less than or equal to this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertLessThanOrEqualTo(System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that the given number is less than or equal to the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="maximum">
            The number must be less than or equal to this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertLessThanOrEqualTo(System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that the given number is less than or equal to the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="maximum">
            The number must be less than or equal to this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertLessThanOrEqualTo(System.Double,System.Double,System.String)">
            <summary>
            Asserts that the given number is less than or equal to the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="maximum">
            The number must be less than or equal to this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertLessThanOrEqualTo(System.Single,System.Single,System.String)">
            <summary>
            Asserts that the given number is less than or equal to the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="maximum">
            The number must be less than or equal to this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertNotNull(System.Object,System.String)">
            <summary>
            Asserts that the given parameter must not be null.
            </summary>
            <param name="parameter">
            The parameter to check for null.
            </param>
            <param name="parameterName">
            The name of the parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertNotNull(System.Object,System.String,System.String)">
            <summary>
            Asserts that the given parameter must not be null.
            </summary>
            <param name="parameter">
            The parameter to check for null.
            </param>
            <param name="parameterName">
            The name of the parameter.
            </param>
            <param name="exceptionMessage">
            Message of the exception to create.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertValidCollection(System.Collections.ICollection,System.String)">
            <summary>
            Asserts that the given collection is not null or empty.
            </summary>
            <param name="parameter">
            The collection to check.
            </param>
            <param name="parameterName">
            The name of the collection parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertValidIndex(System.Boolean,System.String,System.String)">
            <summary>
            Asserts that an index be between a valid range. 
            </summary>
            <param name="test">
            The test for validity.
            </param>
            <param name="parameterName">
            The name of the parameter.
            </param>
            <param name="exceptionMessage">
            Message of the exception to create.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertValidString(System.String,System.String)">
            <summary>
            Asserts that the given string is not null or empty.
            </summary>
            <param name="parameter">
            The string to check.
            </param>
            <param name="parameterName">
            The name of the string parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertValueBetween(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that the given number is between the two given values.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="low">
            The valid low end range.
            </param>
            <param name="high">
            The valid high end range.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertValueBetween(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that the given number is between the two given values.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="low">
            The valid low end range.
            </param>
            <param name="high">
            The valid high end range.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertValueBetween(System.Int16,System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that the given number is between the two given values.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="low">
            The valid low end range.
            </param>
            <param name="high">
            The valid high end range.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertValueBetween(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Asserts that the given number is between the two given values.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="low">
            The valid low end range.
            </param>
            <param name="high">
            The valid high end range.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.AssertValueBetween(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Asserts that the given number is between the two given values.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="low">
            The valid low end range.
            </param>
            <param name="high">
            The valid high end range.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.Ignore(System.Object[])">
            <summary>
            Provides a list of parameters to ignore. These are parameters that do not need to
            be verified.
            </summary>
            <param name="values">
            The list of parameters to ignore.
            </param>
        </member>
        <member name="M:StyleCop.Param.Require(System.Boolean,System.String,StyleCop.ParamErrorTextHandler)">
            <summary>
            Checks an individual parameter and throws an ArgumentException if it is not correct.
            This is meant to be used in public facing methods.
            </summary>
            <param name="test">
            The boolean state of the parameter test.
            </param>
            <param name="parameterName">
            Name of the parameter.
            </param>
            <param name="errorTextHandler">
            Delegate for getting the error text.
            </param>
            <remarks>
            It is more efficient to pass the error text through a delegate if the text is extracted
            from a resource file. The text will only be loaded if it is actually needed.
            </remarks>
        </member>
        <member name="M:StyleCop.Param.Require(System.Boolean,System.String,System.String)">
            <summary>
            Checks an individual parameter and throws an ArgumentException if it is not correct.
            This is meant to be used in public facing methods.
            </summary>
            <param name="test">
            The boolean state of the parameter test.
            </param>
            <param name="parameterName">
            Name of the parameter.
            </param>
            <param name="exceptionMessage">
            Message of the exception to create.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireGreaterThan(System.Int32,System.Int32,System.String)">
            <summary>
            Requires that the given number is greater than the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="minimum">
            The number must be greater than this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireGreaterThan(System.Int64,System.Int64,System.String)">
            <summary>
            Requires that the given number is greater than the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="minimum">
            The number must be greater than this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireGreaterThan(System.Int16,System.Int16,System.String)">
            <summary>
            Requires that the given number is greater than the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="minimum">
            The number must be greater than this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireGreaterThan(System.Double,System.Double,System.String)">
            <summary>
            Requires that the given number is greater than the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="minimum">
            The number must be greater than this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireGreaterThan(System.Single,System.Single,System.String)">
            <summary>
            Requires that the given number is greater than the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="minimum">
            The number must be greater than this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireGreaterThanOrEqualTo(System.Int32,System.Int32,System.String)">
            <summary>
            Requires that the given number is greater than or equal to the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="minimum">
            The number must be greater than or equal to this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireGreaterThanOrEqualTo(System.Int64,System.Int64,System.String)">
            <summary>
            Requires that the given number is greater than or equal to the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="minimum">
            The number must be greater than or equal to this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireGreaterThanOrEqualTo(System.Int16,System.Int16,System.String)">
            <summary>
            Requires that the given number is greater than or equal to the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="minimum">
            The number must be greater than or equal to this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireGreaterThanOrEqualTo(System.Double,System.Double,System.String)">
            <summary>
            Requires that the given number is greater than or equal to the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="minimum">
            The number must be greater than or equal to this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireGreaterThanOrEqualTo(System.Single,System.Single,System.String)">
            <summary>
            Requires that the given number is greater than or equal to the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="minimum">
            The number must be greater than or equal to this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireGreaterThanOrEqualToZero(System.Int32,System.String)">
            <summary>
            Requires that the given number is greater than or equal to zero.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireGreaterThanOrEqualToZero(System.Int64,System.String)">
            <summary>
            Requires that the given number is greater than or equal to zero.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireGreaterThanOrEqualToZero(System.Int16,System.String)">
            <summary>
            Requires that the given number is greater than or equal to zero.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireGreaterThanOrEqualToZero(System.Double,System.String)">
            <summary>
            Requires that the given number is greater than zero.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireGreaterThanOrEqualToZero(System.Single,System.String)">
            <summary>
            Requires that the given number is greater than or equal to zero.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireGreaterThanZero(System.Int32,System.String)">
            <summary>
            Requires that the given number is greater than zero.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireGreaterThanZero(System.Int64,System.String)">
            <summary>
            Requires that the given number is greater than zero.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireGreaterThanZero(System.Int16,System.String)">
            <summary>
            Requires that the given number is greater than zero.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireGreaterThanZero(System.Double,System.String)">
            <summary>
            Requires that the given number is greater than zero.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireGreaterThanZero(System.Single,System.String)">
            <summary>
            Requires that the given number is greater than zero.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireLessThan(System.Int32,System.Int32,System.String)">
            <summary>
            Requires that the given number is less than the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="maximum">
            The number must be less than this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireLessThan(System.Int64,System.Int64,System.String)">
            <summary>
            Requires that the given number is less than the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="maximum">
            The number must be less than this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireLessThan(System.Int16,System.Int16,System.String)">
            <summary>
            Requires that the given number is less than the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="maximum">
            The number must be less than this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireLessThan(System.Double,System.Double,System.String)">
            <summary>
            Requires that the given number is less than the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="maximum">
            The number must be less than this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireLessThan(System.Single,System.Single,System.String)">
            <summary>
            Requires that the given number is less than the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="maximum">
            The number must be less than this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireLessThanOrEqualTo(System.Int32,System.Int32,System.String)">
            <summary>
            Requires that the given number is less than or equal to the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="maximum">
            The number must be less than or equal to this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireLessThanOrEqualTo(System.Int64,System.Int64,System.String)">
            <summary>
            Requires that the given number is less than or equal to the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="maximum">
            The number must be less than or equal to this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireLessThanOrEqualTo(System.Int16,System.Int16,System.String)">
            <summary>
            Requires that the given number is less than or equal to the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="maximum">
            The number must be less than or equal to this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireLessThanOrEqualTo(System.Double,System.Double,System.String)">
            <summary>
            Requires that the given number is less than or equal to the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="maximum">
            The number must be less than or equal to this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireLessThanOrEqualTo(System.Single,System.Single,System.String)">
            <summary>
            Requires that the given number is less than or equal to the given value.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="maximum">
            The number must be less than or equal to this value.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireNotNull(System.Object,System.String)">
            <summary>
            Requires that the given parameter must not be null.
            </summary>
            <param name="parameter">
            The parameter to check for null.
            </param>
            <param name="parameterName">
            The name of the parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireNotNull(System.Object,System.String,StyleCop.ParamErrorTextHandler)">
            <summary>
            Requires that the given parameter must not be null.
            </summary>
            <param name="parameter">
            The parameter to check for null.
            </param>
            <param name="parameterName">
            The name of the parameter.
            </param>
            <param name="errorTextHandler">
            Delegate for getting the error text.
            </param>
            <remarks>
            It is more efficient to pass the error text through a delegate if the text is extracted
            from a resource file. The text will only be loaded if it is actually needed.
            </remarks>
        </member>
        <member name="M:StyleCop.Param.RequireNotNull(System.Object,System.String,System.String)">
            <summary>
            Requires that the given parameter must not be null.
            </summary>
            <param name="parameter">
            The parameter to check for null.
            </param>
            <param name="parameterName">
            The name of the parameter.
            </param>
            <param name="exceptionMessage">
            Message of the exception to create.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireValidCollection(System.Collections.ICollection,System.String)">
            <summary>
            Requires that the given collection is not null or empty.
            </summary>
            <param name="parameter">
            The collection to check.
            </param>
            <param name="parameterName">
            The name of the collection parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireValidIndex(System.Boolean,System.String,System.String)">
            <summary>
            Requires that an index be between a valid range. 
            </summary>
            <param name="test">
            The test for validity.
            </param>
            <param name="parameterName">
            The name of the parameter.
            </param>
            <param name="exceptionMessage">
            Message of the exception to create.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireValidIndex(System.Boolean,System.String,StyleCop.ParamErrorTextHandler)">
            <summary>
            Requires that an index be between a valid range. 
            </summary>
            <param name="test">
            The test for validity.
            </param>
            <param name="parameterName">
            The name of the parameter.
            </param>
            <param name="errorTextHandler">
            Delegate for getting the error text.
            </param>
            <remarks>
            It is more efficient to pass the error text through a delegate if the text is extracted
            from a resource file. The text will only be loaded if it is actually needed.
            </remarks>
        </member>
        <member name="M:StyleCop.Param.RequireValidString(System.String,System.String)">
            <summary>
            Requires that the given string is not null or empty.
            </summary>
            <param name="parameter">
            The string to check.
            </param>
            <param name="parameterName">
            The name of the string parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireValueBetween(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Requires that the given number is between the two given values.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="low">
            The valid low end range.
            </param>
            <param name="high">
            The valid high end range.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireValueBetween(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Requires that the given number is between the two given values.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="low">
            The valid low end range.
            </param>
            <param name="high">
            The valid high end range.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireValueBetween(System.Int16,System.Int16,System.Int16,System.String)">
            <summary>
            Requires that the given number is between the two given values.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="low">
            The valid low end range.
            </param>
            <param name="high">
            The valid high end range.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireValueBetween(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Requires that the given number is between the two given values.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="low">
            The valid low end range.
            </param>
            <param name="high">
            The valid high end range.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="M:StyleCop.Param.RequireValueBetween(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Requires that the given number is between the two given values.
            </summary>
            <param name="number">
            The number to check.
            </param>
            <param name="low">
            The valid low end range.
            </param>
            <param name="high">
            The valid high end range.
            </param>
            <param name="parameterName">
            The name of the number parameter.
            </param>
        </member>
        <member name="T:StyleCop.SourceAnalyzer">
            <summary>
            Base class for StyleCop code analyzer modules.
            </summary>
        </member>
        <member name="F:StyleCop.SourceAnalyzer.parserId">
            <summary>
            The ID of the parser that this analyzer is attached to.
            </summary>
        </member>
        <member name="F:StyleCop.SourceAnalyzer.parser">
            <summary>
            The parser that this analyzer is attached to.
            </summary>
        </member>
        <member name="M:StyleCop.SourceAnalyzer.#ctor">
            <summary>
            Initializes a new instance of the SourceAnalyzer class.
            </summary>
        </member>
        <member name="P:StyleCop.SourceAnalyzer.Cancel">
            <summary>
            Gets a value indicating whether the analyzer should cancel its analysis and return immediately.
            </summary>
            <remarks>The analyzer should check the value of this property periodically while
            analyzing a document. If the value is set to true, the analyzer should immediately stop
            analyzing the document and return.</remarks>
        </member>
        <member name="P:StyleCop.SourceAnalyzer.Parser">
            <summary>
            Gets the parser object that this analyzer is attached to.
            </summary>
        </member>
        <member name="P:StyleCop.SourceAnalyzer.ParserId">
            <summary>
            Gets the ID of the parser that this analyzer is attached to.
            </summary>
        </member>
        <member name="M:StyleCop.SourceAnalyzer.AnalyzeDocument(StyleCop.CodeDocument)">
            <summary>
            Analyzes a code document.
            </summary>
            <param name="document">
            The document to analyze.
            </param>
        </member>
        <member name="M:StyleCop.SourceAnalyzer.DelayAnalysis(StyleCop.CodeDocument,System.Int32)">
            <summary>
            Determines whether the analyzer wishes to delay its analysis until a later pass.
            </summary>
            <param name="document">
            The document to analyze.
            </param>
            <param name="passNumber">
            The current pass number.
            </param>
            <returns>
            Returns true if the analysis should be delayed until the next pass, or
            false if the analysis should be performed in the current pass.
            </returns>
        </member>
        <member name="M:StyleCop.SourceAnalyzer.DoAnalysis(StyleCop.CodeDocument)">
            <summary>
            Give the analyzer a final chance to stop the analysis of this document.
            </summary>
            <param name="document">
            The document to check to see if we need to actually continue.
            </param>
            <returns>
            True if the document should be analyzed otherwise False.
            </returns>
        </member>
        <member name="M:StyleCop.SourceAnalyzer.GetDependantFilesHashCode(System.Globalization.CultureInfo)">
            <summary>
            Returns a hash code of the files the analyzer uses to complete its analysis.
            </summary>
            <param name="culture">
            The culture we are analyzing with.
            </param>
            <returns>
            The hash code or 0 if we don't use any other files.
            </returns>
        </member>
        <member name="M:StyleCop.SourceAnalyzer.IsRuleEnabled(StyleCop.CodeDocument,System.String)">
            <summary>
            Gets a value indicating whether the given rule is enabled for the given document.
            </summary>
            <param name="document">
            The document.
            </param>
            <param name="ruleName">
            The rule to check.
            </param>
            <returns>
            Returns true if the rule is enabled; otherwise false.
            </returns>
        </member>
        <member name="M:StyleCop.SourceAnalyzer.IsRuleSuppressed(StyleCop.ICodeElement,System.String,System.String,System.String)">
            <summary>
            Determines whether the given rule is suppressed for the given element.
            </summary>
            <param name="element">
            The element to check.
            </param>
            <param name="ruleCheckId">
            The Id of the rule to check.
            </param>
            <param name="ruleName">
            The Name of the rule to check.
            </param>
            <param name="ruleNamespace">
            The Namespace of the rule to check.
            </param>
            <returns>
            Returns true is the rule is suppressed; otherwise false.
            </returns>
        </member>
        <member name="M:StyleCop.SourceAnalyzer.PostAnalyze">
            <summary>
            Called after an analysis run is completed.
            </summary>
        </member>
        <member name="M:StyleCop.SourceAnalyzer.PreAnalyze">
            <summary>
            Called before an analysis run is initiated.
            </summary>
        </member>
        <member name="M:StyleCop.SourceAnalyzer.SetParser(StyleCop.SourceParser)">
            <summary>
            Sets the parser that this analyzer is attached to.
            </summary>
            <param name="item">
            The parser object that this analyzer is attached to.
            </param>
        </member>
        <member name="M:StyleCop.SourceAnalyzer.GetDocumentData(StyleCop.CodeDocument)">
            <summary>
            Gets the data saved by this analyzer within the given document.
            </summary>
            <param name="document">
            The document containing the data.
            </param>
            <returns>
            Returns the data if it exists.
            </returns>
        </member>
        <member name="M:StyleCop.SourceAnalyzer.ImportInitializationXml(System.Xml.XmlDocument,System.Boolean,System.Boolean)">
            <summary>
            Parses the Xml document which initializes the analyzer.
            </summary>
            <param name="document">
            The xml document to load.
            </param>
            <param name="topmostType">
            Indicates whether the xml document comes from the top-most type in the 
            add-in's type hierarchy.
            </param>
            <param name="isKnownAssembly">
            Indicates whether the add-in comes from a known assembly.
            </param>
        </member>
        <member name="M:StyleCop.SourceAnalyzer.Log(StyleCop.StyleCopLogLevel,System.String)">
            <summary>
            Writes the given output to the StyleCop log file.
            </summary>
            <param name="level">
            The output level.
            </param>
            <param name="output">
            The output text to write.
            </param>
        </member>
        <member name="M:StyleCop.SourceAnalyzer.SetDocumentData(StyleCop.CodeDocument,System.Object)">
            <summary>
            Stores the given data object within the given document.
            </summary>
            <param name="document">
            The document to store the data within.
            </param>
            <param name="data">
            The data to store.
            </param>
        </member>
        <member name="T:StyleCop.StyleCopException">
            <summary>
            An exception generated by StyleCop.
            </summary>
        </member>
        <member name="M:StyleCop.StyleCopException.#ctor">
            <summary>
            Initializes a new instance of the StyleCopException class.
            </summary>
        </member>
        <member name="M:StyleCop.StyleCopException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the StyleCopException class.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
        </member>
        <member name="M:StyleCop.StyleCopException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the StyleCopException class.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference, the current exception is raised 
            in a catch block that handles the inner exception.
            </param>
        </member>
        <member name="M:StyleCop.StyleCopException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the StyleCopException class.
            </summary>
            <param name="serializationInfo">
            Holds the serialization info about the exception.
            </param>
            <param name="streamingContext">
            Holds contextual information.
            </param>
        </member>
        <member name="T:StyleCop.SourceParser">
            <summary>
            Base class for StyleCop code parser modules.
            </summary>
        </member>
        <member name="F:StyleCop.SourceParser.analyzers">
            <summary>
            The list of analyzers loaded into this parser.
            </summary>
        </member>
        <member name="F:StyleCop.SourceParser.fileTypes">
            <summary>
            The list of file types supported by this parser.
            </summary>
        </member>
        <member name="P:StyleCop.SourceParser.Analyzers">
            <summary>
            Gets the list of analyzers loaded into this parser.
            </summary>
        </member>
        <member name="P:StyleCop.SourceParser.FileTypes">
            <summary>
            Gets the collection of code file types supported by this parser.
            </summary>
        </member>
        <member name="M:StyleCop.SourceParser.AddGlobalViolation(System.Int32,System.String,System.Object[])">
            <summary>
            Adds a global violation.
            </summary>
            <param name="line">
            The line in the code where the violation occurs.
            </param>
            <param name="ruleName">
            The name of the rule that triggered the violation.
            </param>
            <param name="values">
            String values to add to the violation string.
            </param>
        </member>
        <member name="M:StyleCop.SourceParser.AddGlobalViolation(System.Int32,System.Enum,System.Object[])">
            <summary>
            Adds a global violation.
            </summary>
            <param name="line">
            The line in the code where the violation occurs.
            </param>
            <param name="ruleName">
            The name of the rule that triggered the violation.
            </param>
            <param name="values">
            String values to add to the violation string.
            </param>
        </member>
        <member name="M:StyleCop.SourceParser.AddViolation(StyleCop.SourceCode,System.Int32,System.String,System.Object[])">
            <summary>
            Adds one violation to the given source code document.
            </summary>
            <param name="sourceCode">
            The source code document that the violation appears in.
            </param>
            <param name="line">
            The line in the code where the violation occurs.
            </param>
            <param name="ruleName">
            The name of the rule that triggered the violation.
            </param>
            <param name="values">
            String parameters to insert into the violation string.
            </param>
        </member>
        <member name="M:StyleCop.SourceParser.AddViolation(StyleCop.SourceCode,System.Int32,System.Enum,System.Object[])">
            <summary>
            Adds one violation to the given source code document.
            </summary>
            <param name="sourceCode">
            The source code document that the violation appears in.
            </param>
            <param name="line">
            The line in the code where the violation occurs.
            </param>
            <param name="ruleName">
            The name of the rule that triggered the violation.
            </param>
            <param name="values">
            String parameters to insert into the violation string.
            </param>
        </member>
        <member name="M:StyleCop.SourceParser.AddViolation(StyleCop.Violation)">
            <summary>
            Adds the given violation.
            </summary>
            <param name="violation">
            The violation to add.
            </param>
        </member>
        <member name="M:StyleCop.SourceParser.ParseFile(StyleCop.SourceCode,System.Int32,StyleCop.CodeDocument@)">
            <summary>
            Parses a source code document.
            </summary>
            <param name="sourceCode">
            The source code to parse.
            </param>
            <param name="passNumber">
            The current pass number.
            </param>
            <param name="document">
            The parsed representation of the file.
            </param>
            <returns>
            Returns false if no further analysis should be done on this file.
            </returns>
            <remarks>
            If this method returns false, StyleCop will call the method again on the next pass
            and send in the same file, list of analyzers, and document. This allows the parser to perform 
            to parse its files in stages, if necessary.
            </remarks>
        </member>
        <member name="M:StyleCop.SourceParser.PostParse">
            <summary>
            Called after an analysis run is completed.
            </summary>
        </member>
        <member name="M:StyleCop.SourceParser.PreParse">
            <summary>
            Called before a new analysis run is initiated.
            </summary>
        </member>
        <member name="M:StyleCop.SourceParser.SkipAnalysisForDocument(StyleCop.SourceCode)">
            <summary>
            Indicates whether to skip analysis on the given document.
            </summary>
            <param name="sourceCode">
            The sourceCode to check.
            </param>
            <returns>
            Returns true to skip analysis on the document.
            </returns>
        </member>
        <member name="M:StyleCop.SourceParser.ClearAnalyzerTags(StyleCop.CodeDocument)">
            <summary>
            Clears the analyzer tags for the given document and all of its children.
            </summary>
            <param name="document">
            The document to clear.
            </param>
            <remarks>
            <para>
            During each analysis run, analyzers can store data within each analyzed document for
            later use. Analyzers store and retrieve this data using the <see cref="M:StyleCop.SourceAnalyzer.GetDocumentData(StyleCop.CodeDocument)"/>
            and <see cref="M:StyleCop.SourceAnalyzer.SetDocumentData(StyleCop.CodeDocument,System.Object)"/> methods.
            </para>
            <para>
            After all analysis has been completed, this analyzer data should be cleared so that
            it will not conflict with the next analysis. This method can be called to clear all
            analyzer data which was stored during the previous analysis.
            </para>
            </remarks>
        </member>
        <member name="M:StyleCop.SourceParser.ExportViolations(StyleCop.CodeDocument,System.Xml.XmlDocument,System.Xml.XmlNode)">
            <summary>
            Exports the violations found within this document into the given xml node.
            </summary>
            <param name="document">
            The document containing the violations.
            </param>
            <param name="violationsDocument">
            The xml document in which to store the violation information.
            </param>
            <param name="parentNode">
            The parent node within this xml document under which to store the violation information.
            </param>
        </member>
        <member name="M:StyleCop.SourceParser.ImportViolations(StyleCop.SourceCode,System.Xml.XmlNode)">
            <summary>
            Imports the cached violations under the given node.
            </summary>
            <param name="sourceCode">
            The source code containing the violations.
            </param>
            <param name="parentNode">
            The parent xml node containing the list of violations.
            </param>
            <returns>
            Returns true if all the data was loaded successfully from the file.
            </returns>
        </member>
        <member name="M:StyleCop.SourceParser.ImportInitializationXml(System.Xml.XmlDocument,System.Boolean,System.Boolean)">
            <summary>
            Parses the given Xml document and loads the rules.
            </summary>
            <param name="document">
            The xml document to load.
            </param>
            <param name="topmostType">
            Indicates whether the xml document comes from the top-most type in the 
            add-in's type hierarchy.
            </param>
            <param name="isKnownAssembly">
            Indicates whether the add-in comes from a known assembly.
            </param>
        </member>
        <member name="M:StyleCop.SourceParser.Log(StyleCop.StyleCopLogLevel,System.String)">
            <summary>
            Writes the given output to the StyleCop log file.
            </summary>
            <param name="level">
            The output level.
            </param>
            <param name="output">
            The output text to write.
            </param>
        </member>
        <member name="M:StyleCop.SourceParser.ExportElementViolations(StyleCop.ICodeElement,System.Xml.XmlDocument,System.Xml.XmlNode)">
            <summary>
            Exports the violations found within this document into the given xml node.
            </summary>
            <param name="element">
            The element containing the violations to export.
            </param>
            <param name="violationsDocument">
            The xml document in which to store the violation information.
            </param>
            <param name="parentNode">
            The parent node within this xml document under which to store the violation information.
            </param>
        </member>
        <member name="M:StyleCop.SourceParser.ExportViolation(StyleCop.Violation,System.Xml.XmlDocument,System.Xml.XmlNode)">
            <summary>
            Exports the contents of the given violation into the given xml node.
            </summary>
            <param name="violation">
            The violation to save.
            </param>
            <param name="violationsDocument">
            The xml document in which to store the violation information.
            </param>
            <param name="parentNode">
            The parent node within this xml document under which to store the violation information.
            </param>
        </member>
        <member name="T:StyleCop.StyleCopTask">
            <summary>
            MSBuild task that exposes StyleCop to MSBuild-based projects.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopTask.DefaultViolationLimit">
            <summary>
            Allow 10000 violations by default.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopTask.MSBuildErrorCode">
            <summary>
            Error code used when logging errors/warnings to MSBuild.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopTask.MSBuildSubCategory">
            <summary>
            SubCategory used when logging errors/warnings to MSBuild.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopTask.inputAdditionalAddinPaths">
            <summary>
            MSBuild input - see corresponding public property for details.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopTask.inputCacheResults">
            <summary>
            MSBuild input - see corresponding public property for details.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopTask.inputDefineConstants">
            <summary>
            MSBuild input - see corresponding public property for details.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopTask.inputForceFullAnalysis">
            <summary>
            MSBuild input - see corresponding public property for details.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopTask.inputOverrideSettingsFile">
            <summary>
            MSBuild input - see corresponding public property for details.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopTask.inputProjectFullPath">
            <summary>
            MSBuild input - see corresponding public property for details.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopTask.inputSourceFiles">
            <summary>
            MSBuild input - see corresponding public property for details.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopTask.inputTreatErrorsAsWarnings">
            <summary>
            MSBuild input - see corresponding public property for details.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopTask.maxViolationCount">
            <summary>
            MSBuild input - see corresponding public property for details.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopTask.outputFile">
            <summary>
            MSBuild input - see corresponding public property for details.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopTask.succeeded">
            <summary>
            Keeps track of whether we encountered any errors (not warnings).
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopTask.violationCount">
            <summary>
            The number of violations seen.
            </summary>
        </member>
        <member name="F:StyleCop.StyleCopTask.violationLimit">
            <summary>
            The number of violations to allow.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopTask.AdditionalAddinPaths">
            <summary>
            Gets or sets the array of folders to search for addin modules.
            </summary>
            <remarks>This value is set by MSBuild.</remarks>
        </member>
        <member name="P:StyleCop.StyleCopTask.CacheResults">
            <summary>
            Gets or sets a value indicating whether StyleCop should write cache files to disk after
            performing an analysis.
            </summary>
            <remarks>This value is set by MSBuild.</remarks>
        </member>
        <member name="P:StyleCop.StyleCopTask.DefineConstants">
            <summary>
            Gets or sets the constants defined in the project.
            </summary>
            <remarks>This value is set by MSBuild.</remarks>
        </member>
        <member name="P:StyleCop.StyleCopTask.ForceFullAnalysis">
            <summary>
            Gets or sets a value indicating whether StyleCop should ignore cached results and 
            perform a clean analysis.
            </summary>
            <remarks>This value is set by MSBuild.</remarks>
        </member>
        <member name="P:StyleCop.StyleCopTask.MaxViolationCount">
            <summary>
            Gets or sets the maximum number of violations allowed from the project until analysis will quit.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopTask.OutputFile">
            <summary>
            Gets or sets a value specifying the name of the file for outputting the violations.
            </summary>
        </member>
        <member name="P:StyleCop.StyleCopTask.OverrideSettingsFile">
            <summary>
            Gets or sets a file containing the settings that are specific to this project. Settings that are present in
            the OverrideSettingsFile will override settings that are present in the SharedSettingsFile.
            </summary>
            <remarks>This value is set by MSBuild. This file will be ignored if it is null or cannot be opened.</remarks>
        </member>
        <member name="P:StyleCop.StyleCopTask.ProjectFullPath">
            <summary>
            Gets or sets the complete path to the project file.
            </summary>
            <remarks>This value is set by MSBuild.</remarks>
        </member>
        <member name="P:StyleCop.StyleCopTask.SourceFiles">
            <summary>
            Gets or sets the files to analyze.
            </summary>
            <remarks>This value is set by MSBuild.</remarks>
        </member>
        <member name="P:StyleCop.StyleCopTask.TreatErrorsAsWarnings">
            <summary>
            Gets or sets a value indicating whether StyleCop should log all violations as build warnings.
            </summary>
            <remarks>This value is set by MSBuild.</remarks>
        </member>
        <member name="P:StyleCop.StyleCopTask.ViolationCount">
            <summary>
            Gets the number of violations seen.
            </summary>
        </member>
        <member name="M:StyleCop.StyleCopTask.Execute">
            <summary>
            Executes this MSBuild task, based on the input values passed in by the MSBuild engine.
            </summary>
            <returns>Returns true if there were no errors, false otherwise.</returns>
        </member>
        <member name="M:StyleCop.StyleCopTask.OnOutputGenerated(System.Object,StyleCop.OutputEventArgs)">
            <summary>
            Called when StyleCop outputs messages.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.StyleCopTask.OnViolationEncountered(System.Object,StyleCop.ViolationEventArgs)">
            <summary>
            Called when StyleCop encounters a violation.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="T:StyleCop.MasterList`1">
            <summary>
            A master list of items.
            </summary>
            <typeparam name="T">
            The type of item stored in the list.
            </typeparam>
        </member>
        <member name="F:StyleCop.MasterList`1.Empty">
            <summary>
            An empty master list.
            </summary>
        </member>
        <member name="F:StyleCop.MasterList`1.list">
            <summary>
            The internal list.
            </summary>
        </member>
        <member name="F:StyleCop.MasterList`1.readOnly">
            <summary>
            Indicates whether the list is read-only.
            </summary>
        </member>
        <member name="M:StyleCop.MasterList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StyleCop.MasterList`1"/> class. 
            Initializes a new instance of the MasterList class.
            </summary>
        </member>
        <member name="M:StyleCop.MasterList`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:StyleCop.MasterList`1"/> class. 
            Initializes a new instance of the MasterList class.
            </summary>
            <param name="items">
            The initial list.
            </param>
        </member>
        <member name="M:StyleCop.MasterList`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:StyleCop.MasterList`1"/> class. 
            Initializes a new instance of the MasterList class.
            </summary>
            <param name="readOnly">
            Indicates whether the collection is read-only.
            </param>
        </member>
        <member name="M:StyleCop.MasterList`1.#ctor(StyleCop.LinkedItemList{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:StyleCop.MasterList`1"/> class. 
            Initializes a new instance of the MasterList class.
            </summary>
            <param name="innerList">
            The inner list to wrap in this object.
            </param>
            <param name="readOnly">
            Indicates whether the collection is read-only.
            </param>
        </member>
        <member name="E:StyleCop.MasterList`1.NodeIndexesReset">
            <summary>
            Event that is fired when the node indexes are reset.
            </summary>
        </member>
        <member name="P:StyleCop.MasterList`1.AsReadOnly">
            <summary>
            Gets a read-only version of the list.
            </summary>
        </member>
        <member name="P:StyleCop.MasterList`1.Count">
            <summary>
            Gets the number of nodes in the collection.
            </summary>
        </member>
        <member name="P:StyleCop.MasterList`1.First">
            <summary>
            Gets the first item in the list.
            </summary>
        </member>
        <member name="P:StyleCop.MasterList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the list is read-only.
            </summary>
        </member>
        <member name="P:StyleCop.MasterList`1.Last">
            <summary>
            Gets the last item in the list.
            </summary>
        </member>
        <member name="P:StyleCop.MasterList`1.AsReadWrite">
            <summary>
            Gets a read-write version of the list.
            </summary>
        </member>
        <member name="P:StyleCop.MasterList`1.InnerList">
            <summary>
            Gets the inner list wrapped by this class.
            </summary>
        </member>
        <member name="M:StyleCop.MasterList`1.Add(`0)">
            <summary>
            Adds a item to the collection.
            </summary>
            <param name="item">
            The item to add to the collection.
            </param>
        </member>
        <member name="M:StyleCop.MasterList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the range of items to the collection.
            </summary>
            <param name="items">
            The range of items to add.
            </param>
        </member>
        <member name="M:StyleCop.MasterList`1.Clear">
            <summary>
            Clears the contents of the list.
            </summary>
        </member>
        <member name="M:StyleCop.MasterList`1.Contains(`0)">
            <summary>
            Determines whether the given item is contained within the list.
            </summary>
            <param name="item">
            The item to search for.
            </param>
            <returns>
            Returns true if the item is contained within the list.
            </returns>
        </member>
        <member name="M:StyleCop.MasterList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire collection to the given array, starting at the specified index of the target array.
            </summary>
            <param name="array">
            The array that is the destination of the nodes copied from the collection.
            </param>
            <param name="arrayIndex">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="M:StyleCop.MasterList`1.ForwardIterator">
            <summary>
            Gets an iterator for enumerating forward through the items in the list.
            </summary>
            <returns>Returns the enumerable object.</returns>
        </member>
        <member name="M:StyleCop.MasterList`1.ForwardIterator(StyleCop.Node{`0})">
            <summary>
            Gets an iterator for enumerating forward through the items in the list.
            </summary>
            <param name="start">
            The start position of the iterator.
            </param>
            <returns>
            Returns the enumerable object.
            </returns>
        </member>
        <member name="M:StyleCop.MasterList`1.ForwardNodeIterator">
            <summary>
            Gets an iterator for enumerating forward through the nodes in the list.
            </summary>
            <returns>Returns the enumerable object.</returns>
        </member>
        <member name="M:StyleCop.MasterList`1.ForwardNodeIterator(StyleCop.Node{`0})">
            <summary>
            Gets an iterator for enumerating forward through the nodes in the list.
            </summary>
            <param name="start">
            The start position of the iterator.
            </param>
            <returns>
            Returns the enumerable object.
            </returns>
        </member>
        <member name="M:StyleCop.MasterList`1.GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the nodes in the collection.
            </summary>
            <returns>Returns an enumerator that iterates through the nodes in the collection.</returns>
        </member>
        <member name="M:StyleCop.MasterList`1.InsertAfter(`0,StyleCop.Node{`0})">
            <summary>
            Inserts a item into the list after the given node.
            </summary>
            <param name="item">
            The item to insert.
            </param>
            <param name="nodeToInsertAfter">
            The node to insert the item after.
            </param>
            <returns>
            Returns the new node.
            </returns>
        </member>
        <member name="M:StyleCop.MasterList`1.InsertBefore(`0,StyleCop.Node{`0})">
            <summary>
            Inserts a node into the list before the given node.
            </summary>
            <param name="item">
            The item to insert.
            </param>
            <param name="nodeToInsertBefore">
            The node to insert the item before.
            </param>
            <returns>
            Returns the new node.
            </returns>
        </member>
        <member name="M:StyleCop.MasterList`1.InsertFirst(`0)">
            <summary>
            Inserts the specified item at the beginning of the list.
            </summary>
            <param name="item">
            The item to insert.
            </param>
            <returns>
            Returns the new node.
            </returns>
        </member>
        <member name="M:StyleCop.MasterList`1.InsertLast(`0)">
            <summary>
            Inserts the specified item at the end of the list.
            </summary>
            <param name="item">
            The item to insert.
            </param>
            <returns>
            Returns the new node.
            </returns>
        </member>
        <member name="M:StyleCop.MasterList`1.OutOfBounds(StyleCop.Node{`0})">
            <summary>
            Determines whether the given node is beyond the bounds of the list.
            </summary>
            <param name="node">
            The node to check.
            </param>
            <returns>
            Returns true if the node is beyond the bounds of the list.
            </returns>
        </member>
        <member name="M:StyleCop.MasterList`1.Remove(`0)">
            <summary>
            Removes the given item from the list.
            </summary>
            <param name="item">
            The item to remove from the list.
            </param>
            <returns>
            Return true if the item was removed from the list.
            </returns>
            <remarks>
            This method is inefficient as it must iterate the list to find the node to remove.
            </remarks>
        </member>
        <member name="M:StyleCop.MasterList`1.Remove(StyleCop.Node{`0})">
            <summary>
            Removes the given item from the list.
            </summary>
            <param name="node">
            The item to remove from the list.
            </param>
            <returns>
            Return true if the item was removed from the list.
            </returns>
        </member>
        <member name="M:StyleCop.MasterList`1.RemoveRange(StyleCop.Node{`0},StyleCop.Node{`0})">
            <summary>
            Removes the given range of items from the list.
            </summary>
            <param name="startNode">
            The first item to remove.
            </param>
            <param name="endNode">
            The last item to remove.
            </param>
            <remarks>
            This method assumes that both the start item and the end item are items in this list,
            and that the start item appears before the end item in the list. These assumptions are not
            verified, so use this method with care.
            </remarks>
        </member>
        <member name="M:StyleCop.MasterList`1.Replace(StyleCop.Node{`0},`0)">
            <summary>
            Removes the given node from the list and replaces it with a different node.
            </summary>
            <param name="node">
            The node to remove.
            </param>
            <param name="newItem">
            The replacement item.
            </param>
            <returns>
            Returns the new node for the replacement item.
            </returns>
        </member>
        <member name="M:StyleCop.MasterList`1.ReverseIterator">
            <summary>
            Gets an iterator for enumerating backwards through the items in the list.
            </summary>
            <returns>Returns the enumerable object.</returns>
        </member>
        <member name="M:StyleCop.MasterList`1.ReverseIterator(StyleCop.Node{`0})">
            <summary>
            Gets an iterator for enumerating backwards through the items in the list.
            </summary>
            <param name="start">
            The start position of the iterator.
            </param>
            <returns>
            Returns the enumerable object.
            </returns>
        </member>
        <member name="M:StyleCop.MasterList`1.ReverseNodeIterator">
            <summary>
            Gets an iterator for enumerating backwards through the nodes in the list.
            </summary>
            <returns>Returns the enumerable object.</returns>
        </member>
        <member name="M:StyleCop.MasterList`1.ReverseNodeIterator(StyleCop.Node{`0})">
            <summary>
            Gets an iterator for enumerating backwards through the nodes in the list.
            </summary>
            <param name="start">
            The start position of the iterator.
            </param>
            <returns>
            Returns the enumerable object.
            </returns>
        </member>
        <member name="M:StyleCop.MasterList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the nodes in the collection.
            </summary>
            <returns>Returns an enumerator that iterates through the nodes in the collection.</returns>
        </member>
        <member name="M:StyleCop.MasterList`1.OnNodeIndexesReset(System.EventArgs)">
            <summary>
            Called when the node indexes are reset.
            </summary>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.MasterList`1.ListNodeIndexesReset(System.Object,System.EventArgs)">
            <summary>
            Called when the node indexes are reset within the inner list.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="T:StyleCop.Utils">
            <summary>
            This contains utility functions.
            </summary>
        </member>
        <member name="M:StyleCop.Utils.DetectIfByteArrayIsUtf8(System.Collections.Generic.IList{System.Byte},System.Int32)">
            <summary>
            Checks for a valid UTF8 byte sequence. An implementation of http://www.ietf.org/rfc/rfc2279.txt?number=2279
            </summary>
            <param name="buffer">
            The buffer to check. 
            </param>
            <param name="length">
            The number of bytes to check. 
            </param>
            <returns>
            True if the bytes checked are UTF8; otherwise False. 
            </returns>
        </member>
        <member name="M:StyleCop.Utils.GetAssemblyAttribute``1(System.Reflection.Assembly)">
            <summary>
            Returns the specified Attribute for the assembly.
            </summary>
            <typeparam name="T">
            The attribute to return.
            </typeparam>
            <param name="assembly">
            The assembly to check.
            </param>
            <returns>
            The attribute required or null.
            </returns>
        </member>
        <member name="M:StyleCop.Utils.GetDisplayUserName">
            <summary>
            Gets the full username.
            </summary>
            <returns>The username string.</returns>
        </member>
        <member name="M:StyleCop.Utils.GetFileEncoding(System.String)">
            <summary>
            Detects the encoding used by the file at the path provided.
            </summary>
            <param name="path">
            A path to a file.
            </param>
            <returns>
            An Encoding of the file passed in.
            </returns>
        </member>
        <member name="M:StyleCop.Utils.InputMatchesRegExPattern(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether the given file path matches any of the filter patterns.
            </summary>
            <param name="input">
            The string to match with the Regular Expressions.
            </param>
            <param name="patterns">
            The <see cref="T:System.Text.RegularExpressions.Regex"/> patterns to match with.
            </param>
            <returns>
            Returns true if the file path name matches any of the patterns.
            </returns>
        </member>
        <member name="M:StyleCop.Utils.MakeAbsolutePath(System.String,System.String)">
            <summary>
            Creates an absolute path given a relative path and the root directory.
            </summary>
            <param name="rootFolder">
            The root directory.
            </param>
            <param name="relativePath">
            The relative path.
            </param>
            <returns>
            Returns the absolute path.
            </returns>
        </member>
        <member name="M:StyleCop.Utils.ReplaceTokenVariables(System.String,System.IO.FileInfo)">
            <summary>
            Replaces any tokenized strings and returns the expanded result.
            </summary>
            <param name="value">
            The tokenized string to expand.
            </param>
            <param name="file">
            The file to use for replaceable info.
            </param>
            <returns>
            The expanded string.
            </returns>
        </member>
        <member name="T:StyleCop.SpellingTab">
            <summary>
            Options dialog to manage words for spelling.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.DeprecatedWordsPropertyName">
            <summary>
            The deprecated words property name.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.DictionaryFoldersPropertyName">
            <summary>
            The dictionary folders property name.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.RecognizedWordsPropertyName">
            <summary>
            The recognized words property name.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.addAlternateWordTextBox">
            <summary>
            The add alternate word text box.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.addDeprecatedWordButton">
            <summary>
            The add deprecated word button.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.addDeprecatedWordTextBox">
            <summary>
            The add deprecated word text box.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.addFolderButton">
            <summary>
            The add folder button.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.addFolderTextBox">
            <summary>
            The add folder text box.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.addRecognizedWordButton">
            <summary>
            The Add button.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.addRecognizedWordTextBox">
            <summary>
            The add prefix box.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.deprecatedWordsColumnHeader">
            <summary>
            The deprecated words column header.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.deprecatedWordsListView">
            <summary>
            The deprecated words list view.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.dictionaryFoldersColumnHeader">
            <summary>
            The dictionary folders column header.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.dirty">
            <summary>
            True if the page is dirty.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.foldersListView">
            <summary>
            The folders list view.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.formAcceptButton">
            <summary>
            Stores the form's accept button while focus is on the add textbox.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.groupBox2">
            <summary>
            The group box 2.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.groupBox3">
            <summary>
            The group box 3.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.label1">
            <summary>
            The static text label.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.label10">
            <summary>
            The label 10.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.label2">
            <summary>
            The static text label.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.label3">
            <summary>
            Contains help text.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.label4">
            <summary>
            The label 4.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.label5">
            <summary>
            The label 5.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.label6">
            <summary>
            The label 6.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.label7">
            <summary>
            The label 7.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.label8">
            <summary>
            The label 8.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.label9">
            <summary>
            The label 9.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.recognizedWordsColumnHeader">
            <summary>
            The default column on the ListView control.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.recognizedWordsListView">
            <summary>
            The current words box.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.removeDeprecatedWordButton">
            <summary>
            The remove deprecated word button.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.removeFolderButton">
            <summary>
            The remove folder button.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.removeRecognizedWordButton">
            <summary>
            The Remove button.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.tableLayoutPanel1">
            <summary>
            The table layout panel 1.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.label12">
            <summary>
            The label 12.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.tableLayoutPanel2">
            <summary>
            The table layout panel 2.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.groupBox1">
            <summary>
            The group box 1.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.tableLayoutPanel3">
            <summary>
            The table layout panel 3.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.label11">
            <summary>
            The label 11.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.tableLayoutPanel4">
            <summary>
            The table layout panel 4.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.tableLayoutPanel5">
            <summary>
            The table layout panel 5.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.label13">
            <summary>
            The label 13.
            </summary>
        </member>
        <member name="F:StyleCop.SpellingTab.tabControl">
            <summary>
            The tab control which hosts this page.
            </summary>
        </member>
        <member name="M:StyleCop.SpellingTab.#ctor">
            <summary>
            Initializes a new instance of the SpellingTab class.
            </summary>
        </member>
        <member name="P:StyleCop.SpellingTab.Dirty">
            <summary>
            Gets or sets a value indicating whether any data on the page is dirty.
            </summary>
        </member>
        <member name="P:StyleCop.SpellingTab.TabName">
            <summary>
            Gets the name of the the tab.
            </summary>
        </member>
        <member name="M:StyleCop.SpellingTab.Activate(System.Boolean)">
            <summary>
            Called when the page is activated.
            </summary>
            <param name="activated">
            Indicates whether the page is being activated or deactivated.
            </param>
        </member>
        <member name="M:StyleCop.SpellingTab.Apply">
            <summary>
            Saves the data and clears the dirty flag.
            </summary>
            <returns>Returns true if the data is saved, false if not.</returns>
        </member>
        <member name="M:StyleCop.SpellingTab.Initialize(StyleCop.PropertyControl)">
            <summary>
            Initializes the page.
            </summary>
            <param name="propertyControl">
            The tab control object.
            </param>
        </member>
        <member name="M:StyleCop.SpellingTab.PostApply(System.Boolean)">
            <summary>
            Called after all pages have been applied.
            </summary>
            <param name="wasDirty">
            The dirty state of the page before it was applied.
            </param>
        </member>
        <member name="M:StyleCop.SpellingTab.PreApply">
            <summary>
            Called before all pages are applied.
            </summary>
            <returns>Returns false if no pages should be applied.</returns>
        </member>
        <member name="M:StyleCop.SpellingTab.RefreshSettingsOverrideState">
            <summary>
            Refreshes the bold state of items on the page.
            </summary>
        </member>
        <member name="M:StyleCop.SpellingTab.InitializeColumns">
            <summary>
            The initialize columns.
            </summary>
        </member>
        <member name="M:StyleCop.SpellingTab.AddDeprecatedWordButtonClick(System.Object,System.EventArgs)">
            <summary>
            Event that is fired when the add deprecated word button is clicked.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.SpellingTab.AddDeprecatedWordKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called when a key is clicked while focus is on the add textbox.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.SpellingTab.AddDictionaryFolderKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            The add dictionary folder key down.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:StyleCop.SpellingTab.AddFolderButtonClick(System.Object,System.EventArgs)">
            <summary>
            The add folder button click.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:StyleCop.SpellingTab.AddParentSettingsValues">
            <summary>
            Adds values from the parent settings.
            </summary>
        </member>
        <member name="M:StyleCop.SpellingTab.AddRecognizedWordButtonClick(System.Object,System.EventArgs)">
            <summary>
            Event that is fired when the add button is clicked.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.SpellingTab.AddRecognizedWordKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called when a key is clicked while focus is on the add textbox.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.SpellingTab.AddWordGotFocus(System.Object,System.EventArgs)">
            <summary>
            Called when the add TextBox receives the input focus.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.SpellingTab.AddWordLostFocus(System.Object,System.EventArgs)">
            <summary>
            Called when the add TextBox loses the input focus.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.SpellingTab.DeprecatedWordListKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called when a key is clicked while focus is on the list.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.SpellingTab.DeprecatedWordsListViewSizeChanged(System.Object,System.EventArgs)">
            <summary>
            Resizes the column inside the ListView.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.SpellingTab.DictionaryFoldersKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            The dictionary folders key down.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:StyleCop.SpellingTab.DictionaryFoldersListViewSizeChanged(System.Object,System.EventArgs)">
            <summary>
            The dictionary folders list view size changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:StyleCop.SpellingTab.EnableDisableRemoveButtons">
            <summary>
            Sets the enabled state of the remove buttons.
            </summary>
        </member>
        <member name="M:StyleCop.SpellingTab.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:StyleCop.SpellingTab.RecognizedWordListKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called when a key is clicked while focus is on the list.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.SpellingTab.RecognizedWordsListViewSizeChanged(System.Object,System.EventArgs)">
            <summary>
            Resizes the column inside the ListView.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.SpellingTab.RemoveDeprecatedWordButtonClick(System.Object,System.EventArgs)">
            <summary>
            Event that is fired when the remove button is clicked.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.SpellingTab.RemoveFolderButtonClick(System.Object,System.EventArgs)">
            <summary>
            The remove folder button click.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:StyleCop.SpellingTab.RemoveRecognizedWordButtonClick(System.Object,System.EventArgs)">
            <summary>
            Event that is fired when the remove button is clicked.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.SpellingTab.SetBoldState(System.Windows.Forms.ListViewItem,System.Windows.Forms.ListView)">
            <summary>
            Sets the bold state of the item.
            </summary>
            <param name="item">
            The item to set.
            </param>
            <param name="listView">
            The ListView to use.
            </param>
        </member>
        <member name="M:StyleCop.SpellingTab.WordListItemSelectionChanged(System.Object,System.Windows.Forms.ListViewItemSelectionChangedEventArgs)">
            <summary>
            Called when the current selection changes in the ListView.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="T:StyleCop.Violation">
            <summary>
            Describes one violation.
            </summary>
        </member>
        <member name="F:StyleCop.Violation.element">
            <summary>
            The element that the violation appears in.
            </summary>
        </member>
        <member name="F:StyleCop.Violation.line">
            <summary>
            The line number that the violation appears on.
            </summary>
        </member>
        <member name="F:StyleCop.Violation.location">
            <summary>
            The code location that the violation appears on.
            </summary>
        </member>
        <member name="F:StyleCop.Violation.message">
            <summary>
            The context message.
            </summary>
        </member>
        <member name="F:StyleCop.Violation.rule">
            <summary>
            The rule that triggered the violation.
            </summary>
        </member>
        <member name="F:StyleCop.Violation.sourceCode">
            <summary>
            The source code that the violation appears in.
            </summary>
        </member>
        <member name="F:StyleCop.Violation.key">
            <summary>
            The unique key for this violation.
            </summary>
        </member>
        <member name="M:StyleCop.Violation.#ctor(StyleCop.Rule,StyleCop.ICodeElement,StyleCop.CodeLocation,System.String)">
            <summary>
            Initializes a new instance of the Violation class.
            </summary>
            <param name="rule">
            The rule that triggered the violation.
            </param>
            <param name="element">
            The element that this violation appears in.
            </param>
            <param name="location">
            The location in the source code where the violation occurs.
            </param>
            <param name="message">
            The context message for the violation.
            </param>
        </member>
        <member name="M:StyleCop.Violation.#ctor(StyleCop.Rule,StyleCop.ICodeElement,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the Violation class.
            </summary>
            <param name="rule">
            The rule that triggered the violation.
            </param>
            <param name="element">
            The element that this violation appears in.
            </param>
            <param name="line">
            The line in the source code where the violation occurs.
            </param>
            <param name="message">
            The context message for the violation.
            </param>
        </member>
        <member name="M:StyleCop.Violation.#ctor(StyleCop.Rule,StyleCop.SourceCode,StyleCop.CodeLocation,System.String)">
            <summary>
            Initializes a new instance of the Violation class.
            </summary>
            <param name="rule">
            The rule that triggered the violation.
            </param>
            <param name="sourceCode">
            The source code that this violation appears in.
            </param>
            <param name="location">
            The location in the source code where the violation occurs.
            </param>
            <param name="message">
            The context message for the violation.
            </param>
        </member>
        <member name="M:StyleCop.Violation.#ctor(StyleCop.Rule,StyleCop.SourceCode,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the Violation class.
            </summary>
            <param name="rule">
            The rule that triggered the violation.
            </param>
            <param name="sourceCode">
            The source code that this violation appears in.
            </param>
            <param name="line">
            The line in the source code where the violation occurs.
            </param>
            <param name="message">
            The context message for the violation.
            </param>
        </member>
        <member name="P:StyleCop.Violation.Element">
            <summary>
            Gets the element that contains the violation.
            </summary>
        </member>
        <member name="P:StyleCop.Violation.Key">
            <summary>
            Gets the unique key for this violation that can be used when adding
            the violation to a dictionary.
            </summary>
        </member>
        <member name="P:StyleCop.Violation.Line">
            <summary>
            Gets the line number in the source code where the violation occurs.
            </summary>
        </member>
        <member name="P:StyleCop.Violation.Location">
            <summary>
            Gets the location the violation occurred on or null if we only know the line number. Location has a 1 based line and 1 based column.
            </summary>
        </member>
        <member name="P:StyleCop.Violation.Message">
            <summary>
            Gets the context message for the violation.
            </summary>
        </member>
        <member name="P:StyleCop.Violation.Rule">
            <summary>
            Gets the rule that triggered the violation.
            </summary>
        </member>
        <member name="P:StyleCop.Violation.SourceCode">
            <summary>
            Gets the source code that contains the violation.
            </summary>
        </member>
        <member name="M:StyleCop.Violation.UpdateKey">
            <summary>
            Updates the internal key.
            </summary>
        </member>
        <member name="T:StyleCop.ViolationEventArgs">
            <summary>
            Contains event information for violation events.
            </summary>
        </member>
        <member name="F:StyleCop.ViolationEventArgs.violation">
            <summary>
            The violation.
            </summary>
        </member>
        <member name="M:StyleCop.ViolationEventArgs.#ctor(StyleCop.Violation)">
            <summary>
            Initializes a new instance of the ViolationEventArgs class.
            </summary>
            <param name="violation">
            The violation.
            </param>
        </member>
        <member name="P:StyleCop.ViolationEventArgs.Element">
            <summary>
            Gets the element of code that the violation appears in.
            </summary>
        </member>
        <member name="P:StyleCop.ViolationEventArgs.LineNumber">
            <summary>
            Gets the line number in the code where the violation appears. 1 based.
            </summary>
        </member>
        <member name="P:StyleCop.ViolationEventArgs.Location">
            <summary>
            Gets the location in the code where the violation appears or null if only the line number is known.
            </summary>
        </member>
        <member name="P:StyleCop.ViolationEventArgs.Message">
            <summary>
            Gets the context message string for the violation.
            </summary>
        </member>
        <member name="P:StyleCop.ViolationEventArgs.SourceCode">
            <summary>
            Gets the source code that contains the violation.
            </summary>
        </member>
        <member name="P:StyleCop.ViolationEventArgs.Violation">
            <summary>
            Gets the violation.
            </summary>
        </member>
        <member name="P:StyleCop.ViolationEventArgs.Warning">
            <summary>
            Gets a value indicating whether this violation is only a warning.
            </summary>
        </member>
        <member name="T:System.Reflection.ParameterInfoExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Reflection.ParameterInfo"/> type.
            </summary>
        </member>
        <member name="M:System.Reflection.ParameterInfoExtensions.HasCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
            <summary>
            Determines whether a <see cref="T:System.Reflection.ParameterInfo"/> has a particular <see cref="T:System.Reflection.ParameterInfo"/> of custom <see cref="T:System.Attribute"/> defined.
            </summary>
            <param name="parameterInfo">
            The <see cref="T:System.Reflection.ParameterInfo"/> to check.
            </param>
            <param name="attributeType">
            The <see cref="T:System.Reflection.ParameterInfo"/> of custom <see cref="T:System.Attribute"/>.
            </param>
            <param name="inherit">
            Whether to search the <see cref="T:System.Reflection.ParameterInfo"/>'s inheritance chain to find the attributes.
            </param>
            <returns>
            <c>true</c>if the <see cref="T:System.Reflection.ParameterInfo"/> has any of the specified custom attributes; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="parameterInfo"/> or <paramref name="attributeType"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:System.Reflection.ParameterInfoExtensions.IsByRefOrOut(System.Reflection.ParameterInfo)">
            <summary>
            Determines whether a <see cref="T:System.Reflection.ParameterInfo"/> is by-reference or output.
            </summary>
            <param name="parameterInfo">
            The parameter information.
            </param>
            <returns>
            <c>true</c>if <paramref name="parameterInfo"/> is by-reference or output; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Reflection.ParameterInfoExtensions.IsByRefOutOrReturnValue(System.Reflection.ParameterInfo)">
            <summary>
            Determines whether a <see cref="T:System.Reflection.ParameterInfo"/> is by-reference, output or a return value.
            </summary>
            <param name="parameterInfo">
            The parameter information.
            </param>
            <returns>
            <c>true</c>if <paramref name="parameterInfo"/> is by-reference, output or a return value; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Reflection.ParameterInfoExtensions.IsInOrByRef(System.Reflection.ParameterInfo)">
            <summary>
            Determines whether a <see cref="T:System.Reflection.ParameterInfo"/> is input or by-reference.
            </summary>
            <param name="parameterInfo">
            The parameter information.
            </param>
            <returns>
            <c>true</c>if <paramref name="parameterInfo"/> is input or by-reference; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Reflection.ParameterInfoExtensions.IsReturnValue(System.Reflection.ParameterInfo)">
            <summary>
            Determines whether a <see cref="T:System.Reflection.ParameterInfo"/> is a return value.
            </summary>
            <param name="parameterInfo">
            The parameter information.
            </param>
            <returns>
            <c>true</c>if <paramref name="parameterInfo"/> is a return value; otherwise <c>false</c>.
            </returns>
            <remarks>
            Although the <see cref="T:System.Reflection.ParameterInfo"/> type has an <see cref="P:System.Reflection.ParameterInfo.IsRetval"/> property which should serve 
            this purpose, it appears to return <c>false</c> in some cases even when the parameter is a return value (the MSDN 
            documentation for this value indicates that it is a flag inserted by compilers, however they are not obliged to do so). 
            We can check more reliably whether it is a return value by checking whether the <see cref="P:System.Reflection.ParameterInfo.Position"/> 
            is -1 (although this doesn't appear to be documented anywhere).
            </remarks>
        </member>
        <member name="T:System.StringExtensions">
            <summary>
            Extension methods for the <see cref="T:System.String"/> class.
            </summary>
        </member>
        <member name="M:System.StringExtensions.Capitalize(System.String)">
            <summary>
            Capitalizes the first character of the specified string.
            </summary>
            <param name="s">
            The string to capitalize.
            </param>
            <returns>
            A string with the first character capitalized.
            </returns>
        </member>
        <member name="M:System.StringExtensions.FormatWith(System.String,System.Object[])">
            <summary>
            Replaces the format item in a <see cref="T:System.String"/> with the text equivalent of the value of a corresponding <see cref="T:System.Object"/> 
            instance in a specified array, using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="format">
            A composite format string.
            </param>
            <param name="args">
            An <see cref="T:System.Object"/> array containing zero or more objects to format.
            </param>
            <returns>
            A copy of format in which the format items have been replaced by the <see cref="T:System.String"/> equivalent of the corresponding instances 
            of <see cref="T:System.Object"/>  in args.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="format"/> or <paramref name="args"/> is <c>Null.</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="format"/>is invalid.
            <para>
            - or -.
            </para>
            The number indicating an argument to format is less than zero, or greater than or equal to the length of the <paramref name="args"/> array.
            </exception>
        </member>
        <member name="M:System.StringExtensions.FormatWith(System.String,System.IFormatProvider,System.Object[])">
            <summary>
            Replaces the format item in a <see cref="T:System.String"/> with the text equivalent of the value of a corresponding <see cref="T:System.Object"/> 
            instance in a specified array. A specified parameter supplies culture-specific formatting information.
            </summary>
            <param name="format">
            A composite format string.
            </param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <param name="args">
            An <see cref="T:System.Object"/> array containing zero or more objects to format.
            </param>
            <returns>
            A copy of format in which the format items have been replaced by the <see cref="T:System.String"/> equivalent of the corresponding instances 
            of <see cref="T:System.Object"/>  in args.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="format"/> or <paramref name="args"/> is <c>Null.</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="format"/>is invalid.
            <para>
            - or -.
            </para>
            The number indicating an argument to format is less than zero, or greater than or equal to the length of the <paramref name="args"/> array.
            </exception>
        </member>
        <member name="M:System.StringExtensions.HasValue(System.String)">
            <summary>
            Indicates whether the specified <see cref="T:System.String"/> is null or an <see cref="F:System.String.Empty"/> string.
            </summary>
            <param name="s">
            The <see cref="T:System.String"/> to check.
            </param>
            <returns>
            <c>false</c> if the value is null or an <see cref="F:System.String.Empty"/> string; otherwise, <c>true</c>.
            </returns>
        </member>
        <member name="M:System.StringExtensions.IsMatch(System.String,System.String)">
            <summary>
            Indicates whether the regular expression finds a match in the input string, using the regular expression specified.
            </summary>
            <param name="s">
            The string to search for a match.
            </param>
            <param name="regex">
            The regular expression pattern to match.
            </param>
            <returns>
            <c>true</c> if the regular expression finds a match; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:System.StringExtensions.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Indicates whether the regular expression finds a match in the input string, using the regular expression specified 
            and the matching options supplied in the options parameter.
            </summary>
            <param name="s">
            The string to search for a match.
            </param>
            <param name="regex">
            The regular expression pattern to match.
            </param>
            <param name="options">
            The regular expression options.
            A bitwise OR combination of <see cref="T:System.Text.RegularExpressions.RegexOptions"/> enumeration values.
            </param>
            <returns>
            <c>true</c> if the regular expression finds a match; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:System.StringExtensions.JoinWith(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Concatenates a specified separator string between each element of a specified sequence, yielding a single concatenated string.
            </summary>
            <param name="source">
            The sequence of strings to join.
            </param>
            <param name="separator">
            The separator to join the strings with.
            </param>
            <returns>
            A single concatenated string.
            </returns>
        </member>
        <member name="M:System.StringExtensions.SubstringAfter(System.String,System.Char)">
            <summary>
            Retrieves a substring after the first instance of a character.
            </summary>
            <param name="s">
            The string to retrieve the substring from.
            </param>
            <param name="c">
            The character to seek.
            </param>
            <returns>
            The substring after the first occurrence of <paramref name="c"/>, or <paramref name="s"/> if <paramref name="c"/> is not found.
            </returns>
        </member>
        <member name="M:System.StringExtensions.SubstringAfter(System.String,System.String,System.StringComparison)">
            <summary>
            Retrieves a substring after the first instance of a string.
            </summary>
            <param name="s">
            The string to retrieve the substring from.
            </param>
            <param name="value">
            The string to seek.
            </param>
            <param name="comparisonType">
            The type of comparison to perform.
            </param>
            <returns>
            The substring after the first occurrence of <paramref name="value"/>, or <paramref name="s"/> if <paramref name="value"/> is not found.
            </returns>
        </member>
        <member name="M:System.StringExtensions.SubstringAfterLast(System.String,System.Char)">
            <summary>
            Retrieves a substring after the last instance of a character.
            </summary>
            <param name="s">
            The string to retrieve the substring from.
            </param>
            <param name="c">
            The character to seek.
            </param>
            <returns>
            The substring after the last occurrence of <paramref name="c"/>, or <paramref name="s"/> if <paramref name="c"/> is not found.
            </returns>
        </member>
        <member name="M:System.StringExtensions.SubstringBefore(System.String,System.Char)">
            <summary>
            Retrieves a substring before the first instance of a character.
            </summary>
            <param name="s">
            The string to retrieve the substring from.
            </param>
            <param name="c">
            The character to seek.
            </param>
            <returns>
            The substring before the first occurrence of <paramref name="c"/>, or <paramref name="s"/> if <paramref name="c"/> is not found.
            </returns>
        </member>
        <member name="M:System.StringExtensions.SubstringBefore(System.String,System.String,System.StringComparison)">
            <summary>
            Retrieves a substring before the first instance of a string.
            </summary>
            <param name="s">
            The string to retrieve the substring from.
            </param>
            <param name="value">
            The value to seek.
            </param>
            <param name="comparisonType">
            The type of comparison to perform.
            </param>
            <returns>
            The substring before the first occurrence of <paramref name="value"/>, or <paramref name="s"/> if <paramref name="value"/> is not found.
            </returns>
        </member>
        <member name="M:System.StringExtensions.SubstringBeforeLast(System.String,System.Char)">
            <summary>
            Retrieves a substring before the last instance of a character.
            </summary>
            <param name="s">
            The string to retrieve the substring from.
            </param>
            <param name="c">
            The character to seek.
            </param>
            <returns>
            The substring before the last occurrence of <paramref name="c"/>, or <paramref name="s"/> if <paramref name="c"/> is not found.
            </returns>
        </member>
        <member name="M:System.StringExtensions.SubstringBeforeLast(System.String,System.String,System.StringComparison)">
            <summary>
            Retrieves a substring before the last instance of a string.
            </summary>
            <param name="s">
            The string to retrieve the substring from.
            </param>
            <param name="value">
            The string to seek.
            </param>
            <param name="comparisonType">
            The type of comparison to perform.
            </param>
            <returns>
            The substring before the last occurrence of <paramref name="value"/>, or <paramref name="s"/> if <paramref name="value"/> is not found.
            </returns>
        </member>
        <member name="M:System.StringExtensions.Truncate(System.String,System.Int32)">
            <summary>
            Truncates a string to a specified length, suffixing the truncated string with an ellipsis (…).
            </summary>
            <param name="s">
            The string to truncate.
            </param>
            <param name="length">
            The maximum length of the truncated string, including the ellipsis.
            </param>
            <returns>
            The truncated string.
            </returns>
        </member>
        <member name="T:System.TypeExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Type"/> class.
            </summary>
        </member>
        <member name="M:System.TypeExtensions.GetAssignableToTypes(System.Type)">
            <summary>
            Gets all the types that a <see cref="T:System.Type"/> is assignable to, including itself, base types, and implemented interfaces.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> definition.
            </param>
            <returns>
            An enumerable list of assignable to types.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/>is <c>null</c>.
            </exception>
        </member>
        <member name="M:System.TypeExtensions.GetGenericParameterDefinition(System.Type)">
            <summary>
            Gets the generic parameter definition for a <see cref="T:System.Type"/> that represents a type parameter in the definition of 
            a generic type or method.
            </summary>
            <param name="parameterType">
            The parameter <see cref="T:System.Type"/>.
            </param>
            <returns>
            The generic parameter definition for <paramref name="parameterType"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parameterType"/>is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="parameterType"/>is not a generic parameter (i.e. <see cref="P:System.Type.IsGenericParameter"/> is <c>false</c>).
            </exception>
        </member>
        <member name="M:System.TypeExtensions.GetTypeHierarchy(System.Type)">
            <summary>
            Gets the hierarchy for a <see cref="T:System.Type"/>, including itself and all base types except <see cref="T:System.Object"/>.
            </summary>
            <param name="type">
            The type to get the hierarchy for.
            </param>
            <returns>
            An enumerable list of types, with most derived type first.
            </returns>
        </member>
        <member name="M:System.TypeExtensions.HasCustomAttribute(System.Type,System.Type,System.Boolean)">
            <summary>
            Determines whether a <see cref="T:System.Type"/> has a particular <see cref="T:System.Type"/> of custom <see cref="T:System.Attribute"/> defined.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> to check.
            </param>
            <param name="attributeType">
            The <see cref="T:System.Type"/> of custom <see cref="T:System.Attribute"/>.
            </param>
            <param name="inherit">
            Whether to search the <see cref="T:System.Type"/>'s inheritance chain to find the attributes.
            </param>
            <returns>
            <c>true</c>if the <see cref="T:System.Type"/> has any of the specified custom attributes; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="type"/> or <paramref name="attributeType"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:System.TypeExtensions.IsInteger(System.Type)">
            <summary>
            Determines whether a <see cref="T:System.Type"/> represents an integer.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> to check.
            </param>
            <returns>
            <c>true</c>if <paramref name="type"/> represents <see cref="T:System.Byte"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.UInt16"/>,
            <see cref="T:System.Int32"/>, <see cref="T:System.UInt32"/>, <see cref="T:System.Int64"/> or <see cref="T:System.UInt64"/>; otherwise <c>false.</c>
            </returns>
        </member>
        <member name="M:System.TypeExtensions.IsNullableT(System.Type)">
            <summary>
            Determines whether <see cref="T:System.Nullable`1"/> is assignable from a <see cref="T:System.Type"/>.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> to check.
            </param>
            <returns>
            <c>true</c>if <see cref="T:System.Nullable`1"/> is assignable from <paramref name="type"/>; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:System.TypeExtensions.IsSignedInteger(System.Type)">
            <summary>
            Determines whether a <see cref="T:System.Type"/> represents a signed integer.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> to check.
            </param>
            <returns>
            <c>true</c>if <paramref name="type"/> represents <see cref="T:System.SByte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/> or 
            <see cref="T:System.Int64"/>; otherwise <c>false.</c>
            </returns>
        </member>
        <member name="M:System.TypeExtensions.IsUnsignedInteger(System.Type)">
            <summary>
            Determines whether a <see cref="T:System.Type"/> represents an unsigned integer.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> to check.
            </param>
            <returns>
            <c>true</c>if <paramref name="type"/> represents <see cref="T:System.Byte"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or 
            <see cref="T:System.UInt64"/>; otherwise <c>false.</c>
            </returns>
        </member>
        <member name="M:System.TypeExtensions.MeetsGenericParameterConstraints(System.Type,System.Type)">
            <summary>
            Determines whether a <see cref="T:System.Type"/> meets the constraints for a generic parameter, i.e. whether it could be used 
            as the concrete type for a generic parameter.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> to check.
            </param>
            <param name="parameterType">
            The generic parameter <see cref="T:System.Type"/>.
            </param>
            <returns>
            <c>true</c>if <paramref name="type"/> meets the generic constraints; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="type"/> or <paramref name="parameterType"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="parameterType"/>is not a generic parameter (i.e. <see cref="P:System.Type.IsGenericParameter"/> is <c>false</c>).
            </exception>
        </member>
        <member name="M:System.TypeExtensions.RemoveByRefModifier(System.Type)">
            <summary>
            Removes the by-ref modifier from a type.
            </summary>
            <param name="type">
            The type to remove the modifier from.
            </param>
            <returns>
            A type without the by-ref modifier.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/>is <c>null</c>.
            </exception>
        </member>
        <member name="M:System.TypeExtensions.MeetsGenericParameterConstraint(System.Type,System.Type)">
            <summary>
            Determines whether a <see cref="T:System.Type"/> meets a type constraint for a generic parameter.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> to check.
            </param>
            <param name="constraintType">
            The generic parameter type constraint.
            </param>
            <returns>
            <c>true</c>if <paramref name="type"/> meets the generic parameter type constraint; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="type"/> or <paramref name="constraintType"/> is <c>null</c>.
            </exception>
        </member>
    </members>
</doc>
